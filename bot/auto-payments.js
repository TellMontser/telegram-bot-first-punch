import { createYukassaPayment, getYukassaPayment, YUKASSA_CONFIG } from './yukassa.js';
import { addPayment, updatePaymentStatus, addSubscription, getUser, updatePaymentMethodStatus } from './lib/supabase.js';
import crypto from 'crypto';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
export const AUTO_PAYMENT_CONFIG = {
  amount: 10, // 10 —Ä—É–±–ª–µ–π –∑–∞ –º–µ—Å—è—Ü
  intervalMinutes: 5, // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±—É–¥–µ—Ç 30 –¥–Ω–µ–π)
  description: '–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø–æ–¥–ø–∏—Å–∫–∏ "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
export async function createAutoPayment(userId, user) {
  try {
    console.log(`üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    if (!userId || !user) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const amount = AUTO_PAYMENT_CONFIG.amount;
    const description = AUTO_PAYMENT_CONFIG.description;
    
    const metadata = {
      userId: userId.toString(),
      username: user.username || '',
      first_name: user.first_name || '',
      type: 'auto_subscription',
      auto_payment: 'true'
    };
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    const paymentData = {
      amount: {
        value: amount.toFixed(2),
        currency: 'RUB'
      },
      confirmation: {
        type: 'redirect',
        return_url: 'https://t.me/firstpunch_bot'
      },
      capture: true,
      description: description,
      metadata: metadata,
      save_payment_method: true, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
      receipt: {
        customer: {
          full_name: `${user.first_name || ''} ${user.last_name || ''}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: `user${userId}@firstpunch.ru`,
          phone: '+79991234567'
        },
        items: [
          {
            description: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" (–∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂)',
            quantity: '1.00',
            amount: {
              value: amount.toFixed(2),
              currency: 'RUB'
            },
            vat_code: 1,
            payment_mode: 'full_payment',
            payment_subject: 'service'
          }
        ],
        tax_system_code: 1
      }
    };

    const auth = Buffer.from(`${YUKASSA_CONFIG.shopId}:${YUKASSA_CONFIG.secretKey}`).toString('base64');
    const idempotenceKey = crypto.randomUUID();
    
    console.log('üîê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa API...');
    
    const response = await fetch(`${YUKASSA_CONFIG.apiUrl}/payments`, {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json',
        'Idempotence-Key': idempotenceKey
      },
      body: JSON.stringify(paymentData)
    });

    const responseText = await response.text();
    console.log(`üì° –û—Ç–≤–µ—Ç –ÆKassa API (${response.status}):`, responseText);

    if (!response.ok) {
      let errorDetails = responseText;
      try {
        const errorJson = JSON.parse(responseText);
        errorDetails = errorJson.description || errorJson.error_description || errorJson.message || responseText;
      } catch (parseError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏');
      }
      
      throw new Error(`–ÆKassa API error (${response.status}): ${errorDetails}`);
    }

    let payment;
    try {
      payment = JSON.parse(responseText);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ÆKassa:', parseError);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ÆKassa API');
    }
    
    console.log('‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –≤ –ÆKassa:', payment.id);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await addPayment(
      userId, 
      payment.id, 
      parseFloat(payment.amount.value), 
      payment.status,
      payment.confirmation?.confirmation_url,
      'yukassa'
    );
    
    return {
      paymentId: payment.id,
      status: payment.status,
      amount: parseFloat(payment.amount.value),
      confirmationUrl: payment.confirmation?.confirmation_url,
      createdAt: payment.created_at,
      paymentMethod: payment.payment_method
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
export async function createRecurringPayment(userId, paymentMethodId, user) {
  try {
    console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å –º–µ—Ç–æ–¥–æ–º ${paymentMethodId}`);
    
    const amount = AUTO_PAYMENT_CONFIG.amount;
    const description = AUTO_PAYMENT_CONFIG.description;
    
    const metadata = {
      userId: userId.toString(),
      username: user.username || '',
      first_name: user.first_name || '',
      type: 'auto_subscription_recurring',
      auto_payment: 'true',
      payment_method_id: paymentMethodId
    };
    
    const paymentData = {
      amount: {
        value: amount.toFixed(2),
        currency: 'RUB'
      },
      payment_method_id: paymentMethodId,
      capture: true,
      description: description,
      metadata: metadata,
      receipt: {
        customer: {
          full_name: `${user.first_name || ''} ${user.last_name || ''}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: `user${userId}@firstpunch.ru`,
          phone: '+79991234567'
        },
        items: [
          {
            description: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" (–∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ)',
            quantity: '1.00',
            amount: {
              value: amount.toFixed(2),
              currency: 'RUB'
            },
            vat_code: 1,
            payment_mode: 'full_payment',
            payment_subject: 'service'
          }
        ],
        tax_system_code: 1
      }
    };

    const auth = Buffer.from(`${YUKASSA_CONFIG.shopId}:${YUKASSA_CONFIG.secretKey}`).toString('base64');
    const idempotenceKey = crypto.randomUUID();
    
    const response = await fetch(`${YUKASSA_CONFIG.apiUrl}/payments`, {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json',
        'Idempotence-Key': idempotenceKey
      },
      body: JSON.stringify(paymentData)
    });

    const responseText = await response.text();
    console.log(`üì° –û—Ç–≤–µ—Ç –ÆKassa API –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (${response.status}):`, responseText);

    if (!response.ok) {
      let errorDetails = responseText;
      try {
        const errorJson = JSON.parse(responseText);
        errorDetails = errorJson.description || errorJson.error_description || errorJson.message || responseText;
      } catch (parseError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏');
      }
      
      throw new Error(`–ÆKassa API error (${response.status}): ${errorDetails}`);
    }

    let payment;
    try {
      payment = JSON.parse(responseText);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ÆKassa:', parseError);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ÆKassa API');
    }
    
    console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:', payment.id);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await addPayment(
      userId, 
      payment.id, 
      parseFloat(payment.amount.value), 
      payment.status,
      null, // –ù–µ—Ç confirmation_url –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
      'yukassa'
    );
    
    return {
      paymentId: payment.id,
      status: payment.status,
      amount: parseFloat(payment.amount.value),
      createdAt: payment.created_at
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π (–æ—Ç–≤—è–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
export async function cancelAutoPayments(userId) {
  try {
    console.log(`‚ùå –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await updatePaymentMethodStatus(userId, false);
    
    console.log(`‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
export async function handleSuccessfulAutoPayment(paymentId, paymentData) {
  try {
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: ${paymentId}`);
    
    const userId = parseInt(paymentData.metadata?.userId);
    if (!userId) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω userId –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    await updatePaymentStatus(paymentId, 'succeeded');
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞
    if (paymentData.payment_method && paymentData.metadata?.auto_payment === 'true') {
      await savePaymentMethod(userId, paymentData.payment_method);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü
    const duration = 30; // 30 –¥–Ω–µ–π
    await addSubscription(userId, paymentId, AUTO_PAYMENT_CONFIG.amount, duration, 'yukassa');
    
    console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
export async function savePaymentMethod(userId, paymentMethod) {
  try {
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    if (!paymentMethod || !paymentMethod.id) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞');
    }
    
    const { error } = await supabase
      .from('payment_methods')
      .upsert({
        user_id: userId,
        payment_method_id: paymentMethod.id,
        type: paymentMethod.type || 'card',
        card_mask: paymentMethod.card?.last4 ? `****${paymentMethod.card.last4}` : null,
        is_active: true,
        auto_payments_enabled: true,
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'payment_method_id'
      });

    if (error) throw error;
    
    console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${paymentMethod.id}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserPaymentMethods(userId) {
  try {
    const { data, error } = await supabase
      .from('payment_methods')
      .select('*')
      .eq('user_id', userId)
      .eq('is_active', true)
      .eq('auto_payments_enabled', true);

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤:', error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø–∏—Å–∞–Ω–∏–π (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
export async function processAutoPayments() {
  try {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞–º–∏
    const { data: paymentMethods, error } = await supabase
      .from('payment_methods')
      .select(`
        *,
        users (
          id,
          username,
          first_name,
          last_name,
          subscription_status
        )
      `)
      .eq('is_active', true)
      .eq('auto_payments_enabled', true);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤:', error);
      return;
    }

    if (!paymentMethods || paymentMethods.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π');
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${paymentMethods.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
    for (const paymentMethod of paymentMethods) {
      try {
        const user = paymentMethod.users;
        if (!user) continue;

        console.log(`üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        const payment = await createRecurringPayment(
          user.id,
          paymentMethod.payment_method_id,
          user
        );

        // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω —Å—Ä–∞–∑—É (—á—Ç–æ –±—ã–≤–∞–µ—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏)
        if (payment.status === 'succeeded') {
          await handleSuccessfulAutoPayment(payment.paymentId, {
            metadata: {
              userId: user.id.toString(),
              auto_payment: 'true'
            }
          });
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${paymentMethod.user_id}:`, error.message);
        
        // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
        if (error.message.includes('payment_method_not_found') || 
            error.message.includes('invalid_payment_method')) {
          await updatePaymentMethodStatus(paymentMethod.user_id, false);
        }
      }
    }

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π:', error.message);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
export {
  AUTO_PAYMENT_CONFIG,
  createAutoPayment,
  createRecurringPayment,
  cancelAutoPayments,
  handleSuccessfulAutoPayment,
  savePaymentMethod,
  getUserPaymentMethods,
  processAutoPayments
};