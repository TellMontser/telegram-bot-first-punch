import crypto from 'crypto';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CryptoCloud
export const CRYPTOCLOUD_CONFIG = {
  apiKey: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1dWlkIjoiTmpBeE1UVT0iLCJ0eXBlIjoicHJvamVjdCIsInYiOiIyNDJlZjFiZjRmYWIxODIwNDQyZjZhMjliOGJjNDI3NDRiNmUzMzYwNGU4OTU5NTFjMWRkODFkM2ZkNTBiZjMzIiwiZXhwIjo4ODE1MDQyMDM2NH0.vU7V3x_i0l62iRTvF0t42hqa_5wldaYHoKqCn_n0w7U',
  shopId: 'aWVLYZybDtoiSLKK',
  secret: 'ftX3MHvoz90F8azxuhPnrSyH27EVP4yWUVyu',
  apiUrl: 'https://api.cryptocloud.plus/v1'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ –≤ CryptoCloud
export async function createCryptoCloudInvoice(amount, description, metadata = {}) {
  try {
    console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –≤ CryptoCloud:', { amount, description, metadata });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!amount || amount <= 0) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞');
    }
    
    if (!description) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞');
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π - 50 —Ä—É–±–ª–µ–π
    const minAmount = 50;
    if (amount < minAmount) {
      throw new Error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π: ${minAmount}‚ÇΩ`);
    }
    
    const invoiceData = {
      shop_id: CRYPTOCLOUD_CONFIG.shopId,
      amount: amount.toFixed(2),
      currency: 'RUB',
      order_id: `order_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      description: description,
      success_url: 'https://t.me/firstpunch_bot',
      fail_url: 'https://t.me/firstpunch_bot',
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      email: metadata.email || 'user@firstpunch.ru',
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è webhook
      metadata: JSON.stringify(metadata)
    };

    console.log('üîê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ CryptoCloud API...');
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å–∞:', JSON.stringify(invoiceData, null, 2));
    
    const response = await fetch(`${CRYPTOCLOUD_CONFIG.apiUrl}/invoice/create`, {
      method: 'POST',
      headers: {
        'Authorization': `Token ${CRYPTOCLOUD_CONFIG.apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(invoiceData)
    });

    const responseText = await response.text();
    console.log(`üì° –û—Ç–≤–µ—Ç CryptoCloud API (${response.status}):`, responseText);

    if (!response.ok) {
      let errorDetails = responseText;
      try {
        const errorJson = JSON.parse(responseText);
        errorDetails = errorJson.message || errorJson.error || errorJson.detail || responseText;
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ CryptoCloud:', errorJson);
      } catch (parseError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å');
      }
      
      console.error('‚ùå –û—à–∏–±–∫–∞ CryptoCloud API:', response.status, errorDetails);
      throw new Error(`CryptoCloud API error (${response.status}): ${errorDetails}`);
    }

    let invoice;
    try {
      invoice = JSON.parse(responseText);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ CryptoCloud:', parseError);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç CryptoCloud API');
    }
    
    console.log('‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω –≤ CryptoCloud:', invoice.uuid);
    console.log('üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:', invoice.link);
    
    return {
      invoiceId: invoice.uuid,
      orderId: invoiceData.order_id,
      status: invoice.status || 'created',
      amount: parseFloat(invoiceData.amount),
      paymentUrl: invoice.link,
      createdAt: new Date().toISOString()
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ –≤ CryptoCloud:', error.message);
    console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–≤–æ–π—Å–µ
export async function getCryptoCloudInvoice(invoiceId) {
  try {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–≤–æ–π—Å–µ:', invoiceId);
    
    if (!invoiceId) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–Ω–≤–æ–π—Å–∞');
    }
    
    const response = await fetch(`${CRYPTOCLOUD_CONFIG.apiUrl}/invoice/info`, {
      method: 'POST',
      headers: {
        'Authorization': `Token ${CRYPTOCLOUD_CONFIG.apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        uuids: [invoiceId]
      })
    });

    const responseText = await response.text();
    console.log(`üì° –û—Ç–≤–µ—Ç CryptoCloud API –¥–ª—è –∏–Ω–≤–æ–π—Å–∞ ${invoiceId} (${response.status}):`, responseText);

    if (!response.ok) {
      let errorDetails = responseText;
      try {
        const errorJson = JSON.parse(responseText);
        errorDetails = errorJson.message || errorJson.error || errorJson.detail || responseText;
      } catch (parseError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏');
      }
      
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:', response.status, errorDetails);
      throw new Error(`CryptoCloud API error (${response.status}): ${errorDetails}`);
    }

    let result;
    try {
      result = JSON.parse(responseText);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ CryptoCloud:', parseError);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç CryptoCloud API');
    }
    
    const invoice = result.result && result.result[0];
    if (!invoice) {
      throw new Error('–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω–≤–æ–π—Å–µ –ø–æ–ª—É—á–µ–Ω–∞:', invoice.uuid);
    
    return invoice;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ webhook
export function verifyCryptoCloudWebhook(body, signature) {
  try {
    if (!signature) {
      console.log('‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å webhook –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞');
      return false;
    }
    
    const expectedSignature = crypto
      .createHash('sha256')
      .update(body + CRYPTOCLOUD_CONFIG.secret)
      .digest('hex');
    
    return signature === expectedSignature;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ CryptoCloud:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
export async function createSimpleCryptoCloudPayment(amount, description, returnUrl, metadata = {}) {
  try {
    console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', { amount, description, returnUrl, metadata });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
    const minAmount = 50;
    if (amount < minAmount) {
      throw new Error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π: ${minAmount}‚ÇΩ. –£–∫–∞–∑–∞–Ω–æ: ${amount}‚ÇΩ`);
    }
    
    const invoice = await createCryptoCloudInvoice(amount, description, metadata);
    
    return {
      paymentId: invoice.invoiceId,
      orderId: invoice.orderId,
      status: invoice.status,
      amount: invoice.amount,
      confirmationUrl: invoice.paymentUrl,
      createdAt: invoice.createdAt,
      paymentSystem: 'cryptocloud'
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
export async function getCryptoCloudCurrencies() {
  try {
    const response = await fetch(`${CRYPTOCLOUD_CONFIG.apiUrl}/currencies`, {
      method: 'GET',
      headers: {
        'Authorization': `Token ${CRYPTOCLOUD_CONFIG.apiKey}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    return data.result || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:', error);
    return [];
  }
}