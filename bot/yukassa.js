import crypto from 'crypto';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ÆKassa —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export const YUKASSA_CONFIG = {
  shopId: process.env.YUKASSA_SHOP_ID || '1103466',
  secretKey: process.env.YUKASSA_SECRET_KEY || 'live_WljytTzIIcSMRniFfGBdcSpbMw3ajbhomTEAXduTCxo',
  apiUrl: 'https://api.yookassa.ru/v3'
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!YUKASSA_CONFIG.shopId || !YUKASSA_CONFIG.secretKey) {
  console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è YUKASSA_SHOP_ID –∏–ª–∏ YUKASSA_SECRET_KEY');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
export async function createRecurringPayment(amount, description, userInfo, metadata = {}) {
  try {
    console.log('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa:', { amount, description, userInfo, metadata });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!amount || amount <= 0) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞');
    }
    
    if (!description) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞');
    }
    
    if (!userInfo || !userInfo.id) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (!YUKASSA_CONFIG.shopId || !YUKASSA_CONFIG.secretKey) {
      throw new Error('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ÆKassa');
    }
    
    const paymentData = {
      amount: {
        value: amount.toFixed(2),
        currency: 'RUB'
      },
      confirmation: {
        type: 'redirect',
        return_url: 'https://t.me/firstpunch_bot'
      },
      capture: true,
      description: description,
      save_payment_method: true, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
      metadata: {
        ...metadata,
        userId: userInfo.id.toString(),
        username: userInfo.username || '',
        first_name: userInfo.first_name || '',
        payment_type: 'recurring_initial'
      },
      receipt: {
        customer: {
          full_name: userInfo.full_name || `${userInfo.first_name || ''} ${userInfo.last_name || ''}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: userInfo.email || 'user@firstpunch.ru',
          phone: userInfo.phone || '+79991234567'
        },
        items: [
          {
            description: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" (—Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–∞—è)',
            quantity: '1.00',
            amount: {
              value: amount.toFixed(2),
              currency: 'RUB'
            },
            vat_code: 1, // –ù–î–° –Ω–µ –æ–±–ª–∞–≥–∞–µ—Ç—Å—è
            payment_mode: 'full_payment',
            payment_subject: 'service'
          }
        ],
        tax_system_code: 1 // –û–±—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è
      }
    };

    const auth = Buffer.from(`${YUKASSA_CONFIG.shopId}:${YUKASSA_CONFIG.secretKey}`).toString('base64');
    const idempotenceKey = crypto.randomUUID();
    
    console.log('üîê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa API...');
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', JSON.stringify(paymentData, null, 2));
    
    const response = await fetch(`${YUKASSA_CONFIG.apiUrl}/payments`, {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json',
        'Idempotence-Key': idempotenceKey
      },
      body: JSON.stringify(paymentData)
    });

    const responseText = await response.text();
    console.log(`üì° –û—Ç–≤–µ—Ç –ÆKassa API (${response.status}):`, responseText);

    if (!response.ok) {
      let errorDetails = responseText;
      try {
        const errorJson = JSON.parse(responseText);
        errorDetails = errorJson.description || errorJson.error_description || errorJson.message || responseText;
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ÆKassa:', errorJson);
      } catch (parseError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å');
      }
      
      console.error('‚ùå –û—à–∏–±–∫–∞ –ÆKassa API:', response.status, errorDetails);
      throw new Error(`–ÆKassa API error (${response.status}): ${errorDetails}`);
    }

    let payment;
    try {
      payment = JSON.parse(responseText);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ÆKassa:', parseError);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ÆKassa API');
    }
    
    console.log('‚úÖ –†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –≤ –ÆKassa:', payment.id);
    console.log('üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:', payment.confirmation?.confirmation_url);
    
    return {
      paymentId: payment.id,
      status: payment.status,
      amount: parseFloat(payment.amount.value),
      confirmationUrl: payment.confirmation?.confirmation_url,
      createdAt: payment.created_at,
      paymentMethodId: payment.payment_method?.id || null
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa:', error.message);
    console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –æ–ø–ª–∞—Ç—ã
export async function createAutoPayment(paymentMethodId, amount, description, userInfo, metadata = {}) {
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa:', { paymentMethodId, amount, description, userInfo, metadata });
    
    if (!paymentMethodId) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã');
    }
    
    if (!amount || amount <= 0) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞');
    }
    
    if (!userInfo || !userInfo.id) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    const paymentData = {
      amount: {
        value: amount.toFixed(2),
        currency: 'RUB'
      },
      capture: true,
      description: description,
      payment_method_id: paymentMethodId,
      metadata: {
        ...metadata,
        userId: userInfo.id.toString(),
        username: userInfo.username || '',
        first_name: userInfo.first_name || '',
        payment_type: 'recurring_auto'
      },
      receipt: {
        customer: {
          full_name: userInfo.full_name || `${userInfo.first_name || ''} ${userInfo.last_name || ''}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: userInfo.email || 'user@firstpunch.ru',
          phone: userInfo.phone || '+79991234567'
        },
        items: [
          {
            description: '–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"',
            quantity: '1.00',
            amount: {
              value: amount.toFixed(2),
              currency: 'RUB'
            },
            vat_code: 1, // –ù–î–° –Ω–µ –æ–±–ª–∞–≥–∞–µ—Ç—Å—è
            payment_mode: 'full_payment',
            payment_subject: 'service'
          }
        ],
        tax_system_code: 1 // –û–±—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è
      }
    };

    const auth = Buffer.from(`${YUKASSA_CONFIG.shopId}:${YUKASSA_CONFIG.secretKey}`).toString('base64');
    const idempotenceKey = crypto.randomUUID();
    
    console.log('üîê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa API...');
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', JSON.stringify(paymentData, null, 2));
    
    const response = await fetch(`${YUKASSA_CONFIG.apiUrl}/payments`, {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json',
        'Idempotence-Key': idempotenceKey
      },
      body: JSON.stringify(paymentData)
    });

    const responseText = await response.text();
    console.log(`üì° –û—Ç–≤–µ—Ç –ÆKassa API –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ (${response.status}):`, responseText);

    if (!response.ok) {
      let errorDetails = responseText;
      try {
        const errorJson = JSON.parse(responseText);
        errorDetails = errorJson.description || errorJson.error_description || errorJson.message || responseText;
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –ÆKassa:', errorJson);
      } catch (parseError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞');
      }
      
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –ÆKassa API:', response.status, errorDetails);
      throw new Error(`–ÆKassa API error (${response.status}): ${errorDetails}`);
    }

    let payment;
    try {
      payment = JSON.parse(responseText);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –ÆKassa:', parseError);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ÆKassa API');
    }
    
    console.log('‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –≤ –ÆKassa:', payment.id);
    
    return {
      paymentId: payment.id,
      status: payment.status,
      amount: parseFloat(payment.amount.value),
      createdAt: payment.created_at
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa:', error.message);
    console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
export async function getYukassaPayment(paymentId) {
  try {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ:', paymentId);
    
    if (!paymentId) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–ª–∞—Ç–µ–∂–∞');
    }
    
    const auth = Buffer.from(`${YUKASSA_CONFIG.shopId}:${YUKASSA_CONFIG.secretKey}`).toString('base64');
    
    const response = await fetch(`${YUKASSA_CONFIG.apiUrl}/payments/${paymentId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json'
      }
    });

    const responseText = await response.text();
    console.log(`üì° –û—Ç–≤–µ—Ç –ÆKassa API –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ${paymentId} (${response.status}):`, responseText);

    if (!response.ok) {
      let errorDetails = responseText;
      try {
        const errorJson = JSON.parse(responseText);
        errorDetails = errorJson.description || errorJson.error_description || errorJson.message || responseText;
      } catch (parseError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏');
      }
      
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', response.status, errorDetails);
      throw new Error(`–ÆKassa API error (${response.status}): ${errorDetails}`);
    }

    let payment;
    try {
      payment = JSON.parse(responseText);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ÆKassa:', parseError);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ÆKassa API');
    }
    
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ–ª—É—á–µ–Ω–∞:', payment.id);
    
    return payment;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ webhook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
export function verifyWebhookSignature(body, signature) {
  try {
    if (!signature) {
      console.log('‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å webhook –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞');
      return false;
    }
    
    const expectedSignature = crypto
      .createHmac('sha256', YUKASSA_CONFIG.secretKey)
      .update(body)
      .digest('hex');
    
    return crypto.timingSafeEqual(
      Buffer.from(signature, 'hex'),
      Buffer.from(expectedSignature, 'hex')
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
export async function cancelYukassaPayment(paymentId) {
  try {
    console.log('‚ùå –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞:', paymentId);
    
    if (!paymentId) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–ª–∞—Ç–µ–∂–∞');
    }
    
    const auth = Buffer.from(`${YUKASSA_CONFIG.shopId}:${YUKASSA_CONFIG.secretKey}`).toString('base64');
    
    const response = await fetch(`${YUKASSA_CONFIG.apiUrl}/payments/${paymentId}/cancel`, {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json',
        'Idempotence-Key': crypto.randomUUID()
      }
    });

    const responseText = await response.text();
    console.log(`üì° –û—Ç–≤–µ—Ç –ÆKassa API –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ ${paymentId} (${response.status}):`, responseText);

    if (!response.ok) {
      let errorDetails = responseText;
      try {
        const errorJson = JSON.parse(responseText);
        errorDetails = errorJson.description || errorJson.error_description || errorJson.message || responseText;
      } catch (parseError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏');
      }
      
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞:', response.status, errorDetails);
      throw new Error(`–ÆKassa API error (${response.status}): ${errorDetails}`);
    }

    let payment;
    try {
      payment = JSON.parse(responseText);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ÆKassa:', parseError);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ÆKassa API');
    }
    
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω:', payment.id);
    
    return payment;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞:', error.message);
    throw error;
  }
}