import TelegramBot from 'node-telegram-bot-api';

export class TelegramBotService {
  constructor(database, yookassaService, paymentScheduler, cryptoCloudService = null) {
    this.database = database;
    this.yookassaService = yookassaService;
    this.cryptoCloudService = cryptoCloudService;
    this.paymentScheduler = paymentScheduler;
    
    // ID –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    this.PRIVATE_CHANNEL_ID = process.env.PRIVATE_CHANNEL_ID;
    this.PRIVATE_CHANNEL_LINK = process.env.PRIVATE_CHANNEL_LINK;
    
    // –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∫–∞–Ω–∞–ª–∞
    this.CHANNEL_ADMINS = process.env.CHANNEL_ADMINS ? process.env.CHANNEL_ADMINS.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id)) : [];
    
    if (!this.PRIVATE_CHANNEL_ID || !this.PRIVATE_CHANNEL_LINK) {
      console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã');
      this.PRIVATE_CHANNEL_ID = null;
      this.PRIVATE_CHANNEL_LINK = null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    const botToken = process.env.BOT_TOKEN;
    if (!botToken) {
      throw new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã');
    }
    
    console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:', botToken.substring(0, 15) + '...');
    console.log('üîí –ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª ID:', this.PRIVATE_CHANNEL_ID);
    console.log('üëë –ê–¥–º–∏–Ω—ã –∫–∞–Ω–∞–ª–∞:', this.CHANNEL_ADMINS);
    console.log('üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:', this.PRIVATE_CHANNEL_LINK);
    
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ polling –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.bot = new TelegramBot(botToken, { 
      polling: false,
      webHook: false
    });
    this.isStarted = false;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ email
    this.awaitingEmail = new Map();
    
    // –•—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    this.lastBotMessages = new Map();
  }

  async start() {
    if (this.isStarted) {
      console.log('‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }
    
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞...');
      
      const me = await this.bot.getMe();
      console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', me.username, `(ID: ${me.id})`);
      
      if (this.PRIVATE_CHANNEL_ID) {
        await this.checkBotPermissions();
      }
      
      this.setupCommands();
      this.setupCallbacks();
      if (this.PRIVATE_CHANNEL_ID) {
        this.setupChannelManagement();
      }
      
      if (process.env.WEBHOOK_URL) {
        const webhookUrl = `${process.env.WEBHOOK_URL}/webhook/telegram`;
        console.log('üîó –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook:', webhookUrl);
        
        try {
          console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook...');
          await this.bot.deleteWebHook();
          
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          console.log('üì° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook...');
          const result = await this.bot.setWebHook(webhookUrl, {
            drop_pending_updates: true
          });
          
          if (result) {
            console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            
            const webhookInfo = await this.bot.getWebHookInfo();
            console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', {
              url: webhookInfo.url,
              has_custom_certificate: webhookInfo.has_custom_certificate,
              pending_update_count: webhookInfo.pending_update_count,
              last_error_date: webhookInfo.last_error_date,
              last_error_message: webhookInfo.last_error_message
            });
          } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook');
          }
        } catch (webhookError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:', webhookError);
          console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling...');
          
          await this.bot.startPolling({
            restart: true,
            polling: {
              interval: 1000,
              autoStart: true,
              params: {
                timeout: 10
              }
            }
          });
          console.log('‚úÖ Polling –∑–∞–ø—É—â–µ–Ω');
        }
      } else {
        console.log('‚ö†Ô∏è WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling');
        await this.bot.startPolling({
          restart: true,
          polling: {
            interval: 1000,
            autoStart: true,
            params: {
              timeout: 10
            }
          }
        });
        console.log('‚úÖ Polling –∑–∞–ø—É—â–µ–Ω');
      }
      
      this.isStarted = true;
      console.log('üéâ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞:', error);
      
      if (error.response) {
        console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.body);
      }
      
      throw error;
    }
  }

  async checkBotPermissions() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ...');
      
      const me = await this.bot.getMe();
      const chatMember = await this.bot.getChatMember(this.PRIVATE_CHANNEL_ID, me.id);
      
      console.log('ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ:', chatMember.status);
      console.log('üîë –ü—Ä–∞–≤–∞ –±–æ—Ç–∞:', {
        can_restrict_members: chatMember.can_restrict_members,
        can_invite_users: chatMember.can_invite_users,
        can_delete_messages: chatMember.can_delete_messages
      });
      
      if (chatMember.status !== 'administrator') {
        console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!');
      } else {
        console.log('‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ:', error);
    }
  }

  async stop() {
    if (!this.isStarted) return;
    
    try {
      console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞...');
      
      if (this.bot.isPolling()) {
        await this.bot.stopPolling();
        console.log('‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
      
      try {
        await this.bot.deleteWebHook();
        console.log('‚úÖ Webhook —É–¥–∞–ª–µ–Ω');
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)');
      }
      
      this.isStarted = false;
      console.log('‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error);
    }
  }

  setupCommands() {
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞...');
    
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
      const chatId = msg.chat.id;
      const startParam = match?.[1];
      console.log(`üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`, startParam ? `—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: ${startParam}` : '');
      
      try {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—á–∏—Å—Ç–∫–∞)
        await this.clearPreviousMessages(chatId);
        
        let existingUser = await this.database.getUserByTelegramId(chatId);
        
        let referralSource = existingUser?.referral_source || null;
        let referralLinkId = existingUser?.referral_link_id || null;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        if (startParam && startParam.startsWith('ref_') && (!existingUser || !existingUser.referral_source)) {
          console.log(`üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${startParam}`);
          
          await this.database.supabase.rpc('log_referral_action', {
            p_referral_code: startParam,
            p_telegram_id: chatId,
            p_action_type: 'click'
          });
          
          const { data: referralLink, error } = await this.database.supabase
            .from('referral_links')
            .select('*')
            .eq('code', startParam)
            .eq('is_active', true)
            .single();
          
          if (!error && referralLink) {
            referralSource = `–†–µ—Ñ. ${referralLink.referrer_name}`;
            referralLinkId = referralLink.id;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${referralLink.referrer_name}`);
            
            if (existingUser) {
              await this.database.supabase
                .from('users')
                .update({
                  referral_source: referralSource,
                  referral_link_id: referralLinkId
                })
                .eq('telegram_id', chatId);
            }
          }
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user;
        if (existingUser) {
          await this.database.supabase
            .from('users')
            .update({
              username: msg.from.username,
              first_name: msg.from.first_name,
              last_name: msg.from.last_name
            })
            .eq('telegram_id', chatId);
          
          user = await this.database.getUserByTelegramId(chatId);
          console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
        } else {
          user = await this.database.createUser(
            chatId,
            msg.from.username,
            msg.from.first_name,
            msg.from.last_name,
            referralSource,
            referralLinkId
          );
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId}`);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if (referralSource && referralLinkId && startParam && startParam.startsWith('ref_')) {
          await this.database.supabase.rpc('log_referral_action', {
            p_referral_code: startParam,
            p_telegram_id: chatId,
            p_action_type: 'register'
          });
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (user.status === 'active') {
          await this.sendActiveUserWelcome(chatId, user);
        } else {
          await this.sendInactiveUserWelcome(chatId, user);
        }
        
        console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
        await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /profile
    this.bot.onText(/\/profile/, async (msg) => {
      console.log(`üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /profile –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.chat.id}`);
      await this.clearPreviousMessages(msg.chat.id);
      await this.handleProfile(msg.chat.id);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ email)
    this.bot.on('message', async (msg) => {
      const chatId = msg.chat.id;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (msg.text && msg.text.startsWith('/')) {
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã email –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (this.awaitingEmail.has(chatId)) {
        await this.handleEmailInput(chatId, msg.text);
      }
    });
    
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  setupCallbacks() {
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback queries...');
    
    this.bot.on('callback_query', async (callbackQuery) => {
      const chatId = callbackQuery.message.chat.id;
      const data = callbackQuery.data;
      
      console.log(`üì® –ü–æ–ª—É—á–µ–Ω callback query: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);

      try {
        await this.bot.answerCallbackQuery(callbackQuery.id);

        switch (data) {
          case 'pay_access':
            await this.clearPreviousMessages(chatId);
            await this.handlePayAccess(chatId);
            break;
          case 'about_channel':
            await this.clearPreviousMessages(chatId);
            await this.handleAboutChannel(chatId);
            break;
          case 'pay_card_rf':
            await this.handlePayCardRF(chatId);
            break;
          case 'pay_crypto':
            await this.handlePayCrypto(chatId);
            break;
          case 'go_to_channel':
            await this.handleGoToChannel(chatId);
            break;
          case 'change_email':
            await this.handleChangeEmail(chatId);
            break;
          case 'cancel_subscription':
            await this.handleCancelSubscription(chatId);
            break;
          case 'profile':
            await this.clearPreviousMessages(chatId);
            await this.handleProfile(chatId);
            break;
          case 'back_to_start':
            await this.clearPreviousMessages(chatId);
            await this.handleBackToStart(chatId);
            break;
          default:
            console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query: ${data}`);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback query:', error);
      }
    });
    
    console.log('‚úÖ Callback queries –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  setupChannelManagement() {
    if (!this.PRIVATE_CHANNEL_ID) {
      console.log('‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–æ - –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞');
      return;
    }
    
    console.log('üîí –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–º –∫–∞–Ω–∞–ª–æ–º...');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    this.bot.on('chat_join_request', async (chatJoinRequest) => {
      const userId = chatJoinRequest.from.id;
      const chatId = chatJoinRequest.chat.id;
      const username = chatJoinRequest.from.username;
      const firstName = chatJoinRequest.from.first_name;
      const lastName = chatJoinRequest.from.last_name;
      
      console.log(`üîë –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (@${username}) –≤ —á–∞—Ç ${chatId}`);
      
      if (chatId.toString() !== this.PRIVATE_CHANNEL_ID.toString()) {
        console.log(`‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞: –ø–æ–ª—É—á–µ–Ω ${chatId}, –æ–∂–∏–¥–∞–µ—Ç—Å—è ${this.PRIVATE_CHANNEL_ID}`);
        return;
      }

      try {
        await this.database.createChannelRequest(userId, username, firstName, lastName);
        console.log(`üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        const user = await this.database.getUserByTelegramId(userId);
        
        if (!user) {
          console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
          
          try {
            await this.bot.declineChatJoinRequest(chatId, userId);
            console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç ${userId} –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
            
            const request = await this.database.getChannelRequestByUserId(userId);
            if (request) {
              await this.database.updateChannelRequestStatus(request.id, 'declined', 'auto_system');
            }
          } catch (declineError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç ${userId}:`, declineError);
          }
          
          try {
            const botInfo = await this.bot.getMe();
            await this.bot.sendMessage(userId, `
‚ùå *–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω*

–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É:

1Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start
2Ô∏è‚É£ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É
3Ô∏è‚É£ –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É

ü§ñ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º: @FirstPunchBot
            `, { parse_mode: 'Markdown' });
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`);
          } catch (dmError) {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, dmError.message);
          }
          return;
        }

        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞–π–¥–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${user.status}`);

        if (user.status === 'active') {
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –æ–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å`);
          
          try {
            await this.bot.approveChatJoinRequest(chatId, userId);
            console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç ${userId} –æ–¥–æ–±—Ä–µ–Ω`);
            
            const request = await this.database.getChannelRequestByUserId(userId);
            if (request) {
              await this.database.updateChannelRequestStatus(request.id, 'approved', 'auto_system');
            }
            
            await this.database.logSubscriptionAction(
              user.id,
              'channel_access_granted',
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É`
            );

            try {
              await this.bot.sendMessage(userId, `
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± –ü–µ—Ä–≤—ã–π –ü–∞–Ω—á!*

‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω
üîí –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
üíé –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º-–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏!

‚ö†Ô∏è *–ü–æ–º–Ω–∏—Ç–µ:* –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
              `, { parse_mode: 'Markdown' });
              console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
            } catch (dmError) {
              console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, dmError.message);
            }
          } catch (approveError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç ${userId}:`, approveError);
          }
          
        } else {
          console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (—Å—Ç–∞—Ç—É—Å: ${user.status}), –æ—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å`);
          
          try {
            await this.bot.declineChatJoinRequest(chatId, userId);
            console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç ${userId} –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
            
            const request = await this.database.getChannelRequestByUserId(userId);
            if (request) {
              await this.database.updateChannelRequestStatus(request.id, 'declined', 'auto_system');
            }
            
            await this.database.logSubscriptionAction(
              user.id,
              'channel_access_denied',
              `–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (—Å—Ç–∞—Ç—É—Å: ${user.status})`
            );

            try {
              await this.bot.sendMessage(userId, `
‚ùå *–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω*

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.

–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: *${user.status === 'inactive' ? '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω' : user.status}*

üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: /start
üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: /profile

–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.
              `, { parse_mode: 'Markdown' });
              console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
            } catch (dmError) {
              console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, dmError.message);
            }
          } catch (declineError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç ${userId}:`, declineError);
          }
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç ${userId}:`, error);
        
        try {
          await this.bot.declineChatJoinRequest(chatId, userId);
          console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç ${userId} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏`);
        } catch (declineError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:`, declineError);
        }
      }
    });

    console.log('‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
  }

  // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async clearPreviousMessages(chatId) {
    try {
      // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      const lastMessageId = this.lastBotMessages.get(chatId);
      if (lastMessageId) {
        try {
          await this.bot.deleteMessage(chatId, lastMessageId);
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${lastMessageId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
        } catch (error) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${lastMessageId}:`, error.message);
        }
        this.lastBotMessages.delete(chatId);
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${chatId}:`, error.message);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  async sendMessageWithTracking(chatId, text, options = {}) {
    try {
      const sentMessage = await this.bot.sendMessage(chatId, text, options);
      this.lastBotMessages.set(chatId, sentMessage.message_id);
      return sentMessage;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}:`, error);
      throw error;
    }
  }
  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async sendActiveUserWelcome(chatId, user) {
    let timeLeft = '';
    
    if (user.subscription_end) {
      const endDate = new Date(user.subscription_end);
      const now = new Date();
      const timeDiff = endDate - now;
      
      if (timeDiff > 0) {
        const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
        
        if (days > 0) {
          timeLeft = `‚è∞ *–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:* ${days}–¥ ${hours}—á ${minutes}–º`;
        } else if (hours > 0) {
          timeLeft = `‚è∞ *–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:* ${hours}—á ${minutes}–º`;
        } else {
          timeLeft = `‚è∞ *–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:* ${minutes}–º`;
        }
      } else {
        timeLeft = '‚ö†Ô∏è *–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞*';
      }
    } else {
      timeLeft = '‚ôæÔ∏è *–ü–æ–¥–ø–∏—Å–∫–∞:* –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è';
    }

    const welcomeMessage = `üî• *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–µ—Ä–≤—ã–π –ü–∞–Ω—á!*

‚úÖ *–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–µ–Ω
${timeLeft}

üéØ –¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ! –í—Ä–µ–º—è –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–≤–æ–π —é–º–æ—Ä –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —à—É—Ç–∫–∞—Ö.

üíé *–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –æ—Ç –ø—Ä–æ—Ñ–∏
‚Ä¢ –ö–æ–Ω–∫—É—Ä—Å—ã —Å –ø—Ä–∏–∑–∞–º–∏ –¥–æ 100 000‚ÇΩ
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –ö–æ–º—å—é–Ω–∏—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

üöÄ *–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –ø–æ–±–µ–¥–∞–º?*`;

    const keyboard = [
      [{ text: 'üîí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', callback_data: 'go_to_channel' }],
      [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
      [{ text: '‚ùì FAQ', url: 'https://thereservationsystem.com/faq' }],
      [{ text: 'üÜò –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', url: 'https://t.me/johnyestet' }]
    ];

    await this.sendMessageWithTracking(chatId, welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  }

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async sendInactiveUserWelcome(chatId, user) {
    const welcomeMessage = `üé≠ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–ø–∞—Å—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± ¬´**–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á**¬ª ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –Ω–∞ –≥–æ–ª–æ–≤—É –≤—ã—à–µ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö, –∑–∞ —Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞ - —Å–≤–æ–µ–≥–æ —á—É–≤—Å—Ç–≤–∞ —é–º–æ—Ä–∞ 

–ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç:

üí• **–†–µ–∞–ª—å–Ω–æ –Ω–∞—É—á–∏—Ç—å—Å—è —à—É—Ç–∏—Ç—å!** –ù–µ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—à–∞—Ç—å —Ç–µ–æ—Ä–∏—é, –∞ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—É—á–∏—Ç –º–æ–∑–≥ –≤—ã–¥–∞–≤–∞—Ç—å —à—É—Ç–∫–∏ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–µ 
üí• **–í–ª—é–±–ª—è—Ç—å –≤ —Å–µ–±—è –ª—é–¥–µ–π** –Ω–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å—é –∏–ª–∏ –¥–µ–Ω—å–≥–∞–º–∏, –∞ –∑–∞ —Å—á–µ—Ç  –≤–∞–π–±–∞: ¬´–° –Ω–∏–º(–µ–π) —Ä–µ–∞–ª—å–Ω–æ –∫–ª–∞—Å—Å–Ω–æ!¬ª 
üí• **–ü–æ–ø–∞—Å—Ç—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ** —Ç–µ—Ö, —Å –∫–µ–º –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–≤–∞–µ—Ç —Å–∫—É—á–Ω–æ –∏ —Å–∞–º–æ–º—É —Å—Ç–∞—Ç—å —Ç–∞–∫–∏–º –∂–µ 
üí• **–∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å** –ø–æ —â–µ–ª—á–∫—É, –∑–∞ –æ–¥–Ω—É —à—É—Ç–∫—É –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç __100 000 —Ä—É–±–ª–µ–π__ 

üëá **–í—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –Ω–∏–∂–µ** üëá`;

    const keyboard = [
      [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø', callback_data: 'pay_access' }],
      [{ text: 'üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ', callback_data: 'about_channel' }],
      [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
      [{ text: '‚ùì FAQ', url: 'https://thereservationsystem.com/faq' }],
      [{ text: 'üÜò –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', url: 'https://t.me/johnyestet' }]
    ];

    await this.sendMessageWithTracking(chatId, welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤

  async handleProfile(chatId) {
    try {
      await this.clearPreviousMessages(chatId);
      console.log(`üìä –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
      
      const user = await this.database.getUserByTelegramId(chatId);
      
      if (!user) {
        await this.sendMessageWithTracking(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      let profileMessage = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n`;
      
      // Email
      profileMessage += `üìß *Email:* ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
      
      // –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      if (user.status === 'active') {
        if (user.subscription_end) {
          const endDate = new Date(user.subscription_end);
          const moscowTime = new Date(endDate.getTime() + 3 * 60 * 60 * 1000);
          const now = new Date();
          const timeLeft = endDate - now;
          
          if (timeLeft > 0) {
            const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
            const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            
            profileMessage += `‚úÖ *–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–Ω–∞\n`;
            profileMessage += `üìÖ *–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* ${moscowTime.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}\n`;
            
            if (days > 0) {
              profileMessage += `‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å:* ${days}–¥ ${hours}—á ${minutes}–º\n\n`;
            } else if (hours > 0) {
              profileMessage += `‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å:* ${hours}—á ${minutes}–º\n\n`;
            } else {
              profileMessage += `‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å:* ${minutes}–º\n\n`;
            }
          } else {
            profileMessage += `‚ùå *–°—Ç–∞—Ç—É—Å:* –ò—Å—Ç–µ–∫–ª–∞\n\n`;
          }
        } else {
          profileMessage += `‚úÖ *–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–Ω–∞ (–±–µ—Å—Å—Ä–æ—á–Ω–æ)\n\n`;
        }
      } else {
        profileMessage += `‚ùå *–°—Ç–∞—Ç—É—Å:* –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n\n`;
      }
      
      // –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
      profileMessage += `üîÑ *–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂:* ${user.auto_payment_enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n\n`;
      
      // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      if (user.referral_source) {
        profileMessage += `üîó *–ò—Å—Ç–æ—á–Ω–∏–∫:* ${user.referral_source}\n\n`;
      }

      const keyboard = [];
      
      if (user.status === 'active' && this.PRIVATE_CHANNEL_LINK) {
        keyboard.push([{ text: 'üîí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', callback_data: 'go_to_channel' }]);
      }
      
      keyboard.push([{ text: 'üìß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É', callback_data: 'change_email' }]);
      
      if (user.auto_payment_enabled) {
        keyboard.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'cancel_subscription' }]);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_start' }]);

      await this.sendMessageWithTracking(chatId, profileMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      await this.sendMessageWithTracking(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
  }

  async handleAboutChannel(chatId) {
    await this.clearPreviousMessages(chatId);
    const aboutMessage = `–¢—ã –≤—Å—ë –µ—â—ë –¥—É–º–∞–µ—à—å, —á—Ç–æ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞ ‚Äî —ç—Ç–æ –¥–∞—Ä?
–ß—Ç–æ –∫—Ç–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ ¬´—Ä–æ–¥–∏–ª—Å—è —Ç–∞–∫–∏–º¬ª, –∞ —Ç–µ–±–µ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–º–∞–ª—á–∏–≤–∞—Ç—å—Å—è –∏ –±—ã—Ç—å –≤ —Å—Ç–æ—Ä–æ–Ω–∫–µ?

**–ù–µ—Ç.**

–Æ–º–æ—Ä ‚Äî —ç—Ç–æ –Ω–µ –≥–µ–Ω–µ—Ç–∏–∫–∞.
–≠—Ç–æ –Ω–∞–≤—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å 
¬´**–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á**¬ª ‚Äî –ø–µ—Ä–≤—ã–π –≤ –†–æ—Å—Å–∏–∏ —Ç—Ä–µ–Ω–∞–∂—ë—Ä —á—É–≤—Å—Ç–≤–∞ —é–º–æ—Ä–∞.

–ú—ã —Å–¥–µ–ª–∞–µ–º —Ç–µ–±—è —Ç–µ–º, –∫—Ç–æ:

‚úÖ –®—É—Ç–∏—Ç —Å—Ä–∞–∑—É, –∞ –Ω–µ –¥–æ–¥—É–º—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ —á–∞—Å, –∫–∞–∫ –Ω–∞–¥–æ –±—ã–ª–æ –ø–æ—à—É—Ç–∏—Ç—å
‚úÖ –ö–ª–∞—Å—Å–Ω–æ –∏ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏—è—Ö
‚úÖ –£–º–µ–µ—Ç —Ä–∞–∑—Ä—è–¥–∏—Ç—å –ª—é–±—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É
‚úÖ –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥—É—à–æ–π –ª—é–±–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–µ –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç

**–í–Ω—É—Ç—Ä–∏:**
üéØ **–ù–ò–ö–ê–ö–û–ô –°–ö–£–ß–ù–û–ô –¢–ï–û–†–ò–ò, –¢–û–õ–¨–ö–û –ü–†–ê–ö–¢–ò–ö–ê**
ü•ä –†–∞–∑–±–æ—Ä—ã —à—É—Ç–æ–∫ –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ
üß† –Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–∞–∂—ë—Ä—ã: –≤—ã—É—á–∏—à—å —Å–∞–º—ã–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –ø—Ä–∏–µ–º—ã —é–º–æ—Ä–∞, –º–æ–∑–≥ –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ–µ
üí¨ –ö–ª—É–±, –≥–¥–µ –Ω–µ –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ. –¢—É—Ç —Å–≤–æ–∏: –≤—Å–µ –ª–µ–≥–∫–∏–µ, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ, –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ

**–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–æ –¥–µ–Ω—å–≥–∏. –ò –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ —Ç–≤–æ–∏**
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —É –Ω–∞—Å –∫–æ–Ω–∫—É—Ä—Å: –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ - –ª—É—á—à–∞—è —à—É—Ç–∫–∞ –¥–Ω—è –ø–æ–ª—É—á–∞–µ—Ç __1000—Ä__ 
–ê –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä —Å—Ä–µ–¥–∏ 30 –ª—É—á—à–∏—Ö —à—É—Ç–æ–∫. –ü—Ä–∏–∑: –æ—Ç __100 000 ‚ÇΩ__. –ó–∞ –æ–¥–Ω—É —à—É—Ç–∫—É. 
–≠—Ç–æ –±—É–¥—É—Ç —Å–∞–º—ã–µ –ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.

–ê –∑–Ω–∞–µ—à—å —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –º–µ—Å—è—Ü –≤ –∫–ª—É–±–µ? **1000 —Ä.** –ù–µ—Ç, —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å —Ä–∞—Å—Å—Ä–æ—á–∫–∏. –≠—Ç–æ –≤—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å

–¢—ã –º–æ–∂–µ—à—å –æ—Ç–±–∏—Ç—å –º–µ—Å—è—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª—É–±–∞ –≤ –ø–µ—Ä–≤—ã–π –∂–µ –¥–µ–Ω—å, –≤—Å–µ–≥–æ –ª–∏—à—å –æ–¥–Ω–æ–π —à—É—Ç–∫–æ–π

–ù–æ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –≤—Å–µ –≤–æ–∫—Ä—É–≥ –¥—É–º–∞—é—Ç, —á—Ç–æ —à—É—Ç–∏—Ç—å —ç—Ç–æ –¥–∞—Ä. –ü—É—Å—Ç—å –¥—É–º–∞—é—Ç. –¢–µ–±–µ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É–∫—É. –≠—Ç–æ –∂–µ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –±—ã—Ç—å –ª—É—á—à–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö, –Ω–æ –Ω–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å –∫–∞–∫ —ç—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—åüòà

**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**`;

    await this.sendMessageWithTracking(chatId, aboutMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø', callback_data: 'pay_access' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_start' }]
        ]
      }
    });
  }

  async handlePayAccess(chatId) {
    await this.clearPreviousMessages(chatId);
    const payMessage = `üöÄ *–ì–æ—Ç–æ–≤ –≤–æ–π—Ç–∏ –≤ —ç–ª–∏—Ç—É —é–º–æ—Ä–∞?*

üéØ *–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á –∂–¥–µ—Ç —Ç–µ–±—è!*

üíé *–ó–∞ 1000‚ÇΩ/–º–µ—Å—è—Ü –ø–æ–ª—É—á–∞–µ—à—å:*
‚ú® –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –æ—Ç –ø—Ä–æ—Ñ–∏
üé§ –ü—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã —Å–æ –°—Ç–∞—Å–æ–º –ï—Ä–Ω–∏–∫–æ–º  
üèÜ –®–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å 100 000‚ÇΩ –∑–∞ —à—É—Ç–∫—É
üí™ –¢—Ä–µ–Ω–∞–∂–µ—Ä—ã –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ —é–º–æ—Ä–∞
üë• –ö—Ä—É—Ç–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏

üî• *–í—Ä–µ–º—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª–µ–≥–µ–Ω–¥–æ–π!*

*–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*`;

    await this.sendMessageWithTracking(chatId, payMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π/–°–ë–ü', callback_data: 'pay_card_rf' }],
          [{ text: '‚Çø –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π', callback_data: 'pay_crypto' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_start' }]
        ]
      }
    });
  }

  async handlePayCardRF(chatId) {
    try {
      await this.clearPreviousMessages(chatId);
      const user = await this.database.getUserByTelegramId(chatId);
      
      if (user && user.email) {
        // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å email, —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å—Ä–∞–∑—É
        await this.createYookassaPayment(chatId, user.email);
      } else {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
        this.awaitingEmail.set(chatId, 'payment');
        
        await this.sendMessageWithTracking(chatId, `üìß *–î–ª—è –æ–ø–ª–∞—Ç—ã —É–∫–∞–∂–∏—Ç–µ email*

–û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.

*–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:*`, { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'pay_access' }]
            ]
          }
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π:', error);
      await this.sendMessageWithTracking(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞
  async checkAndManageChannelMember(channelId, userId) {
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${userId} –≤ –∫–∞–Ω–∞–ª–µ ${channelId}`);
      
      const user = await this.database.getUserByTelegramId(userId);
      
      if (!user) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const isActive = user.status === 'active';
      let subscriptionValid = true;
      
      if (user.subscription_end) {
        const now = new Date();
        const subscriptionEnd = new Date(user.subscription_end);
        subscriptionValid = now <= subscriptionEnd;
      }

      const shouldHaveAccess = isActive && subscriptionValid;
      
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: —Å—Ç–∞—Ç—É—Å=${user.status}, –ø–æ–¥–ø–∏—Å–∫–∞_–¥–æ=${user.subscription_end}, –¥–æ—Å—Ç—É–ø=${shouldHaveAccess}`);

      if (!shouldHaveAccess) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞
          const chatMember = await this.bot.getChatMember(channelId, userId);
          
          if (chatMember.status === 'member' || chatMember.status === 'restricted') {
            console.log(`üö´ –ö–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏–∑ –∫–∞–Ω–∞–ª–∞ (—Å—Ç–∞—Ç—É—Å: ${chatMember.status})`);
            
            await this.bot.banChatMember(channelId, userId);
            await this.bot.unbanChatMember(channelId, userId);
            
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∫–∏–∫–Ω—É—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞`);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await this.database.logSubscriptionAction(
              user.id,
              'channel_kicked_auto',
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∏–∫–Ω—É—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞`
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
              await this.bot.sendMessage(userId, `
üö´ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –æ—Ç–æ–∑–≤–∞–Ω

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.

–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:
üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: /start
üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: /profile
              `);
            } catch (dmError) {
              console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, dmError.message);
            }
          } else {
            console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞ (—Å—Ç–∞—Ç—É—Å: ${chatMember.status})`);
          }
        } catch (memberError) {
          if (memberError.response && memberError.response.body && memberError.response.body.error_code === 400) {
            console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ —É–∂–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫`);
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${userId}:`, memberError);
          }
        }
      } else {
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –¥–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º ${userId}:`, error);
    }
  }
  async handlePayCrypto(chatId) {
    try {
      await this.clearPreviousMessages(chatId);
      if (!this.cryptoCloudService) {
        await this.sendMessageWithTracking(chatId, '‚ùå –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
        return;
      }
      
      const user = await this.database.getUserByTelegramId(chatId);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
      let paymentAmount = 10; // –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë —Å—É–º–º—É
      if (user && user.referral_link_id) {
        try {
          const { data: referralLink, error } = await this.database.supabase
            .from('referral_links')
            .select('subscription_amount')
            .eq('id', user.referral_link_id)
            .single();
          
          if (!error && referralLink) {
            paymentAmount = referralLink.subscription_amount;
            console.log(`‚Çø –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ: ${paymentAmount} —Ä—É–±`);
          }
        } catch (referralError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ:', referralError);
        }
      }
      
      const invoice = await this.cryptoCloudService.createInvoice(
        paymentAmount,
        '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ü–µ—Ä–≤—ã–π –ü–∞–Ω—á',
        `tg_${chatId}_${Date.now()}`,
        'RUB'
      );

      await this.database.createPayment(
        user.id,
        invoice.id,
        paymentAmount,
        'pending'
      );

      await this.sendMessageWithTracking(chatId, `‚Çø *–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π*

üí∞ *–°—É–º–º–∞:* ${paymentAmount}‚ÇΩ
üîó *–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:* CryptoCloud
üíé *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:* BTC, ETH, USDT, USDC, LTC, BCH, BNB, TRX, DOGE

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚Çø –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π', url: invoice.pay_url }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'pay_access' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error);
      await this.sendMessageWithTracking(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async handleEmailInput(chatId, email) {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        await this.sendMessageWithTracking(chatId, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', { parse_mode: 'Markdown' });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.database.supabase
        .from('users')
        .update({ email: email })
        .eq('telegram_id', chatId);

      const action = this.awaitingEmail.get(chatId);
      this.awaitingEmail.delete(chatId);

      if (action === 'payment') {
        await this.createYookassaPayment(chatId, email);
      } else if (action === 'change') {
        await this.sendMessageWithTracking(chatId, `‚úÖ *Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞:* ${email}`, { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_start' }]
            ]
          }
        });
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email:', error);
      await this.sendMessageWithTracking(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async createYookassaPayment(chatId, email) {
    try {
      const user = await this.database.getUserByTelegramId(chatId);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
      let paymentAmount = 10; // –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë —Å—É–º–º—É
      if (user && user.referral_link_id) {
        try {
          const { data: referralLink, error } = await this.database.supabase
            .from('referral_links')
            .select('subscription_amount')
            .eq('id', user.referral_link_id)
            .single();
          
          if (!error && referralLink) {
            paymentAmount = referralLink.subscription_amount;
            console.log(`üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: ${paymentAmount} —Ä—É–±`);
          }
        } catch (referralError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', referralError);
        }
      }
      
      console.log(`üí≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É: ${paymentAmount} —Ä—É–± –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
      
      // –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Æ–ö–∞—Å—Å—ã
      const payment = await this.yookassaService.createPayment(
        paymentAmount,
        '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ü–µ—Ä–≤—ã–π –ü–∞–Ω—á',
        null,
        true,
        email
      );

      await this.database.createPayment(
        user.id,
        payment.id,
        paymentAmount,
        payment.status
      );

      const confirmMessage = `üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏*

üí∞ *–°—É–º–º–∞:* ${paymentAmount}‚ÇΩ
üìß *–ß–µ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞:* ${email}
üè¶ *–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:* –Æ–ö–∞—Å—Å–∞
üí° *–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:* –°–ë–ü –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–≤—ã–±–æ—Ä –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–ª–∞—Ç—ã)

–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π.`;

      await this.sendMessageWithTracking(chatId, confirmMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: payment.confirmation.confirmation_url }],
            [{ text: 'üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞', url: 'https://thereservationsystem.com/' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'pay_access' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
      await this.sendMessageWithTracking(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async handleGoToChannel(chatId) {
    await this.clearPreviousMessages(chatId);
    if (!this.PRIVATE_CHANNEL_LINK) {
      await this.sendMessageWithTracking(chatId, '‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.');
      return;
    }

    await this.sendMessageWithTracking(chatId, `üîí *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–µ—Ä–≤—ã–π –ü–∞–Ω—á!*

üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞—á–∏–Ω–∞–π –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–≤–æ–π —é–º–æ—Ä:`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: this.PRIVATE_CHANNEL_LINK }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_start' }]
        ]
      }
    });
  }

  async handleChangeEmail(chatId) {
    await this.clearPreviousMessages(chatId);
    this.awaitingEmail.set(chatId, 'change');
    
    await this.sendMessageWithTracking(chatId, `üìß *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:*

–ù–æ–≤—ã–π email –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–æ–≤ –æ–± –æ–ø–ª–∞—Ç–µ.`, { 
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' }]
        ]
      }
    });
  }

  async handleCancelSubscription(chatId) {
    try {
      await this.clearPreviousMessages(chatId);
      const user = await this.database.getUserByTelegramId(chatId);
      
      if (!user.auto_payment_enabled) {
        await this.sendMessageWithTracking(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂.');
        return;
      }

      await this.database.setAutoPayment(chatId, false);
      await this.database.logSubscriptionAction(
        user.id,
        'auto_payment_cancelled',
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂'
      );

      await this.sendMessageWithTracking(chatId, `‚úÖ *–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω*

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.

‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –±—É–¥–µ—Ç –æ—Ç–æ–∑–≤–∞–Ω.

üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: /profile`, { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_start' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error);
      await this.sendMessageWithTracking(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞.');
    }
  }

  async handleBackToStart(chatId) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    try {
      await this.clearPreviousMessages(chatId);
      const user = await this.database.getUserByTelegramId(chatId);
      
      if (user.status === 'active') {
        await this.sendActiveUserWelcome(chatId, user);
      } else {
        await this.sendInactiveUserWelcome(chatId, user);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –Ω–∞—á–∞–ª—É:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
  async handlePaymentSuccess(paymentId) {
    try {
      console.log(`üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${paymentId}`);
      
      const payment = await this.database.getPaymentByPaymentId(paymentId);
      if (!payment) {
        console.error('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', paymentId);
        return;
      }

      await this.database.updatePaymentStatus(paymentId, 'succeeded', new Date().toISOString());
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–µ—Å—è—Ü
      const subscriptionEnd = new Date();
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userSettings = await this.database.getUserByTelegramId(payment.telegram_id);
      if (userSettings && userSettings.auto_payment_interval) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ PaymentScheduler –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        if (this.paymentScheduler) {
          const calculatedEnd = this.paymentScheduler.calculateSubscriptionEnd(
            userSettings.auto_payment_interval, 
            userSettings.custom_interval_minutes
          );
          subscriptionEnd.setTime(calculatedEnd.getTime());
        } else {
          // Fallback: –¥–æ–±–∞–≤–ª—è–µ–º 2 –º–∏–Ω—É—Ç—ã
          subscriptionEnd.setTime(subscriptionEnd.getTime() + 2 * 60 * 1000);
        }
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 2 –º–∏–Ω—É—Ç—ã
        subscriptionEnd.setTime(subscriptionEnd.getTime() + 2 * 60 * 1000);
      }
      
      await this.database.updateUserStatus(payment.telegram_id, 'active', subscriptionEnd.toISOString());
      await this.database.setAutoPayment(payment.telegram_id, true);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º payment method –¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –Æ–ö–∞—Å—Å—ã)
      try {
        const yookassaPayment = await this.yookassaService.getPayment(paymentId);
        if (yookassaPayment.payment_method && yookassaPayment.payment_method.id) {
          await this.database.updateUserPaymentMethod(payment.telegram_id, yookassaPayment.payment_method.id);
        }
      } catch (error) {
        console.log(`‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å payment method (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂): ${error.message}`);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
      const user = await this.database.getUserByTelegramId(payment.telegram_id);
      if (user && user.referral_link_id) {
        const { data: referralLink } = await this.database.supabase
          .from('referral_links')
          .select('code')
          .eq('id', user.referral_link_id)
          .single();
        
        if (referralLink) {
          await this.database.supabase.rpc('log_referral_action', {
            p_referral_code: referralLink.code,
            p_telegram_id: payment.telegram_id,
            p_action_type: 'payment',
            p_amount: payment.amount,
            p_details: `–ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ`
          });
        }
      }

      await this.database.logSubscriptionAction(
        payment.user_id,
        'payment_success',
        `–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –°—É–º–º–∞: ${payment.amount} —Ä—É–±`
      );

      const endDateMoscow = new Date(subscriptionEnd.getTime() + 3 * 60 * 60 * 1000);

      await this.bot.sendMessage(
        payment.telegram_id,
        `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–µ—Ä–≤—ã–π –ü–∞–Ω—á!*

‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
üí∞ –°—É–º–º–∞: ${payment.amount}‚ÇΩ
üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${endDateMoscow.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
üîÑ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –≤–∫–ª—é—á–µ–Ω

üî• *–¢–µ–ø–µ—Ä—å —Ç—ã –≤ —ç–ª–∏—Ç–µ —é–º–æ—Ä–∞!*

üîí –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –∏ –Ω–∞—á–∏–Ω–∞–π –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å—Å—è!`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: this.PRIVATE_CHANNEL_LINK ? [
              [{ text: 'üîí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: this.PRIVATE_CHANNEL_LINK }],
              [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }]
            ] : [
              [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }]
            ]
          }
        }
      );
      
      console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${payment.telegram_id}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
    }
  }

  async handleCryptoPaymentSuccess(invoiceId) {
    try {
      console.log(`‚Çø –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: ${invoiceId}`);
      await this.handlePaymentSuccess(invoiceId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error);
    }
  }

  // –ê—É–¥–∏—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
  async performChannelAudit() {
    if (!this.PRIVATE_CHANNEL_ID) {
      console.log('‚ö†Ô∏è –ê—É–¥–∏—Ç –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω - –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return;
    }

    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞—É–¥–∏—Ç –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞
      const administrators = await this.bot.getChatAdministrators(this.PRIVATE_CHANNEL_ID);
      const adminIds = administrators.map(admin => admin.user.id);
      
      console.log(`üëë –ù–∞–π–¥–µ–Ω–æ ${adminIds.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
      const chatMemberCount = await this.bot.getChatMemberCount(this.PRIVATE_CHANNEL_ID);
      console.log(`üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: ${chatMemberCount}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
      const activeUsers = await this.database.getAllUsers();
      const activeUserIds = activeUsers
        .filter(user => {
          const isActive = user.status === 'active';
          let subscriptionValid = true;
          
          if (user.subscription_end) {
            const now = new Date();
            const subscriptionEnd = new Date(user.subscription_end);
            subscriptionValid = now <= subscriptionEnd;
          }
          
          return isActive && subscriptionValid;
        })
        .map(user => user.telegram_id);
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${activeUserIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const allUsers = await this.database.getAllUsers();
      let checkedCount = 0;
      let kickedCount = 0;
      
      for (const user of allUsers) {
        try {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
          if (adminIds.includes(user.telegram_id)) {
            console.log(`üëë –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${user.telegram_id}`);
            continue;
          }
          
          const chatMember = await this.bot.getChatMember(this.PRIVATE_CHANNEL_ID, user.telegram_id);
          
          if (chatMember.status === 'member' || chatMember.status === 'restricted') {
            checkedCount++;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
            const isActive = user.status === 'active';
            let subscriptionValid = true;
            
            if (user.subscription_end) {
              const now = new Date();
              const subscriptionEnd = new Date(user.subscription_end);
              subscriptionValid = now <= subscriptionEnd;
            }
            
            const shouldHaveAccess = isActive && subscriptionValid;
            
            if (!shouldHaveAccess) {
              console.log(`üö´ –ö–∏–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id} (—Å—Ç–∞—Ç—É—Å: ${user.status})`);
              
              await this.bot.banChatMember(this.PRIVATE_CHANNEL_ID, user.telegram_id);
              await this.bot.unbanChatMember(this.PRIVATE_CHANNEL_ID, user.telegram_id);
              
              kickedCount++;
              
              // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
              await this.database.logSubscriptionAction(
                user.id,
                'channel_audit_kick',
                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç –ø—Ä–∏ –∞—É–¥–∏—Ç–µ –∫–∞–Ω–∞–ª–∞: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞`
              );
              
              // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∏–∫–∞–º–∏
              await new Promise(resolve => setTimeout(resolve, 100));
            }
          }
        } catch (memberError) {
          if (memberError.response && memberError.response.body && memberError.response.body.error_code === 400) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            continue;
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}:`, memberError.message);
          }
        }
      }
      
      console.log(`‚úÖ –ê—É–¥–∏—Ç –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ ${checkedCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–∏–∫–Ω—É—Ç–æ ${kickedCount}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ –∫–∞–Ω–∞–ª–∞:', error);
    }
  }

  // API –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º
  async approveChannelRequestAPI(requestId) {
    try {
      console.log(`‚úÖ API: –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ ${requestId}`);
      
      const request = await this.database.getChannelRequestById(requestId);
      if (!request) {
        throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      if (request.status !== 'pending') {
        throw new Error('–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      }

      if (this.PRIVATE_CHANNEL_ID) {
        await this.bot.approveChatJoinRequest(this.PRIVATE_CHANNEL_ID, request.user_id);
      }
      
      await this.database.updateChannelRequestStatus(requestId, 'approved', 'admin_panel');
      
      const user = await this.database.getUserByTelegramId(request.user_id);
      if (user) {
        await this.database.logSubscriptionAction(
          user.id,
          'channel_request_approved_manual',
          `–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å`
        );
      }

      console.log(`‚úÖ API: –ó–∞–ø—Ä–æ—Å ${requestId} —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω`);
      return true;
    } catch (error) {
      console.error(`‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ ${requestId}:`, error);
      throw error;
    }
  }

  async declineChannelRequestAPI(requestId) {
    try {
      console.log(`‚ùå API: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ ${requestId}`);
      
      const request = await this.database.getChannelRequestById(requestId);
      if (!request) {
        throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      if (request.status !== 'pending') {
        throw new Error('–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      }

      if (this.PRIVATE_CHANNEL_ID) {
        await this.bot.declineChatJoinRequest(this.PRIVATE_CHANNEL_ID, request.user_id);
      }
      
      await this.database.updateChannelRequestStatus(requestId, 'declined', 'admin_panel');
      
      const user = await this.database.getUserByTelegramId(request.user_id);
      if (user) {
        await this.database.logSubscriptionAction(
          user.id,
          'channel_request_declined_manual',
          `–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å`
        );
      }

      console.log(`‚úÖ API: –ó–∞–ø—Ä–æ—Å ${requestId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
      return true;
    } catch (error) {
      console.error(`‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ ${requestId}:`, error);
      throw error;
    }
  }

  async processWebhook(req, res) {
    try {
      const update = req.body;
      console.log('üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram:', JSON.stringify(update, null, 2));
      
      await this.bot.processUpdate(update);
      res.status(200).send('OK');
      
      console.log('‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:', error);
      res.status(500).send('Error');
    }
  }
}