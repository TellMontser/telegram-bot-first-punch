import TelegramBot from 'node-telegram-bot-api';

export class TelegramBotService {
  constructor(database, yookassaService, paymentScheduler) {
    this.database = database;
    this.yookassaService = yookassaService;
    this.paymentScheduler = paymentScheduler;
    this.bot = new TelegramBot(process.env.BOT_TOKEN, { polling: false });
    this.isStarted = false;
  }

  async start() {
    if (this.isStarted) return;
    
    this.setupCommands();
    this.setupCallbacks();
    
    if (process.env.WEBHOOK_URL) {
      await this.bot.setWebHook(`${process.env.WEBHOOK_URL}/webhook/telegram`);
      console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } else {
      await this.bot.startPolling();
      console.log('Polling –∑–∞–ø—É—â–µ–Ω');
    }
    
    this.isStarted = true;
    console.log('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  }

  async stop() {
    if (!this.isStarted) return;
    
    await this.bot.stopPolling();
    this.isStarted = false;
    console.log('Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  setupCommands() {
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const user = await this.database.createUser(
        chatId,
        msg.from.username,
        msg.from.first_name,
        msg.from.last_name
      );

      const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!

üë§ –í–∞—à —Å—Ç–∞—Ç—É—Å: ${user.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/subscribe - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
/help - –ü–æ–º–æ—â—å
      `;

      await this.bot.sendMessage(chatId, welcomeMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'subscribe' }],
            [{ text: 'üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å', callback_data: 'status' }]
          ]
        }
      });
    });

    this.bot.onText(/\/subscribe/, async (msg) => {
      await this.handleSubscribe(msg.chat.id);
    });

    this.bot.onText(/\/status/, async (msg) => {
      await this.handleStatus(msg.chat.id);
    });

    this.bot.onText(/\/cancel/, async (msg) => {
      await this.handleCancelAutoPayment(msg.chat.id);
    });

    this.bot.onText(/\/help/, async (msg) => {
      const helpMessage = `
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/subscribe - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 10 —Ä—É–±
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ - 10 —Ä—É–±
2. –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è 10 —Ä—É–±
3. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
      `;

      await this.bot.sendMessage(msg.chat.id, helpMessage);
    });
  }

  setupCallbacks() {
    this.bot.on('callback_query', async (callbackQuery) => {
      const chatId = callbackQuery.message.chat.id;
      const data = callbackQuery.data;

      await this.bot.answerCallbackQuery(callbackQuery.id);

      switch (data) {
        case 'subscribe':
          await this.handleSubscribe(chatId);
          break;
        case 'status':
          await this.handleStatus(chatId);
          break;
        case 'cancel_auto':
          await this.handleCancelAutoPayment(chatId);
          break;
      }
    });
  }

  async handleSubscribe(chatId) {
    try {
      const user = await this.database.getUserByTelegramId(chatId);
      
      if (user.status === 'active' && user.auto_payment_enabled) {
        await this.bot.sendMessage(chatId, '‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º!');
        return;
      }

      const payment = await this.yookassaService.createPayment(
        10.00,
        '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å - –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂',
        `${process.env.WEBHOOK_URL}/webhook/payment-success`,
        true
      );

      await this.database.createPayment(
        user.id,
        payment.id,
        10.00,
        payment.status
      );

      await this.bot.sendMessage(chatId, 
        `üí≥ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n${payment.confirmation.confirmation_url}\n\nüí∞ –°—É–º–º–∞: 10 —Ä—É–±\n‚è∞ –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã –±—É–¥–µ—Ç —Å–ø–∏—Å—ã–≤–∞—Ç—å—Å—è 10 —Ä—É–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: payment.confirmation.confirmation_url }]
            ]
          }
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async handleStatus(chatId) {
    try {
      const user = await this.database.getUserByTelegramId(chatId);
      
      let statusMessage = `üìä –í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:\n\n`;
      statusMessage += `üë§ –°—Ç–∞—Ç—É—Å: ${user.status === 'active' ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n`;
      statusMessage += `üîÑ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂: ${user.auto_payment_enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n`;
      
      if (user.subscription_end) {
        statusMessage += `‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(user.subscription_end).toLocaleString('ru')}\n`;
      }

      const keyboard = [];
      
      if (user.status !== 'active') {
        keyboard.push([{ text: 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'subscribe' }]);
      }
      
      if (user.auto_payment_enabled) {
        keyboard.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂', callback_data: 'cancel_auto' }]);
      }

      await this.bot.sendMessage(chatId, statusMessage, {
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
    }
  }

  async handleCancelAutoPayment(chatId) {
    try {
      const user = await this.database.getUserByTelegramId(chatId);
      
      if (!user.auto_payment_enabled) {
        await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂.');
        return;
      }

      await this.database.setAutoPayment(chatId, false);
      await this.database.logSubscriptionAction(
        user.id,
        'auto_payment_cancelled',
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂'
      );

      await this.bot.sendMessage(chatId, '‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞.');
    }
  }

  async handlePaymentSuccess(paymentId) {
    try {
      const payment = await this.database.getPaymentByPaymentId(paymentId);
      if (!payment) {
        console.error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', paymentId);
        return;
      }

      await this.database.updatePaymentStatus(paymentId, 'succeeded', new Date().toISOString());
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const subscriptionEnd = new Date();
      subscriptionEnd.setMinutes(subscriptionEnd.getMinutes() + 3);
      
      await this.database.updateUserStatus(payment.telegram_id, 'active', subscriptionEnd.toISOString());
      await this.database.setAutoPayment(payment.telegram_id, true);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º payment method –¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
      const yookassaPayment = await this.yookassaService.getPayment(paymentId);
      if (yookassaPayment.payment_method && yookassaPayment.payment_method.id) {
        await this.database.updateUserPaymentMethod(payment.telegram_id, yookassaPayment.payment_method.id);
      }

      await this.database.logSubscriptionAction(
        payment.user_id,
        'payment_success',
        `–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –°—É–º–º–∞: ${payment.amount} —Ä—É–±`
      );

      await this.bot.sendMessage(
        payment.telegram_id,
        `‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\nüí∞ –°—É–º–º–∞: ${payment.amount} —Ä—É–±\nüîÑ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã`
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
    }
  }

  async processWebhook(req, res) {
    try {
      const update = req.body;
      await this.bot.processUpdate(update);
      res.status(200).send('OK');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:', error);
      res.status(500).send('Error');
    }
  }
}