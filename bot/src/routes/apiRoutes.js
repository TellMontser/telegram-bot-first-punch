import express from 'express';
import multer from 'multer';
import path from 'path';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
const upload = multer({ 
  storage,
  limits: {
    fileSize: 50 * 1024 * 1024, // 50MB
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|mp4|mov|avi|webm/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'));
    }
  }
});

export function apiRoutes(database, telegramBot) {
  const router = express.Router();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  router.get('/stats', async (req, res) => {
    try {
      console.log('üìä API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      const stats = await database.getStats();
      console.log('‚úÖ API: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', stats);
      res.json(stats);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  router.get('/users', async (req, res) => {
    try {
      console.log('üë• API: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      const users = await database.getAllUsers();
      console.log('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', users.length);
      res.json(users);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
  router.get('/payments', async (req, res) => {
    try {
      console.log('üí≥ API: –ó–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–µ–∂–µ–π');
      const payments = await database.getAllPayments();
      console.log('‚úÖ API: –ü–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—É—á–µ–Ω—ã:', payments.length);
      res.json(payments);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
  router.get('/crypto-payments', async (req, res) => {
    try {
      console.log('‚Çø API: –ó–∞–ø—Ä–æ—Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π');
      const cryptoPayments = await database.getAllCryptoPayments();
      console.log('‚úÖ API: –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—É—á–µ–Ω—ã:', cryptoPayments.length);
      res.json(cryptoPayments);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
  router.get('/crypto-stats', async (req, res) => {
    try {
      console.log('üìä API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π');
      const cryptoStats = await database.getCryptoStats();
      console.log('‚úÖ API: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—É—á–µ–Ω–∞:', cryptoStats);
      res.json(cryptoStats);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
  router.get('/logs', async (req, res) => {
    try {
      console.log('üìã API: –ó–∞–ø—Ä–æ—Å –ª–æ–≥–æ–≤');
      const logs = await database.getSubscriptionLogs();
      console.log('‚úÖ API: –õ–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã:', logs.length);
      res.json(logs);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  router.get('/users/:id', async (req, res) => {
    try {
      const telegramId = parseInt(req.params.id);
      console.log(`üë§ API: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
      
      const user = await database.getUserByTelegramId(telegramId);
      if (!user) {
        console.log(`‚ùå API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      console.log(`‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–∞–π–¥–µ–Ω`);
      res.json(user);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  router.put('/users/:id/status', async (req, res) => {
    try {
      const { status, subscriptionEnd } = req.body;
      const telegramId = parseInt(req.params.id);
      
      console.log(`üìù API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}: ${status}`);
      
      await database.updateUserStatus(telegramId, status, subscriptionEnd);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const user = await database.getUserByTelegramId(telegramId);
      if (user) {
        await database.logSubscriptionAction(
          user.id,
          'admin_status_update',
          `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞: ${status}`
        );
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (telegramBot && telegramBot.bot) {
        try {
          const message = status === 'active' 
            ? '‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!'
            : '‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.';
          
          await telegramBot.bot.sendMessage(telegramId, message);
          console.log(`üì§ API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
        } catch (botError) {
          console.warn(`‚ö†Ô∏è API: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, botError);
        }
      }
      
      console.log(`‚úÖ API: –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
      res.json({ success: true, message: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω' });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º
  router.put('/users/:id/auto-payment', async (req, res) => {
    try {
      const { enabled } = req.body;
      const telegramId = parseInt(req.params.id);
      
      console.log(`üîÑ API: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}: ${enabled}`);
      
      await database.setAutoPayment(telegramId, enabled);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const user = await database.getUserByTelegramId(telegramId);
      if (user) {
        await database.logSubscriptionAction(
          user.id,
          'admin_autopay_update',
          `–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`
        );
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (telegramBot && telegramBot.bot) {
        try {
          const message = enabled 
            ? 'üîÑ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –≤–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
            : '‚èπÔ∏è –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.';
          
          await telegramBot.bot.sendMessage(telegramId, message);
          console.log(`üì§ API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
        } catch (botError) {
          console.warn(`‚ö†Ô∏è API: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, botError);
        }
      }
      
      console.log(`‚úÖ API: –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
      res.json({ success: true, message: '–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ–±–Ω–æ–≤–ª–µ–Ω' });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ (—Å—É–º–º–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª)
  router.put('/users/:id/auto-payment-settings', async (req, res) => {
    try {
      const { amount, interval, customInterval, nextPaymentDate } = req.body;
      const telegramId = parseInt(req.params.id);
      
      console.log(`üí∞ API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`, {
        amount,
        interval,
        customInterval,
        nextPaymentDate
      });
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!amount || amount <= 0) {
        return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞' });
      }
      
      const validIntervals = ['3_minutes', 'hourly', 'daily', 'weekly', 'monthly', 'custom'];
      if (!validIntervals.includes(interval)) {
        return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª' });
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
      let customMinutes = null;
      if (interval === 'custom' && customInterval) {
        customMinutes = await database.parseCustomInterval(customInterval);
        if (!customMinutes) {
          return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: "30 minutes", "1.5 hours", "2 days"' });
        }
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
      let parsedNextPaymentDate = null;
      if (nextPaymentDate) {
        parsedNextPaymentDate = new Date(nextPaymentDate).toISOString();
        if (new Date(parsedNextPaymentDate) <= new Date()) {
          return res.status(400).json({ error: '–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º' });
        }
      }
      
      await database.updateAutoPaymentSettings(telegramId, amount, interval, customMinutes, parsedNextPaymentDate);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const user = await database.getUserByTelegramId(telegramId);
      if (user) {
        let details = `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –∏–∑–º–µ–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: ${amount} —Ä—É–±`;
        
        if (interval === 'custom' && customInterval) {
          details += `, –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${customInterval} (${customMinutes} –º–∏–Ω)`;
        } else {
          details += `, –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${interval}`;
        }
        
        if (nextPaymentDate) {
          details += `, —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ${new Date(nextPaymentDate).toLocaleString('ru-RU')}`;
        }
        
        await database.logSubscriptionAction(
          user.id,
          'admin_autopay_settings_update',
          details
        );
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (telegramBot && telegramBot.bot) {
        try {
          const intervalNames = {
            '3_minutes': '–∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã',
            'hourly': '–∫–∞–∂–¥—ã–π —á–∞—Å',
            'daily': '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
            'weekly': '–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é',
            'monthly': '–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü',
            'custom': customInterval || '–∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª'
          };
          
          let message = `üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:

üíµ –ù–æ–≤–∞—è —Å—É–º–º–∞: ${amount} —Ä—É–±
‚è∞ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: ${intervalNames[interval]}`;

          if (nextPaymentDate) {
            message += `\nüìÖ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ${new Date(nextPaymentDate).toLocaleString('ru-RU')}`;
          }

          message += '\n\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–ª–∞—Ç–µ–∂–µ.';
          
          await telegramBot.bot.sendMessage(telegramId, message);
          console.log(`üì§ API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
        } catch (botError) {
          console.warn(`‚ö†Ô∏è API: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, botError);
        }
      }
      
      console.log(`‚úÖ API: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
      res.json({ success: true, message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
  router.put('/users/:id/status-custom', async (req, res) => {
    try {
      const { status, duration, specificEndDate } = req.body;
      const telegramId = parseInt(req.params.id);
      
      console.log(`üìù API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:`, {
        status,
        duration,
        specificEndDate
      });
      
      let subscriptionEnd = null;
      
      if (specificEndDate) {
        subscriptionEnd = new Date(specificEndDate).toISOString();
        if (new Date(subscriptionEnd) <= new Date()) {
          return res.status(400).json({ error: '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º' });
        }
      }
      
      const finalSubscriptionEnd = await database.updateUserStatusWithCustomEnd(
        telegramId, 
        status, 
        subscriptionEnd, 
        duration
      );
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const user = await database.getUserByTelegramId(telegramId);
      if (user) {
        let details = `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞: ${status}`;
        
        if (finalSubscriptionEnd) {
          details += `, –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(finalSubscriptionEnd).toLocaleString('ru-RU')}`;
        }
        
        if (duration) {
          details += `, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}`;
        }
        
        await database.logSubscriptionAction(
          user.id,
          'admin_status_update_custom',
          details
        );
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (telegramBot && telegramBot.bot) {
        try {
          let message = status === 'active' 
            ? '‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!'
            : '‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.';
          
          if (finalSubscriptionEnd && status === 'active') {
            message += `\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(finalSubscriptionEnd).toLocaleString('ru-RU')}`;
          }
          
          await telegramBot.bot.sendMessage(telegramId, message);
          console.log(`üì§ API: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
        } catch (botError) {
          console.warn(`‚ö†Ô∏è API: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, botError);
        }
      }
      
      console.log(`‚úÖ API: –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏`);
      res.json({ 
        success: true, 
        message: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω',
        subscriptionEnd: finalSubscriptionEnd
      });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  router.post('/send-message', async (req, res) => {
    try {
      const { telegramId, message } = req.body;
      
      console.log(`üí¨ API: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}: ${message}`);
      
      if (!telegramBot || !telegramBot.bot) {
        console.error('‚ùå API: Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return res.status(503).json({ error: 'Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
      await telegramBot.bot.sendMessage(telegramId, message);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const user = await database.getUserByTelegramId(telegramId);
      if (user) {
        await database.logSubscriptionAction(
          user.id,
          'admin_message_sent',
          `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message}`
        );
      }
      
      console.log(`‚úÖ API: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
      res.json({ success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –º–µ–¥–∏–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
  router.post('/send-broadcast', upload.single('media_file'), async (req, res) => {
    try {
      const { telegramId, text, parse_mode, buttons, media_type } = req.body;
      const mediaFile = req.file;
      
      console.log(`üì¢ API: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
      
      if (!telegramBot || !telegramBot.bot) {
        console.error('‚ùå API: Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return res.status(503).json({ error: 'Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageOptions = {
        parse_mode: parse_mode !== 'None' ? parse_mode : undefined,
        reply_markup: undefined
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (buttons) {
        try {
          const parsedButtons = JSON.parse(buttons);
          if (parsedButtons.length > 0) {
            const inlineKeyboard = parsedButtons.map(row => 
              row.map(button => ({
                text: button.text,
                ...(button.url ? { url: button.url } : { callback_data: button.callback_data || button.text })
              }))
            );
            messageOptions.reply_markup = { inline_keyboard: inlineKeyboard };
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫:', error);
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ –∏–ª–∏ –±–µ–∑
      if (mediaFile && media_type) {
        const mediaBuffer = mediaFile.buffer;
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º fileOptions –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
        const fileOptions = {
          filename: mediaFile.originalname,
          contentType: mediaFile.mimetype
        };
        
        switch (media_type) {
          case 'photo':
            await telegramBot.bot.sendPhoto(telegramId, mediaBuffer, {
              caption: text,
              ...messageOptions
            }, fileOptions);
            break;
          case 'video':
            await telegramBot.bot.sendVideo(telegramId, mediaBuffer, {
              caption: text,
              ...messageOptions
            }, fileOptions);
            break;
          case 'video_note':
            await telegramBot.bot.sendVideoNote(telegramId, mediaBuffer, {}, fileOptions);
            if (text) {
              await telegramBot.bot.sendMessage(telegramId, text, messageOptions);
            }
            break;
          default:
            throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: ${media_type}`);
        }
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await telegramBot.bot.sendMessage(telegramId, text, messageOptions);
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const user = await database.getUserByTelegramId(telegramId);
      if (user) {
        await database.logSubscriptionAction(
          user.id,
          'admin_broadcast_sent',
          `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É: ${text.substring(0, 100)}${text.length > 100 ? '...' : ''}`
        );
      }
      
      console.log(`‚úÖ API: –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`);
      res.json({ success: true, message: '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // === API –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–ù–ê–õ–û–ú ===

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
  router.get('/channel/requests', async (req, res) => {
    try {
      console.log('üîí API: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª');
      
      const requests = await database.getChannelRequests();
      
      console.log('‚úÖ API: –ó–∞–ø—Ä–æ—Å—ã –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã:', requests.length);
      res.json(requests);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–Ω–∞–ª–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
  router.get('/channel/stats', async (req, res) => {
    try {
      console.log('üìä API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞');
      
      const stats = await database.getChannelStats();
      
      console.log('‚úÖ API: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞:', stats);
      res.json(stats);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
  router.post('/channel/requests/:id/approve', async (req, res) => {
    try {
      const requestId = req.params.id;
      console.log(`‚úÖ API: –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ ${requestId}`);
      
      if (!telegramBot) {
        return res.status(503).json({ error: 'Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
      }

      await telegramBot.approveChannelRequestAPI(requestId);
      
      console.log(`‚úÖ API: –ó–∞–ø—Ä–æ—Å ${requestId} –æ–¥–æ–±—Ä–µ–Ω`);
      res.json({ success: true, message: '–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω' });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
  router.post('/channel/requests/:id/decline', async (req, res) => {
    try {
      const requestId = req.params.id;
      console.log(`‚ùå API: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ ${requestId}`);
      
      if (!telegramBot) {
        return res.status(503).json({ error: 'Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
      }

      await telegramBot.declineChannelRequestAPI(requestId);
      
      console.log(`‚úÖ API: –ó–∞–ø—Ä–æ—Å ${requestId} –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
      res.json({ success: true, message: '–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω' });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
  router.post('/channel/kick-user', async (req, res) => {
    try {
      const { userId } = req.body;
      console.log(`üö´ API: –ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏–∑ –∫–∞–Ω–∞–ª–∞`);
      
      if (!telegramBot) {
        return res.status(503).json({ error: 'Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
      }

      // –ö–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
      await telegramBot.checkAndManageChannelMember(telegramBot.PRIVATE_CHANNEL_ID, userId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ "kicked" –µ—Å–ª–∏ –µ—Å—Ç—å
      const request = await database.getChannelRequestByUserId(userId);
      if (request) {
        await database.updateChannelRequestStatus(request.id, 'kicked', 'admin_panel');
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const user = await database.getUserByTelegramId(userId);
      if (user) {
        await database.logSubscriptionAction(
          user.id,
          'channel_kicked_manual',
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å'
        );
      }
      
      console.log(`‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∫–∏–∫–Ω—É—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞`);
      res.json({ success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞' });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
  router.post('/channel/requests/bulk-approve', async (req, res) => {
    try {
      const { requestIds } = req.body;
      console.log(`‚úÖ API: –ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ ${requestIds.length} –∑–∞–ø—Ä–æ—Å–æ–≤`);
      
      if (!telegramBot) {
        return res.status(503).json({ error: 'Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
      }

      let successCount = 0;
      let errorCount = 0;

      for (const requestId of requestIds) {
        try {
          await telegramBot.approveChannelRequestAPI(requestId);
          successCount++;
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ ${requestId}:`, error);
          errorCount++;
        }
      }
      
      console.log(`‚úÖ API: –ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
      res.json({ 
        success: true, 
        message: `${successCount} –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`,
        successCount,
        errorCount
      });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
  router.post('/channel/requests/bulk-decline', async (req, res) => {
    try {
      const { requestIds } = req.body;
      console.log(`‚ùå API: –ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ${requestIds.length} –∑–∞–ø—Ä–æ—Å–æ–≤`);
      
      if (!telegramBot) {
        return res.status(503).json({ error: 'Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
      }

      let successCount = 0;
      let errorCount = 0;

      for (const requestId of requestIds) {
        try {
          await telegramBot.declineChannelRequestAPI(requestId);
          successCount++;
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ ${requestId}:`, error);
          errorCount++;
        }
      }
      
      console.log(`‚úÖ API: –ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
      res.json({ 
        success: true, 
        message: `${successCount} –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`,
        successCount,
        errorCount
      });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞—É–¥–∏—Ç –∫–∞–Ω–∞–ª–∞
  router.post('/channel/audit', async (req, res) => {
    try {
      console.log('üîç API: –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ –∫–∞–Ω–∞–ª–∞');
      
      if (!telegramBot) {
        return res.status(503).json({ error: 'Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
      }

      await telegramBot.performChannelAudit();
      
      console.log('‚úÖ API: –ê—É–¥–∏—Ç –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');
      res.json({ success: true, message: '–ê—É–¥–∏—Ç –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω' });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ –∫–∞–Ω–∞–ª–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // === API –î–õ–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ ===

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
  router.get('/referrals/links', async (req, res) => {
    try {
      console.log('üîó API: –ó–∞–ø—Ä–æ—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫');
      
      const { data, error } = await database.supabase
        .from('referral_links')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;

      console.log('‚úÖ API: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', data?.length || 0);
      res.json(data || []);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
  router.post('/referrals/links', async (req, res) => {
    try {
      const { referrerName, subscriptionAmount } = req.body;
      console.log(`üîó API: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è ${referrerName}`);
      
      const { data, error } = await database.supabase
        .rpc('create_referral_link', {
          p_referrer_name: referrerName,
          p_subscription_amount: subscriptionAmount
        });

      if (error) throw error;

      console.log('‚úÖ API: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', data);
      res.json(data);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
  router.put('/referrals/links/:id', async (req, res) => {
    try {
      const { id } = req.params;
      const updateData = req.body;
      console.log(`üîÑ API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ ${id}`);
      
      const { data, error } = await database.supabase
        .from('referral_links')
        .update(updateData)
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;

      console.log('‚úÖ API: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      res.json(data);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
  router.delete('/referrals/links/:id', async (req, res) => {
    try {
      const { id } = req.params;
      console.log(`üóëÔ∏è API: –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ ${id}`);
      
      const { error } = await database.supabase
        .from('referral_links')
        .delete()
        .eq('id', id);

      if (error) throw error;

      console.log('‚úÖ API: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
      res.json({ success: true, message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞' });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
  router.get('/referrals/links/:id/stats', async (req, res) => {
    try {
      const { id } = req.params;
      console.log(`üìä API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ ${id}`);
      
      const { data, error } = await database.supabase
        .rpc('get_referral_link_stats', { p_referral_link_id: id });

      if (error) throw error;

      console.log('‚úÖ API: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω–∞');
      res.json(data?.[0] || {});
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  router.get('/referrals/stats', async (req, res) => {
    try {
      const { linkId } = req.query;
      console.log('üìà API: –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
      
      let query = database.supabase
        .from('referral_stats')
        .select(`
          *,
          referral_links!inner(referrer_name, code)
        `)
        .order('created_at', { ascending: false });

      if (linkId) {
        query = query.eq('referral_link_id', linkId);
      }

      const { data, error } = await query;

      if (error) throw error;

      console.log('‚úÖ API: –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞:', data?.length || 0);
      res.json(data || []);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  router.get('/referrals/top', async (req, res) => {
    try {
      const { limit = 10 } = req.query;
      console.log(`üèÜ API: –ó–∞–ø—Ä–æ—Å —Ç–æ–ø ${limit} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
      
      const { data, error } = await database.supabase
        .rpc('get_top_referrals', { limit_count: parseInt(limit) });

      if (error) throw error;

      console.log('‚úÖ API: –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—É—á–µ–Ω—ã:', data?.length || 0);
      res.json(data || []);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // === API –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò –ü–û–î–ü–ò–°–ö–ò ===

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
  router.get('/subscription/settings', async (req, res) => {
    try {
      console.log('‚öôÔ∏è API: –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏');
      
      const { data, error } = await database.supabase
        .from('subscription_settings')
        .select('*')
        .order('updated_at', { ascending: false })
        .limit(1)
        .single();

      if (error && error.code !== 'PGRST116') throw error;

      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const settings = data || {
        id: 'default',
        subscription_amount: 1000.00,
        currency: 'RUB',
        updated_at: new Date().toISOString(),
        updated_by: 'system'
      };

      console.log('‚úÖ API: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', settings);
      res.json(settings);
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
  router.put('/subscription/settings', async (req, res) => {
    try {
      const { amount } = req.body;
      console.log(`üí∞ API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${amount}`);
      
      if (!amount || amount <= 0 || amount > 100000) {
        return res.status(400).json({ error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 000 —Ä—É–±–ª–µ–π' });
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const { error } = await database.supabase
        .rpc('update_subscription_amount', {
          new_amount: amount,
          updated_by_user: 'admin_panel'
        });

      if (error) throw error;

      console.log(`‚úÖ API: –°—É–º–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${amount} —Ä—É–±`);
      res.json({ success: true, message: '–°—É–º–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', amount });
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  router.get('/health/database', async (req, res) => {
    try {
      console.log('üîç API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      
      // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const stats = await database.getStats();
      
      console.log('‚úÖ API: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
      res.json({ 
        status: 'ok', 
        message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞',
        timestamp: new Date().toISOString(),
        stats 
      });
    } catch (error) {
      console.error('‚ùå API: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error);
      res.status(500).json({ 
        status: 'error', 
        message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  });

  return router;
}