import axios from 'axios';
import { v4 as uuidv4 } from 'uuid';

export class CryptoCloudService {
  constructor() {
    this.apiKey = process.env.CRYPTOCLOUD_API_KEY || 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1dWlkIjoiTmpBeE1UVT0iLCJ0eXBlIjoicHJvamVjdCIsInYiOiIyNDJlZjFiZjRmYWIxODIwNDQyZjZhMjliOGJjNDI3NDRiNmUzMzYwNGU4OTU5NTFjMWRkODFkM2ZkNTBiZjMzIiwiZXhwIjo4ODE1MDQyMDM2NH0.vU7V3x_i0l62iRTvF0t42hqa_5wldaYHoKqCn_n0w7U';
    this.shopId = process.env.CRYPTOCLOUD_SHOP_ID || 'aWVLYZybDtoiSLKK';
    this.secret = process.env.CRYPTOCLOUD_SECRET || 'lRdeN9aONpcHMy2l9znKeGAuYIjq5770karQA';
    this.apiUrl = 'https://api.cryptocloud.plus/v2';
    
    console.log('üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CryptoCloud —Å–µ—Ä–≤–∏—Å–∞:', {
      shopId: this.shopId,
      apiUrl: this.apiUrl,
      apiKey: this.apiKey ? this.apiKey.substring(0, 20) + '...' : '–ù–ï –ù–ê–ô–î–ï–ù'
    });
    
    this.client = axios.create({
      baseURL: this.apiUrl,
      headers: {
        'Authorization': `Token ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': 'TelegramBot/1.0'
      }
    });
  }

  async createInvoice(amount, description, orderId = null, currency = 'RUB') {
    const invoiceId = orderId || uuidv4();
    
    console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ CryptoCloud –∏–Ω–≤–æ–π—Å–∞:', {
      amount,
      description,
      invoiceId,
      currency
    });
    
    const invoiceData = {
      shop_id: this.shopId,
      amount: amount,
      currency: currency,
      order_id: invoiceId,
      name: description,
      description: description,
      success_url: `${process.env.WEBHOOK_URL || 'https://telegram-bot-first-punch.onrender.com'}/successful-payment`,
      fail_url: `${process.env.WEBHOOK_URL || 'https://telegram-bot-first-punch.onrender.com'}/failed-payment`,
      notification_url: `${process.env.WEBHOOK_URL || 'https://telegram-bot-first-punch.onrender.com'}/callback`
    };

    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ CryptoCloud:', JSON.stringify(invoiceData, null, 2));
      
      const response = await this.client.post('/invoice/create', invoiceData);
      
      console.log('‚úÖ CryptoCloud –∏–Ω–≤–æ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', {
        id: response.data.result?.uuid,
        status: response.data.status,
        pay_url: response.data.result?.link,
        amount: response.data.result?.amount,
        currency: response.data.result?.currency
      });
      
      return {
        id: response.data.result.uuid,
        status: 'created',
        pay_url: response.data.result.link,
        amount: response.data.result.amount,
        currency: response.data.result.currency,
        order_id: invoiceId,
        created_at: new Date().toISOString()
      };
    } catch (error) {
      console.error('‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CryptoCloud –∏–Ω–≤–æ–π—Å–∞:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message
      });
      
      if (error.response?.data) {
        console.error('üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –æ—Ç CryptoCloud:', JSON.stringify(error.response.data, null, 2));
      }
      
      throw error;
    }
  }

  async getInvoice(invoiceId) {
    try {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CryptoCloud –∏–Ω–≤–æ–π—Å–µ:', invoiceId);
      
      const response = await this.client.post('/invoice/info', {
        uuid: invoiceId
      });
      
      console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CryptoCloud –∏–Ω–≤–æ–π—Å–µ –ø–æ–ª—É—á–µ–Ω–∞:', {
        id: response.data.result?.uuid,
        status: response.data.result?.status,
        amount: response.data.result?.amount,
        currency: response.data.result?.currency
      });
      
      return {
        id: response.data.result.uuid,
        status: response.data.result.status,
        amount: response.data.result.amount,
        currency: response.data.result.currency,
        order_id: response.data.result.order_id,
        created_at: response.data.result.created_at,
        paid_at: response.data.result.paid_at
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CryptoCloud –∏–Ω–≤–æ–π—Å–∞:', {
        invoiceId,
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });
      throw error;
    }
  }

  async createRecurringInvoice(amount, description, orderId = null, currency = 'RUB') {
    // CryptoCloud –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –∏–Ω–≤–æ–π—Å, —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ CryptoCloud –∏–Ω–≤–æ–π—Å–∞ (—ç–º—É–ª—è—Ü–∏—è):', {
      amount,
      description,
      orderId,
      currency
    });
    
    return await this.createInvoice(amount, description, orderId, currency);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
  async checkApiStatus() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ CryptoCloud API...');
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–∞–≥–∞–∑–∏–Ω–∞
      const response = await this.client.post('/shop/balance');
      
      console.log('‚úÖ CryptoCloud API —Ä–∞–±–æ—Ç–∞–µ—Ç:', {
        balance: response.data.result
      });
      
      return true;
    } catch (error) {
      console.error('‚ùå CryptoCloud API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', {
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç
  async getAvailableCurrencies() {
    try {
      console.log('üí± –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç CryptoCloud...');
      
      const response = await this.client.get('/currencies');
      
      console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', response.data.result?.length || 0);
      
      return response.data.result || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª—é—Ç CryptoCloud:', error);
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook'–∞
  verifyWebhookSignature(data, signature) {
    try {
      const crypto = require('crypto');
      const expectedSignature = crypto
        .createHmac('sha256', this.secret)
        .update(JSON.stringify(data))
        .digest('hex');
      
      return signature === expectedSignature;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ CryptoCloud:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤–∞–ª—é—Ç—ã
  getMinimumAmount(currency = 'RUB') {
    const minimums = {
      'RUB': 10,
      'USD': 0.15,
      'EUR': 0.13,
      'BTC': 0.00001,
      'ETH': 0.0001,
      'USDT': 0.15,
      'USDC': 0.15,
      'LTC': 0.001,
      'BCH': 0.001,
      'BNB': 0.001,
      'TRX': 1,
      'DOGE': 1
    };
    
    return minimums[currency] || 10;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatAmount(amount, currency = 'RUB') {
    const symbols = {
      'RUB': '‚ÇΩ',
      'USD': '$',
      'EUR': '‚Ç¨',
      'BTC': '‚Çø',
      'ETH': 'Œû',
      'USDT': 'USDT',
      'USDC': 'USDC',
      'LTC': '≈Å',
      'BCH': 'BCH',
      'BNB': 'BNB',
      'TRX': 'TRX',
      'DOGE': '√ê'
    };
    
    const symbol = symbols[currency] || currency;
    const decimals = ['BTC', 'ETH', 'LTC', 'BCH'].includes(currency) ? 8 : 2;
    
    return `${Number(amount).toFixed(decimals)} ${symbol}`;
  }
}