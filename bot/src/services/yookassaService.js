import axios from 'axios';
import { v4 as uuidv4 } from 'uuid';

export class YookassaService {
  constructor() {
    this.shopId = process.env.YUKASSA_SHOP_ID;
    this.secretKey = process.env.YUKASSA_SECRET_KEY;
    this.apiUrl = process.env.YUKASSA_API_URL;
    
    if (!this.shopId || !this.secretKey || !this.apiUrl) {
      throw new Error('–Æ–ö–∞—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã');
    }
    
    console.log('üí≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Æ–ö–∞—Å—Å–∞ —Å–µ—Ä–≤–∏—Å–∞:', {
      shopId: this.shopId,
      apiUrl: this.apiUrl,
      secretKey: this.secretKey ? this.secretKey.substring(0, 10) + '...' : '–ù–ï –ù–ê–ô–î–ï–ù'
    });
    
    this.client = axios.create({
      baseURL: this.apiUrl,
      auth: {
        username: this.shopId,
        password: this.secretKey
      },
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'TelegramBot/1.0'
      }
    });
  }

  async createPayment(amount, description, returnUrl = null, savePaymentMethod = false, customerEmail = null) {
    const idempotencyKey = uuidv4();
    
    // –ï—Å–ª–∏ returnUrl –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞
    const finalReturnUrl = returnUrl || `${process.env.WEBHOOK_URL}/webhook/payment-success`;
    
    console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', {
      amount,
      description,
      savePaymentMethod,
      customerEmail,
      idempotencyKey,
      returnUrl: finalReturnUrl
    });
    
    const paymentData = {
      amount: {
        value: amount.toFixed(2),
        currency: 'RUB'
      },
      description,
      save_payment_method: savePaymentMethod,
      capture: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
      payment_method_data: {
        type: 'sbp'
      },
      confirmation: {
        type: 'redirect',
        return_url: finalReturnUrl
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω email
    if (customerEmail) {
      paymentData.receipt = {
        customer: {
          email: customerEmail
        },
        items: [
          {
            description: description,
            quantity: '1.00',
            amount: {
              value: amount.toFixed(2),
              currency: 'RUB'
            },
            vat_code: 1, // –ù–î–° 20%
            payment_subject: 'service', // –£—Å–ª—É–≥–∞
            payment_mode: 'full_payment' // –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞
          }
        ]
      };
    }

    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –Æ–ö–∞—Å—Å—É:', JSON.stringify(paymentData, null, 2));
      
      const response = await this.client.post('/payments', paymentData, {
        headers: {
          'Idempotence-Key': idempotencyKey
        }
      });
      
      console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', {
        id: response.data.id,
        status: response.data.status,
        confirmation_url: response.data.confirmation?.confirmation_url,
        amount: response.data.amount,
        created_at: response.data.created_at
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        headers: error.response?.headers,
        data: error.response?.data,
        message: error.message,
        config: {
          url: error.config?.url,
          method: error.config?.method,
          data: error.config?.data
        }
      });
      
      if (error.response?.data) {
        console.error('üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –æ—Ç –Æ–ö–∞—Å—Å—ã:', JSON.stringify(error.response.data, null, 2));
      }
      
      throw error;
    }
  }

  async createRecurringPayment(amount, description, paymentMethodId, customerEmail = null) {
    const idempotencyKey = uuidv4();
    
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', {
      amount,
      description,
      paymentMethodId,
      customerEmail,
      idempotencyKey
    });
    
    const paymentData = {
      amount: {
        value: amount.toFixed(2),
        currency: 'RUB'
      },
      payment_method_id: paymentMethodId,
      description,
      capture: true // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω email
    if (customerEmail) {
      paymentData.receipt = {
        customer: {
          email: customerEmail
        },
        items: [
          {
            description: description,
            quantity: '1.00',
            amount: {
              value: amount.toFixed(2),
              currency: 'RUB'
            },
            vat_code: 1, // –ù–î–° 20%
            payment_subject: 'service', // –£—Å–ª—É–≥–∞
            payment_mode: 'full_payment' // –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞
          }
        ]
      };
    }

    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –Æ–ö–∞—Å—Å—É:', JSON.stringify(paymentData, null, 2));
      
      const response = await this.client.post('/payments', paymentData, {
        headers: {
          'Idempotence-Key': idempotencyKey
        }
      });
      
      console.log('‚úÖ –†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', {
        id: response.data.id,
        status: response.data.status,
        amount: response.data.amount,
        created_at: response.data.created_at
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        paymentMethodId
      });
      
      if (error.response?.data) {
        console.error('üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –æ—Ç –Æ–ö–∞—Å—Å—ã:', JSON.stringify(error.response.data, null, 2));
      }
      
      throw error;
    }
  }

  async getPayment(paymentId) {
    try {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ:', paymentId);
      
      const response = await this.client.get(`/payments/${paymentId}`);
      
      console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ–ª—É—á–µ–Ω–∞:', {
        id: response.data.id,
        status: response.data.status,
        amount: response.data.amount,
        payment_method: response.data.payment_method?.id || '–Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', {
        paymentId,
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });
      throw error;
    }
  }

  async capturePayment(paymentId, amount) {
    try {
      console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', { paymentId, amount });
      
      const response = await this.client.post(`/payments/${paymentId}/capture`, {
        amount: {
          value: amount.toFixed(2),
          currency: 'RUB'
        }
      });
      
      console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:', {
        id: response.data.id,
        status: response.data.status,
        amount: response.data.amount
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', {
        paymentId,
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });
      throw error;
    }
  }

  async cancelPayment(paymentId) {
    try {
      console.log('‚ùå –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞:', paymentId);
      
      const response = await this.client.post(`/payments/${paymentId}/cancel`);
      
      console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω:', {
        id: response.data.id,
        status: response.data.status
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞:', {
        paymentId,
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });
      throw error;
    }
  }

  async checkApiStatus() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API –Æ–ö–∞—Å—Å—ã...');
      
      const response = await this.client.get('/me');
      
      console.log('‚úÖ API –Æ–ö–∞—Å—Å—ã —Ä–∞–±–æ—Ç–∞–µ—Ç:', {
        account_id: response.data.account_id,
        status: response.data.status
      });
      
      return true;
    } catch (error) {
      console.error('‚ùå API –Æ–ö–∞—Å—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', {
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });
      return false;
    }
  }
}
