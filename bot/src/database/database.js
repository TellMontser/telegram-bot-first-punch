import { createClient } from '@supabase/supabase-js';

export class Database {
  constructor() {
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Supabase URL –∏ Service Role Key –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã');
    }
    
    this.supabase = createClient(supabaseUrl, supabaseKey);
  }

  async init() {
    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { error: usersError } = await this.supabase.rpc('create_users_table');
      if (usersError && !usersError.message.includes('already exists')) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users:', usersError);
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π
      const { error: paymentsError } = await this.supabase.rpc('create_payments_table');
      if (paymentsError && !paymentsError.message.includes('already exists')) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã payments:', paymentsError);
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤
      const { error: logsError } = await this.supabase.rpc('create_logs_table');
      if (logsError && !logsError.message.includes('already exists')) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã subscription_logs:', logsError);
      }

      console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  async createUser(telegramId, username, firstName, lastName) {
  }
  async createUser(telegramId, username, firstName, lastName, referralSource = null, referralLinkId = null) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await this.getUserByTelegramId(telegramId);
      if (existingUser) {
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ`);
        return existingUser;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
      let subscriptionAmount = 1000; // Fallback —Å—É–º–º–∞
      let subscriptionInterval = 'monthly'; // Fallback –ø–µ—Ä–∏–æ–¥
      
      if (referralLinkId) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try {
          const { data: referralLink, error } = await this.supabase
            .from('referral_links')
            .select('subscription_amount')
            .eq('id', referralLinkId)
            .single();
          
          if (!error && referralLink) {
            subscriptionAmount = referralLink.subscription_amount;
            console.log(`üí∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—É–º–º–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: ${subscriptionAmount} —Ä—É–±`);
          }
        } catch (referralError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', referralError);
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try {
          const { data: globalSettings, error } = await this.supabase
            .from('subscription_settings')
            .select('subscription_amount')
            .order('created_at', { ascending: false })
            .limit(1)
            .single();
          
          if (!error && globalSettings) {
            subscriptionAmount = globalSettings.subscription_amount;
            console.log(`‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—É–º–º–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${subscriptionAmount} —Ä—É–±`);
          }
        } catch (settingsError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', settingsError);
        }
      }
      
      const { data, error } = await this.supabase
        .from('users')
        .insert({
          telegram_id: telegramId,
          username: username,
          first_name: firstName,
          last_name: lastName,
          referral_source: referralSource,
          referral_link_id: referralLinkId,
          status: 'inactive',
          auto_payment_enabled: false,
          auto_payment_amount: subscriptionAmount,
          auto_payment_interval: subscriptionInterval
        })
        .select()
        .single();

      if (error) throw error;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:`, {
        referralSource,
        referralLinkId,
        subscriptionAmount,
        subscriptionInterval
      });
      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (error.code === '23505') {
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ), –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ`);
        return await this.getUserByTelegramId(telegramId);
      }
      throw error;
    }
  }

  async getUserByTelegramId(telegramId) {
    const { data, error } = await this.supabase
      .from('users')
      .select('*')
      .eq('telegram_id', telegramId)
      .single();

    if (error && error.code !== 'PGRST116') {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }

    return data;
  }

  async updateUserStatus(telegramId, status, subscriptionEnd = null) {
    const { error } = await this.supabase
      .from('users')
      .update({
        status: status,
        subscription_end: subscriptionEnd
      })
      .eq('telegram_id', telegramId);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  async updateUserPaymentMethod(telegramId, paymentMethodId) {
    const { error } = await this.supabase
      .from('users')
      .update({ payment_method_id: paymentMethodId })
      .eq('telegram_id', telegramId);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è payment method:', error);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
  async updateAutoPaymentSettings(telegramId, amount, interval, customMinutes = null, nextPaymentDate = null) {
    const updateData = { 
      auto_payment_amount: amount,
      auto_payment_interval: interval
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (interval === 'custom' && customMinutes) {
      updateData.custom_interval_minutes = customMinutes;
    } else {
      updateData.custom_interval_minutes = null;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω—É—é –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (nextPaymentDate) {
      updateData.next_payment_date = nextPaymentDate;
    } else {
      updateData.next_payment_date = null;
    }

    const { error } = await this.supabase
      .from('users')
      .update(updateData)
      .eq('telegram_id', telegramId);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error);
      throw error;
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
  async parseCustomInterval(intervalText) {
    try {
      const { data, error } = await this.supabase
        .rpc('parse_custom_interval', { interval_text: intervalText });

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:', error);
      return null;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
  async updateUserStatusWithCustomEnd(telegramId, status, subscriptionEnd = null, customDuration = null) {
    let finalSubscriptionEnd = subscriptionEnd;

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if (customDuration && status === 'active') {
      const now = new Date();
      const durationMinutes = await this.parseCustomInterval(customDuration);
      if (durationMinutes) {
        finalSubscriptionEnd = new Date(now.getTime() + durationMinutes * 60 * 1000).toISOString();
      }
    }

    const { error } = await this.supabase
      .from('users')
      .update({
        status: status,
        subscription_end: finalSubscriptionEnd
      })
      .eq('telegram_id', telegramId);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }

    return finalSubscriptionEnd;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
  async updateLastPaymentDate(telegramId, date = null) {
    const { error } = await this.supabase
      .from('users')
      .update({ last_payment_date: date || new Date().toISOString() })
      .eq('telegram_id', telegramId);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
      throw error;
    }
  }
  async setAutoPayment(telegramId, enabled) {
    const { error } = await this.supabase
      .from('users')
      .update({ auto_payment_enabled: enabled })
      .eq('telegram_id', telegramId);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error);
      throw error;
    }
  }

  async createPayment(userId, paymentId, amount, status, paymentMethodId = null) {
    const { error } = await this.supabase
      .from('payments')
      .insert({
        user_id: userId,
        payment_id: paymentId,
        amount: amount,
        status: status,
        payment_method_id: paymentMethodId
      });

    if (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
      throw error;
    }
  }

  async updatePaymentStatus(paymentId, status, confirmedAt = null) {
    const { error } = await this.supabase
      .from('payments')
      .update({
        status: status,
        confirmed_at: confirmedAt
      })
      .eq('payment_id', paymentId);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
      throw error;
    }
  }

  async getPaymentByPaymentId(paymentId) {
    const { data, error } = await this.supabase
      .from('payments')
      .select(`
        *,
        users!inner(telegram_id, username)
      `)
      .eq('payment_id', paymentId)
      .single();

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
      return null;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return {
      ...data,
      telegram_id: data.users.telegram_id,
      username: data.users.username
    };
  }

  async logSubscriptionAction(userId, action, details = null) {
    const { error } = await this.supabase
      .from('subscription_logs')
      .insert({
        user_id: userId,
        action: action,
        details: details
      });

    if (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞:', error);
      throw error;
    }
  }

  async getActiveUsersWithAutoPayment() {
    const { data, error } = await this.supabase
      .from('users')
      .select('*, auto_payment_amount, auto_payment_interval, last_payment_date')
      .eq('auto_payment_enabled', true)
      .eq('status', 'active')
      .not('payment_method_id', 'is', null);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return [];
    }

    return data || [];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–æ—Ç–æ–≤—ã—Ö –∫ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂—É
  async getUsersReadyForAutoPayment() {
    const { data, error } = await this.supabase
      .rpc('get_users_ready_for_payment');

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error);
      return [];
    }

    return data || [];
  }
  async getAllUsers() {
    const { data, error } = await this.supabase
      .from('users')
      .select('*, auto_payment_amount, auto_payment_interval, last_payment_date, custom_interval_minutes, next_payment_date')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return [];
    }

    return data || [];
  }

  async getAllPayments() {
    const { data, error } = await this.supabase
      .from('payments')
      .select(`
        *,
        users!inner(telegram_id, username)
      `)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π:', error);
      return [];
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return (data || []).map(payment => ({
      ...payment,
      telegram_id: payment.users.telegram_id,
      username: payment.users.username
    }));
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –ö–†–ò–ü–¢–û–ü–õ–ê–¢–ï–ñ–ï–ô ===

  async getAllCryptoPayments() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏
      const { data, error } = await this.supabase
        .from('payments')
        .select(`
          *,
          users!inner(telegram_id, username)
        `)
        .like('payment_id', 'crypto_%')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π:', error);
        return [];
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      return (data || []).map(payment => ({
        ...payment,
        telegram_id: payment.users.telegram_id,
        username: payment.users.username,
        payment_system: 'cryptocloud',
        // –ü–∞—Ä—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ payment_id –µ—Å–ª–∏ –µ—Å—Ç—å
        crypto_currency: this.extractCryptoCurrency(payment.payment_id),
        crypto_address: this.extractCryptoAddress(payment.payment_id)
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π:', error);
      return [];
    }
  }

  async getCryptoStats() {
    try {
      console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
      const { data: allPayments, error: paymentsError } = await this.supabase
        .from('payments')
        .select('payment_id, amount, status')
        .eq('status', 'succeeded');

      if (paymentsError) throw paymentsError;

      // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫—Ä–∏–ø—Ç–æ –∏ —Ñ–∏–∞—Ç –ø–ª–∞—Ç–µ–∂–∏
      const cryptoPayments = (allPayments || []).filter(p => p.payment_id.startsWith('crypto_'));
      const fiatPayments = (allPayments || []).filter(p => !p.payment_id.startsWith('crypto_'));

      const totalCryptoPayments = cryptoPayments.length;
      const totalCryptoAmount = cryptoPayments.reduce((sum, p) => sum + (p.amount || 0), 0);
      const totalFiatAmount = fiatPayments.reduce((sum, p) => sum + (p.amount || 0), 0);
      const totalAmount = totalCryptoAmount + totalFiatAmount;

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞–ª—é—Ç–∞–º (—ç–º—É–ª—è—Ü–∏—è, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
      const popularCryptoCurrencies = [
        { currency: 'USDT', count: Math.floor(totalCryptoPayments * 0.4), total_amount: totalCryptoAmount * 0.4 },
        { currency: 'BTC', count: Math.floor(totalCryptoPayments * 0.3), total_amount: totalCryptoAmount * 0.3 },
        { currency: 'ETH', count: Math.floor(totalCryptoPayments * 0.2), total_amount: totalCryptoAmount * 0.2 },
        { currency: 'LTC', count: Math.floor(totalCryptoPayments * 0.1), total_amount: totalCryptoAmount * 0.1 }
      ].filter(c => c.count > 0);

      const cryptoVsFiat = {
        crypto_percentage: totalAmount > 0 ? (totalCryptoAmount / totalAmount * 100) : 0,
        fiat_percentage: totalAmount > 0 ? (totalFiatAmount / totalAmount * 100) : 0
      };

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
      const { data: pendingPayments, error: pendingError } = await this.supabase
        .from('payments')
        .select('payment_id')
        .like('payment_id', 'crypto_%')
        .eq('status', 'pending');

      if (pendingError) console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π:', pendingError);

      const stats = {
        totalCryptoPayments,
        totalCryptoAmount,
        successfulCryptoPayments: totalCryptoPayments,
        pendingCryptoPayments: (pendingPayments || []).length,
        popularCryptoCurrencies,
        cryptoVsFiat
      };

      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—É—á–µ–Ω–∞:', stats);
      return stats;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π:', error);
      return {
        totalCryptoPayments: 0,
        totalCryptoAmount: 0,
        successfulCryptoPayments: 0,
        pendingCryptoPayments: 0,
        popularCryptoCurrencies: [],
        cryptoVsFiat: { crypto_percentage: 0, fiat_percentage: 0 }
      };
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  extractCryptoCurrency(paymentId) {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤–∞–ª—é—Ç—É –∏–∑ payment_id
    const match = paymentId.match(/crypto_([A-Z]+)_/);
    return match ? match[1] : 'UNKNOWN';
  }

  extractCryptoAddress(paymentId) {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å –∏–∑ payment_id (–µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å)
    const match = paymentId.match(/_([a-zA-Z0-9]{20,})$/);
    return match ? match[1] : null;
  }

  async getSubscriptionLogs() {
    const { data, error } = await this.supabase
      .from('subscription_logs')
      .select(`
        *,
        users!inner(telegram_id, username)
      `)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
      return [];
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return (data || []).map(log => ({
      ...log,
      telegram_id: log.users.telegram_id,
      username: log.users.username
    }));
  }

  async getStats() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { data: usersStats, error: usersError } = await this.supabase
        .from('users')
        .select('status, auto_payment_enabled');

      if (usersError) throw usersError;

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
      const { data: paymentsStats, error: paymentsError } = await this.supabase
        .from('payments')
        .select('status, amount')
        .eq('status', 'succeeded');

      if (paymentsError) throw paymentsError;

      const totalUsers = usersStats?.length || 0;
      const activeUsers = usersStats?.filter(u => u.status === 'active').length || 0;
      const autoPaymentUsers = usersStats?.filter(u => u.auto_payment_enabled).length || 0;
      const totalPayments = paymentsStats?.length || 0;
      const totalAmount = paymentsStats?.reduce((sum, p) => sum + (p.amount || 0), 0) || 0;

      return {
        totalUsers,
        activeUsers,
        totalPayments,
        totalAmount,
        autoPaymentUsers
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        totalUsers: 0,
        activeUsers: 0,
        totalPayments: 0,
        totalAmount: 0,
        autoPaymentUsers: 0
      };
    }
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–ù–ê–õ–û–ú ===

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async createChannelRequest(userId, username, firstName, lastName) {
    try {
      console.log(`üìù –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –≤—Å—Ç–∞–≤–∫—É –≤–º–µ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏
      const { data, error } = await this.supabase
        .from('channel_requests')
        .upsert({
          user_id: userId,
          username: username || null,
          first_name: firstName || null,
          last_name: lastName || null,
          status: 'pending',
          request_date: new Date().toISOString()
        }, {
          onConflict: 'user_id',
          ignoreDuplicates: false
        })
        .select()
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ upsert, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—É—é –≤—Å—Ç–∞–≤–∫—É:', error);
        
        // –ï—Å–ª–∏ upsert –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—É—é –≤—Å—Ç–∞–≤–∫—É
        const { data: insertData, error: insertError } = await this.supabase
          .from('channel_requests')
          .insert({
            user_id: userId,
            username: username || null,
            first_name: firstName || null,
            last_name: lastName || null,
            status: 'pending',
            request_date: new Date().toISOString()
          })
          .select()
          .single();

        if (insertError) {
          // –ï—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–∑-–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
          if (insertError.code === '23505') {
            console.log('–ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...');
            const { data: updateData, error: updateError } = await this.supabase
              .from('channel_requests')
              .update({
                username: username || null,
                first_name: firstName || null,
                last_name: lastName || null,
                status: 'pending',
                request_date: new Date().toISOString(),
                processed_date: null,
                processed_by: null
              })
              .eq('user_id', userId)
              .select()
              .single();

            if (updateError) throw updateError;
            console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            return updateData;
          } else {
            throw insertError;
          }
        }

        console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return insertData;
      }

      console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
  async getChannelRequests() {
    try {
      console.log('üìã –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª');
      
      const { data, error } = await this.supabase
        .from('channel_requests')
        .select('*')
        .order('request_date', { ascending: false });

      if (error) throw error;

      // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
      const enrichedRequests = await Promise.all(
        (data || []).map(async (request) => {
          const user = await this.getUserByTelegramId(request.user_id);
          return {
            ...request,
            is_registered: !!user,
            subscription_status: user?.status || 'none',
            auto_payment_enabled: user?.auto_payment_enabled || false
          };
        })
      );

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${enrichedRequests.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ`);
      return enrichedRequests;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
  async getChannelStats() {
    try {
      console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
      const { data: requests, error: requestsError } = await this.supabase
        .from('channel_requests')
        .select('status, user_id');

      if (requestsError) throw requestsError;

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { data: users, error: usersError } = await this.supabase
        .from('users')
        .select('telegram_id, status, auto_payment_enabled');

      if (usersError) throw usersError;

      // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
      const { data: members, error: membersError } = await this.supabase
        .from('channel_members_cache')
        .select('user_id, status')
        .in('status', ['member', 'administrator', 'creator']);

      if (membersError) console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞:', membersError);

      const totalRequests = requests?.length || 0;
      const pendingRequests = requests?.filter(r => r.status === 'pending').length || 0;
      const approvedRequests = requests?.filter(r => r.status === 'approved').length || 0;
      const declinedRequests = requests?.filter(r => r.status === 'declined').length || 0;

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
      const userIds = new Set(users?.map(u => u.telegram_id) || []);
      const registeredUsers = requests?.filter(r => userIds.has(r.user_id)).length || 0;
      const unregisteredUsers = totalRequests - registeredUsers;

      const activeSubscribers = users?.filter(u => u.status === 'active').length || 0;
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫—ç—à–∞
      const channelMembers = members?.length || 0;

      const stats = {
        totalRequests,
        pendingRequests,
        approvedRequests,
        declinedRequests,
        registeredUsers,
        unregisteredUsers,
        activeSubscribers,
        channelMembers
      };

      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞:', stats);
      return stats;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞:', error);
      return {
        totalRequests: 0,
        pendingRequests: 0,
        approvedRequests: 0,
        declinedRequests: 0,
        registeredUsers: 0,
        unregisteredUsers: 0,
        activeSubscribers: 0,
        channelMembers: 0
      };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
  async updateChannelRequestStatus(requestId, status, processedBy = 'admin') {
    try {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ ${requestId} –Ω–∞ ${status}`);
      
      const { data, error } = await this.supabase
        .from('channel_requests')
        .update({
          status: status,
          processed_date: new Date().toISOString(),
          processed_by: processedBy
        })
        .eq('id', requestId)
        .select()
        .single();

      if (error) throw error;

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ ${requestId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}`);
      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ ID
  async getChannelRequestById(requestId) {
    try {
      const { data, error } = await this.supabase
        .from('channel_requests')
        .select('*')
        .eq('id', requestId)
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ ID:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getChannelRequestByUserId(userId) {
    try {
      const { data, error } = await this.supabase
        .from('channel_requests')
        .select('*')
        .eq('user_id', userId)
        .eq('status', 'pending')
        .single();

      if (error && error.code !== 'PGRST116') throw error;
      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ user ID:', error);
      return null;
    }
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò –ö–ê–ù–ê–õ–ê ===

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
  async updateChannelMember(userId, username, firstName, lastName, status, isBot = false) {
    try {
      console.log(`üë• –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ ${userId} –≤ –∫—ç—à–µ`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –≤—Å—Ç–∞–≤–∫—É –≤–º–µ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏
      const { data, error } = await this.supabase
        .from('channel_members_cache')
        .upsert({
          user_id: userId,
          username: username || null,
          first_name: firstName || null,
          last_name: lastName || null,
          status: status,
          is_bot: isBot,
          last_seen: new Date().toISOString()
        }, {
          onConflict: 'user_id',
          ignoreDuplicates: false
        })
        .select()
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ upsert —É—á–∞—Å—Ç–Ω–∏–∫–∞, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—É—é –≤—Å—Ç–∞–≤–∫—É:', error);
        
        // –ï—Å–ª–∏ upsert –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—É—é –≤—Å—Ç–∞–≤–∫—É
        const { data: insertData, error: insertError } = await this.supabase
          .from('channel_members_cache')
          .insert({
            user_id: userId,
            username: username || null,
            first_name: firstName || null,
            last_name: lastName || null,
            status: status,
            is_bot: isBot,
            last_seen: new Date().toISOString()
          })
          .select()
          .single();

        if (insertError) {
          // –ï—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–∑-–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
          if (insertError.code === '23505') {
            console.log('–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...');
            const { data: updateData, error: updateError } = await this.supabase
              .from('channel_members_cache')
              .update({
                username: username || null,
                first_name: firstName || null,
                last_name: lastName || null,
                status: status,
                is_bot: isBot,
                last_seen: new Date().toISOString()
              })
              .eq('user_id', userId)
              .select()
              .single();

            if (updateError) throw updateError;
            console.log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
            return updateData;
          } else {
            throw insertError;
          }
        }

        console.log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ ${userId} —Å–æ–∑–¥–∞–Ω–∞`);
        return insertData;
      }

      console.log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ ${userId} —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–Ω–∞–ª–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
  async getChannelMembers() {
    try {
      console.log('üë• –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞');
      
      const { data: members, error: membersError } = await this.supabase
        .from('channel_members_cache')
        .select('*')
        .in('status', ['member', 'administrator', 'creator'])
        .order('last_seen', { ascending: false });

      if (membersError) throw membersError;

      // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
      const enrichedMembers = await Promise.all(
        (members || []).map(async (member) => {
          const user = await this.getUserByTelegramId(member.user_id);
          return {
            ...member,
            is_registered: !!user,
            subscription_status: user?.status || 'none',
            auto_payment_enabled: user?.auto_payment_enabled || false,
            subscription_end: user?.subscription_end || null,
            payment_method_id: user?.payment_method_id || null
          };
        })
      );

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${enrichedMembers.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞`);
      return enrichedMembers;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
  async getChannelMembersStats() {
    try {
      console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞');
      
      const members = await this.getChannelMembers();
      
      const totalMembers = members.length;
      const registeredMembers = members.filter(m => m.is_registered).length;
      const unregisteredMembers = totalMembers - registeredMembers;
      const activeSubscribers = members.filter(m => m.subscription_status === 'active').length;
      const inactiveSubscribers = members.filter(m => m.subscription_status === 'inactive').length;
      const withAutoPayment = members.filter(m => m.auto_payment_enabled).length;
      const administrators = members.filter(m => m.status === 'administrator' || m.status === 'creator').length;
      const bots = members.filter(m => m.is_bot).length;

      const stats = {
        totalMembers,
        registeredMembers,
        unregisteredMembers,
        activeSubscribers,
        inactiveSubscribers,
        withAutoPayment,
        administrators,
        bots
      };

      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞:', stats);
      return stats;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
      return {
        totalMembers: 0,
        registeredMembers: 0,
        unregisteredMembers: 0,
        activeSubscribers: 0,
        inactiveSubscribers: 0,
        withAutoPayment: 0,
        administrators: 0,
        bots: 0
      };
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏)
  async cleanupOldChannelRequests(daysOld = 30) {
    try {
      console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ä—à–µ ${daysOld} –¥–Ω–µ–π`);
      
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysOld);

      const { data, error } = await this.supabase
        .from('channel_requests')
        .delete()
        .neq('status', 'pending')
        .lt('processed_date', cutoffDate.toISOString())
        .select();

      if (error) throw error;

      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${data?.length || 0} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤`);
      return data?.length || 0;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
      return 0;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
  async cleanupOldChannelMembers(daysOld = 7) {
    try {
      console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–µ ${daysOld} –¥–Ω–µ–π`);
      
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysOld);

      const { data, error } = await this.supabase
        .from('channel_members_cache')
        .delete()
        .in('status', ['left', 'kicked'])
        .lt('last_seen', cutoffDate.toISOString())
        .select();

      if (error) throw error;

      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${data?.length || 0} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
      return data?.length || 0;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
      return 0;
    }
  }
}
