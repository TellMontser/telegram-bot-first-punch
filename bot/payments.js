import { addPayment } from './lib/supabase.js';
import { createYukassaPayment } from './yukassa.js';

export async function createSubscriptionPayment(userId, user) {
  try {
    console.log(`üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    if (!userId) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    if (!user) {
      throw new Error('–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    const amount = 10; // 10 —Ä—É–±–ª–µ–π
    const description = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" –Ω–∞ 30 –¥–Ω–µ–π`;
    
    const metadata = {
      userId: userId.toString(),
      username: user.username || '',
      first_name: user.first_name || '',
      type: 'subscription'
    };
    
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ÆKassa...');
    console.log('üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', metadata);
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
    const yukassaPayment = await createYukassaPayment(amount, description, metadata);
    
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –≤ –ÆKassa:', yukassaPayment);
    
    if (!yukassaPayment.confirmationUrl) {
      console.error('‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç –ÆKassa');
      throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç –ÆKassa');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ Supabase
    const supabasePayment = await addPayment(
      userId, 
      yukassaPayment.paymentId, 
      yukassaPayment.amount, 
      yukassaPayment.status,
      yukassaPayment.confirmationUrl
    );
    
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase:', supabasePayment);
    
    return {
      paymentId: yukassaPayment.paymentId,
      confirmationUrl: yukassaPayment.confirmationUrl,
      amount: yukassaPayment.amount,
      status: yukassaPayment.status
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error.message);
    console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: ${error.message}`);
  }
}
