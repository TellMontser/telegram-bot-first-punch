import { addPayment, addPaymentMethod, getPaymentMethodByUserId, getUser } from './lib/supabase.js';
import { createRecurringPayment, createAutoPayment } from './yukassa.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
export const RECURRING_CONFIG = {
  initialAmount: 10,        // –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ 10 —Ä—É–±–ª–µ–π
  recurringAmount: 10,      // –ö–∞–∂–¥–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ 10 —Ä—É–±–ª–µ–π
  intervalMinutes: 10,      // –ò–Ω—Ç–µ—Ä–≤–∞–ª 10 –º–∏–Ω—É—Ç
  paymentSystem: 'yukassa'  // –¢–æ–ª—å–∫–æ –ÆKassa
};

export async function createRecurringSubscription(userId, user) {
  try {
    console.log(`üí≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    if (!userId) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    if (!user) {
      throw new Error('–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    const existingPaymentMethod = await getPaymentMethodByUserId(userId);
    if (existingPaymentMethod && existingPaymentMethod.auto_payments_enabled) {
      throw new Error('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞');
    }

    const amount = RECURRING_CONFIG.initialAmount;
    const description = `–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" - —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂`;
    
    const metadata = {
      userId: userId.toString(),
      username: user.username || '',
      first_name: user.first_name || '',
      type: 'recurring_subscription',
      paymentSystem: RECURRING_CONFIG.paymentSystem
    };
    
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...');
    console.log('üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', metadata);
    console.log('üí∞ –°—É–º–º–∞:', amount, '—Ä—É–±–ª–µ–π');
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    const payment = await createRecurringPayment(amount, description, user, metadata);
    
    console.log('‚úÖ –†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:', payment);
    
    if (!payment.confirmationUrl) {
      console.error('‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã');
      throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ Supabase
    const supabasePayment = await addPayment(
      userId, 
      payment.paymentId, 
      payment.amount, 
      payment.status,
      payment.confirmationUrl,
      RECURRING_CONFIG.paymentSystem
    );
    
    console.log('‚úÖ –†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase:', supabasePayment);
    
    return {
      paymentId: payment.paymentId,
      confirmationUrl: payment.confirmationUrl,
      amount: payment.amount,
      status: payment.status,
      paymentSystem: RECURRING_CONFIG.paymentSystem,
      isRecurring: true
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error.message);
    console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
export async function processAutoPayment(paymentMethodId, userId) {
  try {
    console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å –º–µ—Ç–æ–¥–æ–º ${paymentMethodId}`);
    
    const user = await getUser(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const amount = RECURRING_CONFIG.recurringAmount;
    const description = `–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" - ${amount}‚ÇΩ`;
    
    const metadata = {
      userId: userId.toString(),
      username: user.username || '',
      first_name: user.first_name || '',
      type: 'auto_payment',
      paymentSystem: RECURRING_CONFIG.paymentSystem
    };
    
    console.log('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞...');
    
    // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –æ–ø–ª–∞—Ç—ã
    const payment = await createAutoPayment(paymentMethodId, amount, description, user, metadata);
    
    console.log('‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:', payment);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ Supabase
    const supabasePayment = await addPayment(
      userId, 
      payment.paymentId, 
      payment.amount, 
      payment.status,
      null, // –ù–µ—Ç URL –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
      RECURRING_CONFIG.paymentSystem
    );
    
    console.log('‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase:', supabasePayment);
    
    return {
      paymentId: payment.paymentId,
      amount: payment.amount,
      status: payment.status,
      paymentSystem: RECURRING_CONFIG.paymentSystem,
      isAutoPayment: true
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error.message);
    console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö
export function getRecurringConfig() {
  return {
    ...RECURRING_CONFIG,
    intervalMs: RECURRING_CONFIG.intervalMinutes * 60 * 1000, // –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    description: `–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∂–¥—ã–µ ${RECURRING_CONFIG.intervalMinutes} –º–∏–Ω—É—Ç –ø–æ ${RECURRING_CONFIG.recurringAmount}‚ÇΩ`
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
export function shouldCreateAutoPayment(lastPaymentDate, intervalMinutes = RECURRING_CONFIG.intervalMinutes) {
  if (!lastPaymentDate) return true;
  
  const now = new Date();
  const lastPayment = new Date(lastPaymentDate);
  const diffMinutes = (now - lastPayment) / (1000 * 60);
  
  return diffMinutes >= intervalMinutes;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
export function validateRecurringPayment(amount, paymentSystem) {
  if (amount < RECURRING_CONFIG.initialAmount) {
    return false;
  }
  
  if (paymentSystem !== RECURRING_CONFIG.paymentSystem) {
    return false;
  }
  
  return true;
}