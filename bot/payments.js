import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { createYukassaPayment } from './yukassa.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const PAYMENTS_FILE = path.join(__dirname, 'data', 'payments.json');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const dataDir = path.dirname(PAYMENTS_FILE);
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if (!fs.existsSync(PAYMENTS_FILE)) {
  fs.writeFileSync(PAYMENTS_FILE, JSON.stringify({ payments: [] }, null, 2));
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
export function loadPayments() {
  try {
    const data = fs.readFileSync(PAYMENTS_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    return { payments: [] };
  }
}

export function savePayments(paymentsData) {
  try {
    fs.writeFileSync(PAYMENTS_FILE, JSON.stringify(paymentsData, null, 2));
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
  }
}

export function addPayment(userId, paymentId, amount, status = 'pending', confirmationUrl = null) {
  try {
    const paymentsData = loadPayments();
    
    const payment = {
      id: Date.now() + Math.random(),
      userId: userId,
      paymentId: paymentId,
      amount: amount,
      status: status,
      confirmationUrl: confirmationUrl,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    paymentsData.payments.push(payment);
    savePayments(paymentsData);
    
    console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω: ${paymentId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    return payment;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
    throw error;
  }
}

export function updatePaymentStatus(paymentId, status) {
  try {
    const paymentsData = loadPayments();
    const paymentIndex = paymentsData.payments.findIndex(p => p.paymentId === paymentId);
    
    if (paymentIndex !== -1) {
      paymentsData.payments[paymentIndex].status = status;
      paymentsData.payments[paymentIndex].updatedAt = new Date().toISOString();
      savePayments(paymentsData);
      
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ${paymentId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${status}`);
      return paymentsData.payments[paymentIndex];
    } else {
      console.log(`‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ ${paymentId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞`);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
    throw error;
  }
}

export function getPaymentByPaymentId(paymentId) {
  try {
    const paymentsData = loadPayments();
    const payment = paymentsData.payments.find(p => p.paymentId === paymentId);
    
    if (payment) {
      console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω: ${paymentId}`);
    } else {
      console.log(`‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${paymentId}`);
    }
    
    return payment || null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', error);
    return null;
  }
}

export async function createSubscriptionPayment(userId, user) {
  try {
    console.log(`üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    if (!userId) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    if (!user) {
      throw new Error('–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    const amount = 10; // 10 —Ä—É–±–ª–µ–π
    const description = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" –Ω–∞ 30 –¥–Ω–µ–π`;
    
    const metadata = {
      userId: userId.toString(),
      username: user.username || '',
      first_name: user.first_name || '',
      type: 'subscription'
    };
    
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ÆKassa...');
    console.log('üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', metadata);
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
    const yukassaPayment = await createYukassaPayment(amount, description, metadata);
    
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –≤ –ÆKassa:', yukassaPayment);
    
    if (!yukassaPayment.confirmationUrl) {
      console.error('‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç –ÆKassa');
      throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç –ÆKassa');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    const localPayment = addPayment(
      userId, 
      yukassaPayment.paymentId, 
      yukassaPayment.amount, 
      yukassaPayment.status,
      yukassaPayment.confirmationUrl
    );
    
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', localPayment);
    
    return {
      paymentId: yukassaPayment.paymentId,
      confirmationUrl: yukassaPayment.confirmationUrl,
      amount: yukassaPayment.amount,
      status: yukassaPayment.status
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error.message);
    console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: ${error.message}`);
  }
}