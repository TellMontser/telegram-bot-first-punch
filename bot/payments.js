import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { createYukassaPayment } from './yukassa.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const PAYMENTS_FILE = path.join(__dirname, 'data', 'payments.json');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const dataDir = path.dirname(PAYMENTS_FILE);
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –ø–ª–∞—Ç–µ–∂–µ–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if (!fs.existsSync(PAYMENTS_FILE)) {
  fs.writeFileSync(PAYMENTS_FILE, JSON.stringify({ payments: [] }, null, 2));
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
export function loadPayments() {
  try {
    const data = fs.readFileSync(PAYMENTS_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    return { payments: [] };
  }
}

export function savePayments(paymentsData) {
  try {
    fs.writeFileSync(PAYMENTS_FILE, JSON.stringify(paymentsData, null, 2));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
export async function createSubscriptionPayment(userId, userInfo) {
  try {
    console.log(`üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    const amount = 10; // 10 —Ä—É–±–ª–µ–π
    const description = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" –Ω–∞ 30 –¥–Ω–µ–π`;
    const metadata = {
      userId: userId.toString(),
      username: userInfo.username || '',
      first_name: userInfo.first_name || '',
      subscription_days: '30'
    };

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
    const yukassaPayment = await createYukassaPayment(amount, description, metadata);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
    const paymentsData = loadPayments();
    
    const payment = {
      id: Date.now() + Math.random(),
      userId: userId,
      paymentId: yukassaPayment.paymentId,
      amount: amount,
      status: 'pending',
      description: description,
      confirmationUrl: yukassaPayment.confirmationUrl,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      metadata: metadata
    };
    
    paymentsData.payments.push(payment);
    savePayments(paymentsData);
    
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ:', payment.id);
    
    return payment;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
export function updatePaymentStatus(paymentId, status) {
  try {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ ${paymentId} –Ω–∞ ${status}`);
    
    const paymentsData = loadPayments();
    const paymentIndex = paymentsData.payments.findIndex(p => p.paymentId === paymentId);
    
    if (paymentIndex !== -1) {
      paymentsData.payments[paymentIndex].status = status;
      paymentsData.payments[paymentIndex].updatedAt = new Date().toISOString();
      
      if (status === 'succeeded') {
        paymentsData.payments[paymentIndex].paidAt = new Date().toISOString();
      } else if (status === 'cancelled') {
        paymentsData.payments[paymentIndex].cancelledAt = new Date().toISOString();
      }
      
      savePayments(paymentsData);
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
      return paymentsData.payments[paymentIndex];
    } else {
      console.warn('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω:', paymentId);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID –ÆKassa
export function getPaymentByPaymentId(paymentId) {
  try {
    const paymentsData = loadPayments();
    return paymentsData.payments.find(p => p.paymentId === paymentId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function getUserPayments(userId) {
  try {
    const paymentsData = loadPayments();
    return paymentsData.payments.filter(p => p.userId === userId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
export function getSuccessfulPayments() {
  try {
    const paymentsData = loadPayments();
    return paymentsData.payments.filter(p => p.status === 'succeeded');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –¥–æ—Ö–æ–¥–æ–≤
export function getTotalRevenue() {
  try {
    const successfulPayments = getSuccessfulPayments();
    return successfulPayments.reduce((total, payment) => total + payment.amount, 0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤:', error);
    return 0;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
export function getPaymentsStats() {
  try {
    const paymentsData = loadPayments();
    const payments = paymentsData.payments;
    
    const total = payments.length;
    const pending = payments.filter(p => p.status === 'pending').length;
    const succeeded = payments.filter(p => p.status === 'succeeded').length;
    const cancelled = payments.filter(p => p.status === 'cancelled').length;
    const revenue = getTotalRevenue();
    
    return {
      total,
      pending,
      succeeded,
      cancelled,
      revenue
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    return {
      total: 0,
      pending: 0,
      succeeded: 0,
      cancelled: 0,
      revenue: 0
    };
  }
}