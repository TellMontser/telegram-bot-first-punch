const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const multer = require('multer');
const fs = require('fs').promises;
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'Accept', 'Origin'],
  credentials: false
}));

app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const upload = multer({
  dest: 'uploads/',
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CHAT_ID = -1002876590285; // ID –∫–∞–Ω–∞–ª–∞ "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"
const SUBSCRIPTION_PRICE = 10; // –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
const DATA_DIR = path.join(__dirname, 'data');
const USERS_FILE = path.join(DATA_DIR, 'users.json');
const MESSAGES_FILE = path.join(DATA_DIR, 'messages.json');
const JOIN_REQUESTS_FILE = path.join(DATA_DIR, 'join_requests.json');
const PAYMENTS_FILE = path.join(DATA_DIR, 'payments.json');
const SUBSCRIPTIONS_FILE = path.join(DATA_DIR, 'subscriptions.json');

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
async function ensureDataDir() {
  try {
    await fs.access(DATA_DIR);
  } catch {
    await fs.mkdir(DATA_DIR, { recursive: true });
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
async function readJsonFile(filePath, defaultValue = []) {
  try {
    const data = await fs.readFile(filePath, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.log(`–§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π`);
    await writeJsonFile(filePath, defaultValue);
    return defaultValue;
  }
}

async function writeJsonFile(filePath, data) {
  await fs.writeFile(filePath, JSON.stringify(data, null, 2));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ Telegram API
async function sendMediaToTelegram(userId, file, caption = '', isVideoNote = false, inlineKeyboard = null) {
  try {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, {
      filename: file.originalname,
      mimetype: file.mimetype,
      size: file.size,
      isVideoNote
    });

    const fileBuffer = await fs.readFile(file.path);
    
    let result;

    if (isVideoNote && file.mimetype.startsWith('video/')) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ - –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–ø–æ—Å–æ–±
      console.log('üé• –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–∞ —á–µ—Ä–µ–∑ sendVideoNote...');
      
      // –î–ª—è –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ buffer –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
      result = await bot.sendVideoNote(userId, fileBuffer);
      
      console.log('‚úÖ –í–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } else if (file.mimetype.startsWith('image/')) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
      console.log('üñºÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
      const options = {
        filename: file.originalname,
        contentType: file.mimetype
      };
      
      const sendOptions = {};
      if (caption) sendOptions.caption = caption;
      if (inlineKeyboard) sendOptions.reply_markup = { inline_keyboard: inlineKeyboard };
      
      result = await bot.sendPhoto(userId, fileBuffer, sendOptions, options);
    } else if (file.mimetype.startsWith('video/')) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ
      console.log('üé¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ...');
      const options = {
        filename: file.originalname,
        contentType: file.mimetype
      };
      
      const sendOptions = {
        supports_streaming: true
      };
      if (caption) sendOptions.caption = caption;
      if (inlineKeyboard) sendOptions.reply_markup = { inline_keyboard: inlineKeyboard };
      
      result = await bot.sendVideo(userId, fileBuffer, sendOptions, options);
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
      console.log('üìÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
      const options = {
        filename: file.originalname,
        contentType: file.mimetype
      };
      
      const sendOptions = {};
      if (caption) sendOptions.caption = caption;
      if (inlineKeyboard) sendOptions.reply_markup = { inline_keyboard: inlineKeyboard };
      
      result = await bot.sendDocument(userId, fileBuffer, sendOptions, options);
    }

    console.log(`‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    return result;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
    throw error;
  } finally {
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try {
      await fs.unlink(file.path);
    } catch (unlinkError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', unlinkError.message);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async function saveMessage(userId, text, isFromBot = false, messageType = 'text') {
  const messages = await readJsonFile(MESSAGES_FILE, { messages: [] });
  const message = {
    id: Date.now() + Math.random(),
    userId,
    text,
    isFromBot,
    messageType,
    timestamp: new Date().toISOString()
  };
  
  messages.messages.push(message);
  await writeJsonFile(MESSAGES_FILE, messages);
  return message;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUser(userId, userData) {
  const users = await readJsonFile(USERS_FILE, { users: [] });
  const userIndex = users.users.findIndex(u => u.id === userId);
  
  if (userIndex !== -1) {
    users.users[userIndex] = { ...users.users[userIndex], ...userData, updated_at: new Date().toISOString() };
  } else {
    const newUser = {
      id: userId,
      username: null,
      first_name: null,
      last_name: null,
      first_seen: new Date().toISOString(),
      last_activity: new Date().toISOString(),
      is_blocked: false,
      message_count: 0,
      payment_status: 'unpaid',
      ...userData
    };
    users.users.push(newUser);
  }
  
  await writeJsonFile(USERS_FILE, users);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const userId = msg.from.id;
  const user = msg.from;
  
  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await saveMessage(userId, '/start', false, 'command');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  await updateUser(userId, {
    username: user.username,
    first_name: user.first_name,
    last_name: user.last_name,
    last_activity: new Date().toISOString(),
    message_count: 1
  });

  const welcomeMessage = `üé≠ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"!*

–ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:
‚ú® –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π —é–º–æ—Ä
‚ú® –°—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ  
‚ú® –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 10 —Ä—É–±–ª–µ–π –Ω–∞ 30 –¥–Ω–µ–π*

üëá *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ* üëá`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'pay_subscription' },
        { text: 'üìã –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about_channel' }
      ],
      [
        { text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/support_firstpunch' }
      ]
    ]
  };

  try {
    await bot.sendMessage(userId, welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await saveMessage(userId, welcomeMessage, true, 'text');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  console.log(`üîò Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${data}`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await saveMessage(userId, `–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${data}`, false, 'button');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const users = await readJsonFile(USERS_FILE, { users: [] });
  const userIndex = users.users.findIndex(u => u.id === userId);
  if (userIndex !== -1) {
    users.users[userIndex].last_activity = new Date().toISOString();
    users.users[userIndex].message_count += 1;
    await writeJsonFile(USERS_FILE, users);
  }

  let responseMessage = '';
  let keyboard = null;

  switch (data) {
    case 'about_channel':
      responseMessage = `üìã *–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ*

*–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á* - —ç—Ç–æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∫–ª—É–± –ø–æ —é–º–æ—Ä—É. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–æ —à—É—Ç–∏—Ç—å –∏ –ª–µ–≥–∫–æ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ–ª–æ–≤–∫–∏–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏ - —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É.

üéØ *–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –Ω–µ–¥–µ–ª—å —Ç—ã:*
‚Ä¢ –õ–µ–≥–∫–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—à—å –ª—é–±—ã–µ –Ω–µ–ª–æ–≤–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ —à—É—Ç–∫—É
‚Ä¢ –ë–æ–ª—å—à–µ –Ω–µ –¥—É–º–∞–µ—à—å: ¬´–ê —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ–±—ã –±—ã–ª–æ —Å–º–µ—à–Ω–æ?¬ª
‚Ä¢ –ù–∞—á–∞–ª –¥—É–º–∞—Ç—å –ø–æ-–Ω–æ–≤–æ–º—É!

üìö *–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ —é–º–æ—Ä—É, –ø–æ–¥–∞—á–µ, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
‚Ä¢ –ü—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã —Å–æ –°—Ç–∞—Å–æ–º –ï—Ä–Ω–∏–∫–æ–º
‚Ä¢ –° –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞–º –ø–æ —é–º–æ—Ä—É, –ø–æ–¥–±–æ—Ä–∫–∞–º –ø–∞–Ω—á–µ–π –∏ –≤–µ–±–∏–Ω–∞—Ä–∞–º

üë• –ò –≤—Å—ë —ç—Ç–æ —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ: —Å–º–µ—é—Ç—Å—è –Ω–∞–¥ —Ç–≤–æ–∏–º–∏ —à—É—Ç–∫–∞–º–∏ –∏ –ø–æ–º–æ–≥–∞—é—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ. –ó–¥–µ—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ —É—á–∏—Ç—å—Å—è, –ø—Ä–æ–±–æ–≤–∞—Ç—å, –æ—à–∏–±–∞—Ç—å—Å—è –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Å–º–µ—à–Ω–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

üèÜ *–ê —Ç–∞–∫–∂–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å —à—É—Ç–æ–∫!* –õ—É—á—à–∞—è –∑–∞–±–∏—Ä–∞–µ—Ç 1000 —Ä—É–±–ª–µ–π. –ü—Ä–æ—Å—Ç–æ –∑–∞ —Ö–æ—Ä–æ—à–∏–π –ø–∞–Ω—á. –í –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ —Å—É–ø–µ—Ä –ø—Ä–∏–∑. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 100 000 —Ä—É–±–ª–µ–π!

üí∞ *–í—Å—ë —ç—Ç–æ - –≤—Å–µ–≥–æ –∑–∞ 10 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü.*

üöÄ *–ü–æ–ø–∞–¥–∞—è –≤ –ü–µ—Ä–≤—ã–π –ü–∞–Ω—á —Ç—ã:*
‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—à—å –ø–æ–Ω–∏–º–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É —é–º–æ—Ä–∞
‚Ä¢ –°—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ
‚Ä¢ –¢–µ–±—è –±–æ–ª—å—à–µ —Å–ª—É—à–∞—é—Ç
‚Ä¢ –õ–µ–≥—á–µ –∑–∞–≤–æ–¥–∏—à—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞

–≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –∏ –≤ —Ä–∞–±–æ—Ç–µ, –∏ –≤ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ, –∏ –ø—Ä–æ—Å—Ç–æ –≤ –∂–∏–∑–Ω–∏.

üëá *–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –Ω–∏–∂–µ*`;

      keyboard = {
        inline_keyboard: [
          [
            { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'pay_subscription' }
          ],
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      };
      break;

    case 'pay_subscription':
      responseMessage = `üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏*

–°—Ç–æ–∏–º–æ—Å—Ç—å: *10 —Ä—É–±–ª–µ–π* –Ω–∞ 30 –¥–Ω–µ–π

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`;

      keyboard = {
        inline_keyboard: [
          [
            { text: 'üí≥ –ÆKassa (–∫–∞—Ä—Ç—ã)', callback_data: 'pay_yukassa' },
            { text: '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', callback_data: 'pay_crypto' }
          ],
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      };
      break;

    case 'main_menu':
      responseMessage = `üé≠ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"!*

–ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:
‚ú® –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π —é–º–æ—Ä
‚ú® –°—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ  
‚ú® –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 10 —Ä—É–±–ª–µ–π –Ω–∞ 30 –¥–Ω–µ–π*

üëá *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ* üëá`;

      keyboard = {
        inline_keyboard: [
          [
            { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'pay_subscription' },
            { text: 'üìã –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about_channel' }
          ],
          [
            { text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/support_firstpunch' }
          ]
        ]
      };
      break;

    default:
      responseMessage = '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß';
      keyboard = {
        inline_keyboard: [
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      };
  }

  try {
    await bot.editMessageText(responseMessage, {
      chat_id: userId,
      message_id: callbackQuery.message.message_id,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await saveMessage(userId, responseMessage, true, 'text');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
  await bot.answerCallbackQuery(callbackQuery.id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
bot.on('chat_join_request', async (joinRequest) => {
  console.log('üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:', joinRequest);
  
  const requests = await readJsonFile(JOIN_REQUESTS_FILE, { requests: [] });
  
  const request = {
    id: Date.now() + Math.random(),
    chatId: joinRequest.chat.id,
    chatTitle: joinRequest.chat.title,
    userId: joinRequest.from.id,
    username: joinRequest.from.username,
    first_name: joinRequest.from.first_name,
    last_name: joinRequest.from.last_name,
    date: new Date(joinRequest.date * 1000).toISOString(),
    status: 'pending',
    timestamp: new Date().toISOString()
  };
  
  requests.requests.push(request);
  await writeJsonFile(JOIN_REQUESTS_FILE, requests);
  
  console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  if (msg.text && msg.text.startsWith('/')) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  
  const userId = msg.from.id;
  const user = msg.from;
  
  console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${msg.text || '–º–µ–¥–∏–∞—Ñ–∞–π–ª'}`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  await saveMessage(userId, msg.text || '–ú–µ–¥–∏–∞—Ñ–∞–π–ª', false, 'text');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const users = await readJsonFile(USERS_FILE, { users: [] });
  const userIndex = users.users.findIndex(u => u.id === userId);
  
  if (userIndex !== -1) {
    users.users[userIndex].last_activity = new Date().toISOString();
    users.users[userIndex].message_count += 1;
  } else {
    const newUser = {
      id: userId,
      username: user.username,
      first_name: user.first_name,
      last_name: user.last_name,
      first_seen: new Date().toISOString(),
      last_activity: new Date().toISOString(),
      is_blocked: false,
      message_count: 1,
      payment_status: 'unpaid'
    };
    users.users.push(newUser);
  }
  
  await writeJsonFile(USERS_FILE, users);
});

// API –º–∞—Ä—à—Ä—É—Ç—ã

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    bot: 'active'
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', async (req, res) => {
  try {
    const users = await readJsonFile(USERS_FILE, { users: [] });
    const subscriptions = await readJsonFile(SUBSCRIPTIONS_FILE, { subscriptions: [] });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const usersWithSubscriptions = users.users.map(user => {
      const activeSubscription = subscriptions.subscriptions.find(sub => 
        sub.user_id === user.id && 
        sub.status === 'active' && 
        new Date(sub.end_date) > new Date()
      );
      
      return {
        ...user,
        subscription_active: !!activeSubscription
      };
    });
    
    res.json({ users: usersWithSubscriptions });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', async (req, res) => {
  try {
    const users = await readJsonFile(USERS_FILE, { users: [] });
    const messages = await readJsonFile(MESSAGES_FILE, { messages: [] });
    const joinRequests = await readJsonFile(JOIN_REQUESTS_FILE, { requests: [] });
    const subscriptions = await readJsonFile(SUBSCRIPTIONS_FILE, { subscriptions: [] });
    const payments = await readJsonFile(PAYMENTS_FILE, { payments: [] });

    const totalUsers = users.users.length;
    const activeUsers = users.users.filter(u => !u.is_blocked).length;
    const blockedUsers = users.users.filter(u => u.is_blocked).length;
    const totalMessages = messages.messages.length;
    
    const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const recentUsers = users.users.filter(u => new Date(u.last_activity) > dayAgo).length;
    
    const totalJoinRequests = joinRequests.requests.length;
    const pendingJoinRequests = joinRequests.requests.filter(r => r.status === 'pending').length;
    const approvedJoinRequests = joinRequests.requests.filter(r => r.status === 'approved').length;
    const declinedJoinRequests = joinRequests.requests.filter(r => r.status === 'declined').length;
    
    const now = new Date();
    const activeSubscriptions = subscriptions.subscriptions.filter(s => {
      const endDate = new Date(s.end_date);
      return s.status === 'active' && endDate > now;
    }).length;
    
    const expiredSubscriptions = subscriptions.subscriptions.filter(s => {
      const endDate = new Date(s.end_date);
      return s.status === 'active' && endDate <= now;
    }).length;
    
    const totalSubscriptions = subscriptions.subscriptions.length;
    const totalPayments = payments.payments.length;
    const successfulPayments = payments.payments.filter(p => p.status === 'succeeded').length;
    const pendingPayments = payments.payments.filter(p => p.status === 'pending').length;
    const totalRevenue = payments.payments.filter(p => p.status === 'succeeded').reduce((sum, p) => sum + Number(p.amount), 0);

    res.json({
      totalUsers,
      activeUsers,
      blockedUsers,
      totalMessages,
      recentUsers,
      totalJoinRequests,
      pendingJoinRequests,
      approvedJoinRequests,
      declinedJoinRequests,
      paidUsers: activeSubscriptions,
      unpaidUsers: totalUsers - activeSubscriptions,
      totalSubscriptions,
      activeSubscriptions,
      expiredSubscriptions,
      totalPayments,
      successfulPayments,
      pendingPayments,
      totalRevenue
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/messages/:userId', async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    const messages = await readJsonFile(MESSAGES_FILE, { messages: [] });
    
    const userMessages = messages.messages.filter(m => m.userId === userId);
    res.json({ messages: userMessages });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
app.post('/api/send-message', upload.single('media'), async (req, res) => {
  try {
    const { userId, message, mediaCaption, inlineKeyboard, isVideoNote } = req.body;
    const file = req.file;
    
    console.log('üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:', { 
      userId, 
      message, 
      hasFile: !!file,
      isVideoNote: isVideoNote === 'true'
    });
    
    if (!userId) {
      return res.status(400).json({ error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const userIdNum = parseInt(userId);
    const isVideoNoteFlag = isVideoNote === 'true';
    let keyboard = null;
    
    // –ü–∞—Ä—Å–∏–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–µ –¥–ª—è –∫—Ä—É–∂–∫–æ–≤)
    if (inlineKeyboard && !isVideoNoteFlag) {
      try {
        keyboard = JSON.parse(inlineKeyboard);
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e);
      }
    }

    if (file) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
      await sendMediaToTelegram(userIdNum, file, mediaCaption || '', isVideoNoteFlag, keyboard);
    } else if (message) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const options = {};
      if (keyboard) {
        options.reply_markup = { inline_keyboard: keyboard };
      }
      
      await bot.sendMessage(userIdNum, message, options);
    } else {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª' });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
    await saveMessage(userIdNum, message || (isVideoNoteFlag ? '–í–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫' : '–ú–µ–¥–∏–∞—Ñ–∞–π–ª'), true, file ? 'media' : 'text');

    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
app.post('/api/broadcast', upload.single('media'), async (req, res) => {
  try {
    const { userIds, message, mediaCaption, inlineKeyboard, isVideoNote } = req.body;
    const file = req.file;
    
    console.log('üì¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:', { 
      userIds: userIds ? JSON.parse(userIds).length : 0, 
      message, 
      hasFile: !!file,
      isVideoNote: isVideoNote === 'true'
    });
    
    if (!userIds) {
      return res.status(400).json({ error: 'userIds –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const userIdsList = JSON.parse(userIds);
    const isVideoNoteFlag = isVideoNote === 'true';
    let keyboard = null;
    
    // –ü–∞—Ä—Å–∏–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–µ –¥–ª—è –∫—Ä—É–∂–∫–æ–≤)
    if (inlineKeyboard && !isVideoNoteFlag) {
      try {
        keyboard = JSON.parse(inlineKeyboard);
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e);
      }
    }

    let successCount = 0;
    let errorCount = 0;

    // –î–ª—è –∫—Ä—É–∂–∫–æ–≤ —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (file && isVideoNoteFlag) {
      console.log('üé• –†–∞—Å—Å—ã–ª–∫–∞ –≤–∏–¥–µ–æ–∫—Ä—É–∂–∫–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–π —Ñ–∞–π–ª–∞...');
      
      for (const userId of userIdsList) {
        try {
          // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const originalBuffer = await fs.readFile(file.path);
          const tempFilePath = `${file.path}_${userId}`;
          await fs.writeFile(tempFilePath, originalBuffer);
          
          const fileCopy = {
            ...file,
            path: tempFilePath
          };
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫
          await sendMediaToTelegram(userId, fileCopy, '', true, null);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
          await saveMessage(userId, '–í–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫', true, 'video_note');
          
          successCount++;
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 200));
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä—É–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
          errorCount++;
        }
      }
    } else {
      // –û–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–∞
      for (const userId of userIdsList) {
        try {
          if (file) {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const originalBuffer = await fs.readFile(file.path);
            const tempFilePath = `${file.path}_${userId}`;
            await fs.writeFile(tempFilePath, originalBuffer);
            
            const fileCopy = {
              ...file,
              path: tempFilePath
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
            await sendMediaToTelegram(userId, fileCopy, mediaCaption || '', false, keyboard);
          } else if (message) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const options = {};
            if (keyboard) {
              options.reply_markup = { inline_keyboard: keyboard };
            }
            
            await bot.sendMessage(userId, message, options);
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
          await saveMessage(userId, message || '–ú–µ–¥–∏–∞—Ñ–∞–π–ª', true, file ? 'media' : 'text');
          
          successCount++;
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
          errorCount++;
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if (file) {
      try {
        await fs.unlink(file.path);
      } catch (unlinkError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:', unlinkError.message);
      }
    }

    console.log(`üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount}, –æ—à–∏–±–æ–∫ ${errorCount}`);
    res.json({ 
      success: true, 
      sent: successCount, 
      errors: errorCount 
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
app.get('/api/join-requests', async (req, res) => {
  try {
    const requests = await readJsonFile(JOIN_REQUESTS_FILE, { requests: [] });
    res.json(requests);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
app.post('/api/approve-join-request', async (req, res) => {
  try {
    const { chatId, userId } = req.body;
    
    console.log(`‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏: chatId=${chatId}, userId=${userId}`);
    
    // –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É –≤ Telegram
    await bot.approveChatJoinRequest(chatId, userId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ñ–∞–π–ª–µ
    const requests = await readJsonFile(JOIN_REQUESTS_FILE, { requests: [] });
    const requestIndex = requests.requests.findIndex(r => r.chatId === chatId && r.userId === userId && r.status === 'pending');
    
    if (requestIndex !== -1) {
      requests.requests[requestIndex].status = 'approved';
      requests.requests[requestIndex].processed_at = new Date().toISOString();
      await writeJsonFile(JOIN_REQUESTS_FILE, requests);
    }
    
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({ error: error.message });
  }
});

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
app.post('/api/decline-join-request', async (req, res) => {
  try {
    const { chatId, userId } = req.body;
    
    console.log(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏: chatId=${chatId}, userId=${userId}`);
    
    // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ Telegram
    await bot.declineChatJoinRequest(chatId, userId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ñ–∞–π–ª–µ
    const requests = await readJsonFile(JOIN_REQUESTS_FILE, { requests: [] });
    const requestIndex = requests.requests.findIndex(r => r.chatId === chatId && r.userId === userId && r.status === 'pending');
    
    if (requestIndex !== -1) {
      requests.requests[requestIndex].status = 'declined';
      requests.requests[requestIndex].processed_at = new Date().toISOString();
      await writeJsonFile(JOIN_REQUESTS_FILE, requests);
    }
    
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
app.get('/api/subscriptions', async (req, res) => {
  try {
    const subscriptions = await readJsonFile(SUBSCRIPTIONS_FILE, { subscriptions: [] });
    const users = await readJsonFile(USERS_FILE, { users: [] });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º
    const subscriptionsWithUsers = subscriptions.subscriptions.map(subscription => {
      const user = users.users.find(u => u.id === subscription.user_id);
      return {
        ...subscription,
        user: user ? {
          username: user.username,
          first_name: user.first_name,
          last_name: user.last_name
        } : null
      };
    });
    
    res.json({ subscriptions: subscriptionsWithUsers });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
app.get('/api/payments', async (req, res) => {
  try {
    const payments = await readJsonFile(PAYMENTS_FILE, { payments: [] });
    const users = await readJsonFile(USERS_FILE, { users: [] });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∫ –ø–ª–∞—Ç–µ–∂–∞–º
    const paymentsWithUsers = payments.payments.map(payment => {
      const user = users.users.find(u => u.id === payment.user_id);
      return {
        ...payment,
        user: user ? {
          username: user.username,
          first_name: user.first_name,
          last_name: user.last_name
        } : null
      };
    });
    
    res.json({ payments: paymentsWithUsers });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
app.post('/api/update-subscription-status', async (req, res) => {
  try {
    const { subscriptionId, userId, status } = req.body;
    
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${subscriptionId} -> ${status}`);
    
    const subscriptions = await readJsonFile(SUBSCRIPTIONS_FILE, { subscriptions: [] });
    const subscriptionIndex = subscriptions.subscriptions.findIndex(s => s.id === subscriptionId);
    
    if (subscriptionIndex !== -1) {
      subscriptions.subscriptions[subscriptionIndex].status = status;
      subscriptions.subscriptions[subscriptionIndex].updated_at = new Date().toISOString();
      await writeJsonFile(SUBSCRIPTIONS_FILE, subscriptions);
      
      // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞, –∏—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
      if (status === 'cancelled' || status === 'expired') {
        try {
          await bot.banChatMember(CHAT_ID, userId);
          await bot.unbanChatMember(CHAT_ID, userId);
          console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞`);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
        }
      }
      
      res.json({ success: true });
    } else {
      res.status(404).json({ error: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
  await ensureDataDir();
  
  app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω`);
  });
}

init().catch(console.error);
