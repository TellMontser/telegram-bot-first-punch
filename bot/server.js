import express from 'express';
import cors from 'cors';
import TelegramBot from 'node-telegram-bot-api';
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import { 
  addOrUpdateUser, 
  addMessage, 
  addJoinRequest, 
  updateJoinRequestStatus,
  addSubscription,
  isSubscriptionActive,
  addPayment,
  updatePaymentStatus,
  getPaymentByPaymentId,
  getAllUsers,
  getAllPayments,
  getAllSubscriptions,
  getMessages,
  getJoinRequests,
  getStats,
  updateSubscriptionStatus,
  markUserAsBlocked,
  getUser,
  updateUserPaymentData,
  getUserPaymentData,
  getUserPaymentMethods,
  disableAutoPayments
} from './lib/supabase.js';
import { createSubscriptionPayment, handleSuccessfulPayment } from './payments.js';
import { getYukassaPayment } from './yukassa.js';
import { getCryptoCloudInvoice, verifyCryptoCloudWebhook } from './cryptocloud.js';
import { startAutoPaymentScheduler } from './autopayments.js';

const app = express();
const PORT = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
app.use(cors({
  origin: ['http://localhost:5173', 'https://telegram-bot-admin-panel.netlify.app'],
  credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const upload = multer({
  dest: 'uploads/',
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB
  }
});

// Telegram Bot
const BOT_TOKEN = '7801546376:AAEr6x5nFu1aIdVUusPzZsJscdL6zzFF6bM';
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// ID –∫–∞–Ω–∞–ª–∞
const CHANNEL_ID = -1002876590285;

console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
const userStates = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
const STATES = {
  WAITING_EMAIL: 'waiting_email',
  WAITING_PHONE: 'waiting_phone', 
  WAITING_FULL_NAME: 'waiting_full_name',
  CONFIRMING_DATA: 'confirming_data'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function isValidPhone(phone) {
  const phoneRegex = /^(\+7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;
  return phoneRegex.test(phone.replace(/[\s\-\(\)]/g, ''));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function formatPhone(phone) {
  const cleaned = phone.replace(/[\s\-\(\)]/g, '');
  if (cleaned.startsWith('8')) {
    return '+7' + cleaned.substring(1);
  } else if (cleaned.startsWith('7')) {
    return '+' + cleaned;
  } else if (cleaned.startsWith('+7')) {
    return cleaned;
  }
  return '+7' + cleaned;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
async function startDataCollection(userId, paymentSystem = 'yukassa', enableAuto = false) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingData = await getUserPaymentData(userId);
    
    if (existingData && existingData.email && existingData.phone && existingData.full_name) {
      // –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
      await createPaymentWithData(userId, paymentSystem, enableAuto);
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    userStates.set(userId, {
      state: STATES.WAITING_EMAIL,
      paymentSystem,
      enableAuto,
      data: {
        email: existingData?.email || '',
        phone: existingData?.phone || '',
        full_name: existingData?.full_name || ''
      }
    });

    const message = `üìã *–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ –Ω—É–∂–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:

_–ü—Ä–∏–º–µ—Ä: ivan@example.com_`;

    await bot.sendMessage(userId, message, { 
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_payment' }]
        ]
      }
    });

    await addMessage(userId, message, true, 'data_collection');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
    await bot.sendMessage(userId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async function createPaymentWithData(userId, paymentSystem, enableAuto) {
  try {
    const user = await getUser(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const payment = await createSubscriptionPayment(userId, user, paymentSystem, enableAuto);
    
    const systemName = paymentSystem === 'cryptocloud' ? 'CryptoCloud' : '–ÆKassa';
    const autoText = enableAuto ? ' —Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞–º–∏' : '';
    
    const message = `‚úÖ *–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ ${systemName}${autoText}*

üí∞ –°—É–º–º–∞: ${payment.amount}‚ÇΩ
üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:

${payment.confirmationUrl}

${enableAuto ? 'üîÑ –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç' : ''}`;

    const keyboard = [
      [{ text: 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url: payment.confirmationUrl }]
    ];

    if (enableAuto) {
      keyboard.push([{ text: 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subscription_status' }]);
    }

    await bot.sendMessage(userId, message, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });

    await addMessage(userId, message, true, 'payment_created');
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(userId);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    await bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`);
    userStates.delete(userId);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
async function handleDataCollection(userId, text) {
  const userState = userStates.get(userId);
  if (!userState) return false;

  try {
    switch (userState.state) {
      case STATES.WAITING_EMAIL:
        if (!isValidEmail(text)) {
          await bot.sendMessage(userId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:');
          return true;
        }
        
        userState.data.email = text.toLowerCase();
        userState.state = STATES.WAITING_PHONE;
        
        await bot.sendMessage(userId, `‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${text}

üì± –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:

_–ü—Ä–∏–º–µ—Ä: +7 999 123 45 67 –∏–ª–∏ 8 999 123 45 67_`, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_payment' }]
            ]
          }
        });
        return true;

      case STATES.WAITING_PHONE:
        if (!isValidPhone(text)) {
          await bot.sendMessage(userId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
          return true;
        }
        
        userState.data.phone = formatPhone(text);
        userState.state = STATES.WAITING_FULL_NAME;
        
        await bot.sendMessage(userId, `‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${userState.data.phone}

üë§ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:

_–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á_`, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_payment' }]
            ]
          }
        });
        return true;

      case STATES.WAITING_FULL_NAME:
        if (text.trim().length < 3) {
          await bot.sendMessage(userId, '‚ùå –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:');
          return true;
        }
        
        userState.data.full_name = text.trim();
        userState.state = STATES.CONFIRMING_DATA;
        
        const confirmMessage = `üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*

üìß Email: ${userState.data.email}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${userState.data.phone}
üë§ –§–ò–û: ${userState.data.full_name}

–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?`;

        await bot.sendMessage(userId, confirmMessage, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ', callback_data: 'confirm_data' },
                { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: 'edit_data' }
              ],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_payment' }]
            ]
          }
        });
        return true;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
    await bot.sendMessage(userId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    userStates.delete(userId);
  }

  return false;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const userId = msg.from.id;
  const user = msg.from;

  try {
    await addOrUpdateUser(user);
    await addMessage(userId, '/start', false, 'command');

    const message = `üé≠ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"!*

–ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:
‚ú® –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π —é–º–æ—Ä
‚ú® –°—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ  
‚ú® –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 10 —Ä—É–±–ª–µ–π –Ω–∞ 30 –¥–Ω–µ–π*

üëá *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ* üëá`;

    const keyboard = [
      [{ text: 'üí≥ –û–±—ã—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (10‚ÇΩ)', callback_data: 'get_subscription_yukassa' }],
      [{ text: 'üîÑ –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ (10‚ÇΩ)', callback_data: 'get_auto_subscription_yukassa' }],
      [{ text: '‚Çø –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ (50‚ÇΩ)', callback_data: 'get_subscription_cryptocloud' }],
      [{ text: 'üìã –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about_channel' }],
      [{ text: 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subscription_status' }],
      [{ text: 'üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏', callback_data: 'disable_autopayments' }]
    ];

    await bot.sendMessage(userId, message, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });

    await addMessage(userId, message, true, 'welcome');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start:', error);
    await bot.sendMessage(userId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  if (msg.text && msg.text.startsWith('/')) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã

  const userId = msg.from.id;
  const text = msg.text;

  try {
    await addOrUpdateUser(msg.from);
    await addMessage(userId, text, false, 'text');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    if (await handleDataCollection(userId, text)) {
      return; // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    }

    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    const message = `–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! 

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:`;

    const keyboard = [
      [{ text: 'üí≥ –û–±—ã—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (10‚ÇΩ)', callback_data: 'get_subscription_yukassa' }],
      [{ text: 'üîÑ –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ (10‚ÇΩ)', callback_data: 'get_auto_subscription_yukassa' }],
      [{ text: '‚Çø –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ (50‚ÇΩ)', callback_data: 'get_subscription_cryptocloud' }],
      [{ text: 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subscription_status' }]
    ];

    await bot.sendMessage(userId, message, {
      reply_markup: { inline_keyboard: keyboard }
    });

    await addMessage(userId, message, true, 'auto_reply');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  const messageId = callbackQuery.message.message_id;

  try {
    await addOrUpdateUser(callbackQuery.from);
    await addMessage(userId, `–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${data}`, false, 'button');

    switch (data) {
      case 'get_subscription_yukassa':
        await startDataCollection(userId, 'yukassa', false);
        break;

      case 'get_auto_subscription_yukassa':
        await startDataCollection(userId, 'yukassa', true);
        break;

      case 'get_subscription_cryptocloud':
        await startDataCollection(userId, 'cryptocloud', false);
        break;

      case 'confirm_data':
        const userState = userStates.get(userId);
        if (userState && userState.state === STATES.CONFIRMING_DATA) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
          await updateUserPaymentData(userId, userState.data);
          
          // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
          await createPaymentWithData(userId, userState.paymentSystem, userState.enableAuto);
        }
        break;

      case 'edit_data':
        const editState = userStates.get(userId);
        if (editState) {
          editState.state = STATES.WAITING_EMAIL;
          await bot.sendMessage(userId, '‚úèÔ∏è –î–∞–≤–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ–¥–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à email:');
        }
        break;

      case 'cancel_payment':
        userStates.delete(userId);
        await bot.sendMessage(userId, '‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.');
        break;

      case 'disable_autopayments':
        try {
          const paymentMethods = await getUserPaymentMethods(userId);
          let disabledCount = 0;
          
          for (const method of paymentMethods) {
            if (method.auto_payments_enabled) {
              await disableAutoPayments(method.payment_method_id);
              disabledCount++;
            }
          }
          
          const disableMessage = disabledCount > 0 
            ? `üö´ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã!

–û—Ç–∫–ª—é—á–µ–Ω–æ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: ${disabledCount}

–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è.`
            : `‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π.

–í—Å–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.`;

          await bot.sendMessage(userId, disableMessage, {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subscription_status' }],
                [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
              ]
            }
          });

          await addMessage(userId, disableMessage, true, 'autopayments_disabled');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π:', error);
          await bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'about_channel':
        const aboutMessage = `üìã *–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ*

*–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á* - —ç—Ç–æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∫–ª—É–± –ø–æ —é–º–æ—Ä—É. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–æ —à—É—Ç–∏—Ç—å –∏ –ª–µ–≥–∫–æ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ–ª–æ–≤–∫–∏–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏ - —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É.

üéØ *–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –Ω–µ–¥–µ–ª—å —Ç—ã:*
‚Ä¢ –õ–µ–≥–∫–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—à—å –ª—é–±—ã–µ –Ω–µ–ª–æ–≤–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ —à—É—Ç–∫—É
‚Ä¢ –ë–æ–ª—å—à–µ –Ω–µ –¥—É–º–∞–µ—à—å: ¬´–ê —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ–±—ã –±—ã–ª–æ —Å–º–µ—à–Ω–æ?¬ª
‚Ä¢ –ù–∞—á–∞–ª –¥—É–º–∞—Ç—å –ø–æ-–Ω–æ–≤–æ–º—É!

üìö *–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ —é–º–æ—Ä—É, –ø–æ–¥–∞—á–µ, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
‚Ä¢ –ü—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã —Å–æ –°—Ç–∞—Å–æ–º –ï—Ä–Ω–∏–∫–æ–º
‚Ä¢ –° –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞–º –ø–æ —é–º–æ—Ä—É, –ø–æ–¥–±–æ—Ä–∫–∞–º –ø–∞–Ω—á–µ–π –∏ –≤–µ–±–∏–Ω–∞—Ä–∞–º

üë• –ò –≤—Å—ë —ç—Ç–æ —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ: —Å–º–µ—é—Ç—Å—è –Ω–∞–¥ —Ç–≤–æ–∏–º–∏ —à—É—Ç–∫–∞–º–∏ –∏ –ø–æ–º–æ–≥–∞—é—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ. –ó–¥–µ—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ —É—á–∏—Ç—å—Å—è, –ø—Ä–æ–±–æ–≤–∞—Ç—å, –æ—à–∏–±–∞—Ç—å—Å—è –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Å–º–µ—à–Ω–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

üèÜ *–ê —Ç–∞–∫–∂–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å —à—É—Ç–æ–∫!* –õ—É—á—à–∞—è –∑–∞–±–∏—Ä–∞–µ—Ç 1000 —Ä—É–±–ª–µ–π. –ü—Ä–æ—Å—Ç–æ –∑–∞ —Ö–æ—Ä–æ—à–∏–π –ø–∞–Ω—á. –í –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ —Å—É–ø–µ—Ä –ø—Ä–∏–∑. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 100 000 —Ä—É–±–ª–µ–π!

üí∞ *–í—Å—ë —ç—Ç–æ - –≤—Å–µ–≥–æ –∑–∞ 10 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü.*

üöÄ *–ü–æ–ø–∞–¥–∞—è –≤ –ü–µ—Ä–≤—ã–π –ü–∞–Ω—á —Ç—ã:*
‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—à—å –ø–æ–Ω–∏–º–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É —é–º–æ—Ä–∞
‚Ä¢ –°—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ
‚Ä¢ –¢–µ–±—è –±–æ–ª—å—à–µ —Å–ª—É—à–∞—é—Ç
‚Ä¢ –õ–µ–≥—á–µ –∑–∞–≤–æ–¥–∏—à—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞

–≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –∏ –≤ —Ä–∞–±–æ—Ç–µ, –∏ –≤ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ, –∏ –ø—Ä–æ—Å—Ç–æ –≤ –∂–∏–∑–Ω–∏.

üëá *–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –Ω–∏–∂–µ*`;

        const aboutKeyboard = [
          [{ text: 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'get_subscription_yukassa' }],
          [{ text: 'üîÑ –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞', callback_data: 'get_auto_subscription_yukassa' }],
          [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ];

        await bot.editMessageText(aboutMessage, {
          chat_id: userId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: aboutKeyboard }
        });
        break;

      case 'subscription_status':
        const isActive = await isSubscriptionActive(userId);
        const statusMessage = isActive 
          ? `‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!*

üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"!

–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É:`
          : `‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞*

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:`;

        const statusKeyboard = isActive 
          ? [
              [{ text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/+SQUu4rWliGo5ZjRi' }],
              [{ text: 'üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏', callback_data: 'disable_autopayments' }],
              [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          : [
              [{ text: 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'get_subscription_yukassa' }],
              [{ text: 'üîÑ –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞', callback_data: 'get_auto_subscription_yukassa' }],
              [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ];

        await bot.editMessageText(statusMessage, {
          chat_id: userId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: statusKeyboard }
        });
        break;

      case 'main_menu':
        const mainMessage = `üé≠ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"!*

–ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:
‚ú® –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π —é–º–æ—Ä
‚ú® –°—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ  
‚ú® –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 10 —Ä—É–±–ª–µ–π –Ω–∞ 30 –¥–Ω–µ–π*

üëá *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ* üëá`;

        const mainKeyboard = [
          [{ text: 'üí≥ –û–±—ã—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (10‚ÇΩ)', callback_data: 'get_subscription_yukassa' }],
          [{ text: 'üîÑ –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ (10‚ÇΩ)', callback_data: 'get_auto_subscription_yukassa' }],
          [{ text: '‚Çø –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ (50‚ÇΩ)', callback_data: 'get_subscription_cryptocloud' }],
          [{ text: 'üìã –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about_channel' }],
          [{ text: 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subscription_status' }]
        ];

        await bot.editMessageText(mainMessage, {
          chat_id: userId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: mainKeyboard }
        });
        break;

      default:
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback:', data);
    }

    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
bot.on('chat_join_request', async (joinRequest) => {
  const userId = joinRequest.from.id;
  const chatId = joinRequest.chat.id;
  const chatTitle = joinRequest.chat.title;
  const requestDate = new Date(joinRequest.date * 1000).toISOString();

  try {
    console.log(`üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —á–∞—Ç ${chatTitle}`);

    await addOrUpdateUser(joinRequest.from);

    await addJoinRequest({
      chatId: chatId,
      chatTitle: chatTitle,
      userId: userId,
      date: requestDate,
      status: 'pending'
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    const hasActiveSubscription = await isSubscriptionActive(userId);

    if (hasActiveSubscription) {
      // –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
      await bot.approveChatJoinRequest(chatId, userId);
      await updateJoinRequestStatus(chatId, userId, 'approved');
      
      console.log(`‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const welcomeMessage = `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"!*

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.

üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º!`;

      await bot.sendMessage(userId, welcomeMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/+SQUu4rWliGo5ZjRi' }]
          ]
        }
      });

      await addMessage(userId, welcomeMessage, true, 'join_approved');
    } else {
      // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
      await bot.declineChatJoinRequest(chatId, userId);
      await updateJoinRequestStatus(chatId, userId, 'declined');
      
      console.log(`‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
      const subscriptionMessage = `‚ùå *–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –≤—Å–µ–≥–æ 10 —Ä—É–±–ª–µ–π –Ω–∞ 30 –¥–Ω–µ–π

üëá –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:`;

      const keyboard = [
        [{ text: 'üí≥ –û–±—ã—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (10‚ÇΩ)', callback_data: 'get_subscription_yukassa' }],
        [{ text: 'üîÑ –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ (10‚ÇΩ)', callback_data: 'get_auto_subscription_yukassa' }],
        [{ text: '‚Çø –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ (50‚ÇΩ)', callback_data: 'get_subscription_cryptocloud' }]
      ];

      await bot.sendMessage(userId, subscriptionMessage, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

      await addMessage(userId, subscriptionMessage, true, 'join_declined');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
bot.on('my_chat_member', async (update) => {
  const userId = update.from.id;
  const newStatus = update.new_chat_member.status;

  if (newStatus === 'kicked') {
    try {
      console.log(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
      await markUserAsBlocked(userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
    }
  }
});

// API Routes

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    bot: 'running',
    database: 'connected'
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', async (req, res) => {
  try {
    const users = await getAllUsers();
    res.json({ users });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', async (req, res) => {
  try {
    const stats = await getStats();
    res.json(stats);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/messages/:userId', async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    const messages = await getMessages(userId);
    res.json({ messages });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
app.post('/api/send-message', upload.single('media'), async (req, res) => {
  try {
    const { userId, message, mediaCaption, inlineKeyboard } = req.body;
    const mediaFile = req.file;

    if (!userId || (!message && !mediaFile)) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω userId –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ' });
    }

    const parsedUserId = parseInt(userId);
    let options = {};

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if (inlineKeyboard) {
      try {
        const keyboard = typeof inlineKeyboard === 'string' ? JSON.parse(inlineKeyboard) : inlineKeyboard;
        options.reply_markup = { inline_keyboard: keyboard };
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e);
      }
    }

    if (mediaFile) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
      const caption = mediaCaption || message || '';
      
      if (mediaFile.mimetype.startsWith('image/')) {
        await bot.sendPhoto(parsedUserId, mediaFile.path, { caption, ...options });
      } else if (mediaFile.mimetype.startsWith('video/')) {
        await bot.sendVideo(parsedUserId, mediaFile.path, { caption, ...options });
      } else {
        await bot.sendDocument(parsedUserId, mediaFile.path, { caption, ...options });
      }

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlinkSync(mediaFile.path);
      
      await addMessage(parsedUserId, caption || '–ú–µ–¥–∏–∞—Ñ–∞–π–ª', true, 'media');
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.sendMessage(parsedUserId, message, options);
      await addMessage(parsedUserId, message, true, 'admin');
    }

    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
app.post('/api/broadcast', upload.single('media'), async (req, res) => {
  try {
    const { userIds, message, mediaCaption, inlineKeyboard } = req.body;
    const mediaFile = req.file;

    if (!userIds || (!message && !mediaFile)) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã userIds –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ' });
    }

    const parsedUserIds = typeof userIds === 'string' ? JSON.parse(userIds) : userIds;
    let options = {};

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if (inlineKeyboard) {
      try {
        const keyboard = typeof inlineKeyboard === 'string' ? JSON.parse(inlineKeyboard) : inlineKeyboard;
        options.reply_markup = { inline_keyboard: keyboard };
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e);
      }
    }

    let successCount = 0;
    let errorCount = 0;

    for (const userId of parsedUserIds) {
      try {
        const parsedUserId = parseInt(userId);
        
        if (mediaFile) {
          const caption = mediaCaption || message || '';
          
          if (mediaFile.mimetype.startsWith('image/')) {
            await bot.sendPhoto(parsedUserId, mediaFile.path, { caption, ...options });
          } else if (mediaFile.mimetype.startsWith('video/')) {
            await bot.sendVideo(parsedUserId, mediaFile.path, { caption, ...options });
          } else {
            await bot.sendDocument(parsedUserId, mediaFile.path, { caption, ...options });
          }
          
          await addMessage(parsedUserId, caption || '–ú–µ–¥–∏–∞—Ñ–∞–π–ª', true, 'broadcast');
        } else {
          await bot.sendMessage(parsedUserId, message, options);
          await addMessage(parsedUserId, message, true, 'broadcast');
        }
        
        successCount++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
        errorCount++;
      }
    }

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –±—ã–ª
    if (mediaFile) {
      fs.unlinkSync(mediaFile.path);
    }

    res.json({ 
      success: true, 
      sent: successCount, 
      errors: errorCount,
      total: parsedUserIds.length 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
app.get('/api/join-requests', async (req, res) => {
  try {
    const requests = await getJoinRequests();
    res.json({ requests });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
app.post('/api/approve-join-request', async (req, res) => {
  try {
    const { chatId, userId } = req.body;

    if (!chatId || !userId) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã chatId –∏–ª–∏ userId' });
    }

    await bot.approveChatJoinRequest(chatId, userId);
    await updateJoinRequestStatus(chatId, userId, 'approved');

    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({ error: error.message });
  }
});

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
app.post('/api/decline-join-request', async (req, res) => {
  try {
    const { chatId, userId } = req.body;

    if (!chatId || !userId) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã chatId –∏–ª–∏ userId' });
    }

    await bot.declineChatJoinRequest(chatId, userId);
    await updateJoinRequestStatus(chatId, userId, 'declined');

    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
app.get('/api/subscriptions', async (req, res) => {
  try {
    const subscriptions = await getAllSubscriptions();
    res.json({ subscriptions });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
app.get('/api/payments', async (req, res) => {
  try {
    const payments = await getAllPayments();
    res.json({ payments });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
app.post('/api/update-subscription-status', async (req, res) => {
  try {
    const { subscriptionId, userId, status } = req.body;

    if (!subscriptionId || !userId || !status) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
    }

    await updateSubscriptionStatus(subscriptionId, userId, status);
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    res.status(500).json({ error: error.message });
  }
});

// Webhook –¥–ª—è –ÆKassa
app.post('/webhook/yukassa', async (req, res) => {
  try {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –ÆKassa:', JSON.stringify(req.body, null, 2));
    
    const { type, object } = req.body;
    
    if (type === 'payment.succeeded') {
      const payment = object;
      const userId = parseInt(payment.metadata.userId);
      const enableAutoPayments = payment.metadata.autoPayment === 'true';
      
      console.log(`üí∞ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω: ${payment.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ
      await updatePaymentStatus(payment.id, 'succeeded');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      await handleSuccessfulPayment(payment, enableAutoPayments);
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      await addSubscription(
        userId,
        payment.id,
        parseFloat(payment.amount.value),
        30, // 30 –¥–Ω–µ–π
        'yukassa',
        payment.payment_method?.id || null
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const user = await getUser(userId);
      if (user) {
        const message = enableAutoPayments 
          ? `‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!

üí≥ –°–ø–∏—Å–∞–Ω–æ: ${payment.amount.value}‚ÇΩ
üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π
üîÑ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤–∫–ª—é—á–µ–Ω—ã (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª!`
          : `‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!

üí≥ –°–ø–∏—Å–∞–Ω–æ: ${payment.amount.value}‚ÇΩ
üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª!`;

        const keyboard = [
          [{ text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/+SQUu4rWliGo5ZjRi' }],
          [{ text: 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subscription_status' }]
        ];

        if (enableAutoPayments) {
          keyboard.push([{ text: 'üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏', callback_data: 'disable_autopayments' }]);
        }

        await bot.sendMessage(userId, message, {
          reply_markup: { inline_keyboard: keyboard }
        });

        await addMessage(userId, message, true, 'payment_success');
      }
    }
    
    res.status(200).send('OK');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ÆKassa:', error);
    res.status(500).send('Error');
  }
});

// Webhook –¥–ª—è CryptoCloud
app.post('/webhook/cryptocloud', async (req, res) => {
  try {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç CryptoCloud:', JSON.stringify(req.body, null, 2));
    
    const signature = req.headers['x-signature'];
    const body = JSON.stringify(req.body);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    // if (!verifyCryptoCloudWebhook(body, signature)) {
    //   return res.status(400).send('Invalid signature');
    // }
    
    const { status, uuid, order_id, amount_crypto, amount_rub } = req.body;
    
    if (status === 'paid') {
      // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –ø–æ order_id –∏–ª–∏ uuid
      const payment = await getPaymentByPaymentId(uuid);
      
      if (payment) {
        const userId = payment.user_id;
        
        console.log(`üí∞ CryptoCloud –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω: ${uuid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        await updatePaymentStatus(uuid, 'succeeded');
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await addSubscription(
          userId,
          uuid,
          parseFloat(amount_rub || payment.amount),
          30, // 30 –¥–Ω–µ–π
          'cryptocloud'
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const user = await getUser(userId);
        if (user) {
          const message = `‚úÖ –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!

üí∞ –°–ø–∏—Å–∞–Ω–æ: ${amount_rub || payment.amount}‚ÇΩ
üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª!`;

          const keyboard = [
            [{ text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/+SQUu4rWliGo5ZjRi' }],
            [{ text: 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subscription_status' }]
          ];

          await bot.sendMessage(userId, message, {
            reply_markup: { inline_keyboard: keyboard }
          });

          await addMessage(userId, message, true, 'payment_success');
        }
      }
    }
    
    res.status(200).send('OK');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook CryptoCloud:', error);
    res.status(500).send('Error');
  }
});

// –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
startAutoPaymentScheduler();

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° Webhook URL: https://telegram-bot-first-punch.onrender.com/webhook/yukassa`);
  console.log(`üì° CryptoCloud Webhook URL: https://telegram-bot-first-punch.onrender.com/webhook/cryptocloud`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
});
