import express from 'express';
import cors from 'cors';
import path from 'path';
import TelegramBot from 'node-telegram-bot-api';
import { fileURLToPath } from 'url';
import multer from 'multer';
import { createSubscriptionPayment, getAvailablePaymentSystems } from './payments.js';
import { verifyWebhookSignature, createSimpleYukassaPayment, getYukassaPayment } from './yukassa.js';
import { verifyCryptoCloudWebhook, getCryptoCloudInvoice } from './cryptocloud.js';
import {
  addOrUpdateUser,
  markUserAsBlocked,
  getUser,
  getAllUsers,
  addMessage,
  getMessages,
  addJoinRequest,
  updateJoinRequestStatus,
  getJoinRequests,
  addSubscription,
  isSubscriptionActive,
  getUserSubscription,
  getAllSubscriptions,
  updateSubscriptionStatus,
  addPayment,
  updatePaymentStatus,
  getPaymentByPaymentId,
  getAllPayments,
  getStats
} from './lib/supabase.js';

// –ü–æ–ª—É—á–∞–µ–º __dirname –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
// Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ—Ä—Ç
const PORT = process.env.PORT || 10000;

const BOT_TOKEN = '7801546376:AAEr6x5nFu1aIdVUusPzZsJscdL6zzFF6bM';

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB
  }
});

// –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –û–¢–ö–†–´–¢–´–ï CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'HEAD', 'PATCH'],
  allowedHeaders: '*',
  credentials: false,
  optionsSuccessStatus: 200
}));

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', '*');
  res.header('Access-Control-Allow-Headers', '*');
  res.header('Access-Control-Max-Age', '86400');
  
  console.log(`üì® ${req.method} ${req.url} from ${req.get('Origin') || 'unknown'}`);
  
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ Preflight request handled');
    return res.status(200).end();
  }
  
  next();
});

// Middleware –¥–ª—è webhook (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–û express.json())
app.use('/api/yukassa-webhook', express.raw({ type: 'application/json' }));
app.use('/api/cryptocloud-webhook', express.raw({ type: 'application/json' }));

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ó–ê–Ø–í–ö–ê–ú–ò ====================

async function approveJoinRequest(chatId, userId) {
  try {
    await bot.approveChatJoinRequest(chatId, userId);
    await updateJoinRequestStatus(chatId, userId, 'approved');
    console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    throw error;
  }
}

async function declineJoinRequest(chatId, userId) {
  try {
    await bot.declineChatJoinRequest(chatId, userId);
    await updateJoinRequestStatus(chatId, userId, 'declined');
    console.log(`‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    throw error;
  }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–î–ü–ò–°–ö–ê–ú–ò ====================

async function cancelUserSubscription(userId) {
  try {
    console.log(`üö´ –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const subscription = await getUserSubscription(userId);
    
    if (subscription && subscription.status === 'active') {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ cancelled
      await updateSubscriptionStatus(subscription.id, userId, 'cancelled');
      
      console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    return false;
  }
}

async function getSubscriptionInfo(userId) {
  try {
    const subscription = await getUserSubscription(userId);
    const isActive = await isSubscriptionActive(userId);
    
    return {
      hasSubscription: !!subscription,
      isActive: isActive,
      subscription: subscription
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ:', error);
    return {
      hasSubscription: false,
      isActive: false,
      subscription: null
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ Telegram API
function getMediaSendMethod(mimeType) {
  console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞:', mimeType);
  
  if (mimeType.startsWith('image/')) {
    console.log('üì∏ –¢–∏–ø: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ -> sendPhoto');
    return 'sendPhoto';
  } else if (mimeType.startsWith('video/')) {
    console.log('üé• –¢–∏–ø: –≤–∏–¥–µ–æ -> sendVideo');
    return 'sendVideo';
  } else if (mimeType.startsWith('audio/')) {
    console.log('üéµ –¢–∏–ø: –∞—É–¥–∏–æ -> sendAudio');
    return 'sendAudio';
  } else if (mimeType === 'application/pdf' || 
             mimeType.includes('document') || 
             mimeType.includes('text/') ||
             mimeType.includes('application/')) {
    console.log('üìÑ –¢–∏–ø: –¥–æ–∫—É–º–µ–Ω—Ç -> sendDocument');
    return 'sendDocument';
  } else {
    console.log('üìé –¢–∏–ø: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π -> sendDocument (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
    return 'sendDocument';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Telegram API
async function sendMediaToTelegram(userId, file, options = {}) {
  const sendMethod = getMediaSendMethod(file.mimetype);
  
  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${sendMethod} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  console.log(`üìã –§–∞–π–ª: ${file.originalname}, —Ä–∞–∑–º–µ—Ä: ${file.size} –±–∞–π—Ç, —Ç–∏–ø: ${file.mimetype}`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    const fileOptions = {
      filename: file.originalname,
      contentType: file.mimetype
    };
    
    let result;
    
    switch (sendMethod) {
      case 'sendPhoto':
        result = await bot.sendPhoto(userId, file.buffer, options, fileOptions);
        break;
      case 'sendVideo':
        // –î–ª—è –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        const videoOptions = {
          ...options,
          supports_streaming: true, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
          duration: undefined, // Telegram –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          width: undefined, // Telegram –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          height: undefined // Telegram –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        };
        result = await bot.sendVideo(userId, file.buffer, videoOptions, fileOptions);
        break;
      case 'sendAudio':
        result = await bot.sendAudio(userId, file.buffer, options, fileOptions);
        break;
      case 'sendDocument':
      default:
        result = await bot.sendDocument(userId, file.buffer, options, fileOptions);
        break;
    }
    
    console.log(`‚úÖ ${sendMethod} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    return result;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${sendMethod} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    throw error;
  }
}

// ==================== API ENDPOINTS ====================

// Health check endpoint
app.get('/health', (req, res) => {
  console.log('üè• Health check –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  try {
    res.status(200).json({ 
      status: 'ok', 
      service: 'telegram-bot-first-punch',
      timestamp: new Date().toISOString(),
      port: PORT,
      env: process.env.NODE_ENV || 'production',
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      database: 'supabase',
      paymentSystems: ['yukassa', 'cryptocloud']
    });
  } catch (error) {
    console.error('‚ùå Health check error:', error);
    res.status(500).json({ status: 'error', error: error.message });
  }
});

// –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
app.get('/', (req, res) => {
  console.log('üè† –ö–æ—Ä–Ω–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  res.json({ 
    message: 'Telegram Bot "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" API Server', 
    status: 'running',
    timestamp: new Date().toISOString(),
    database: 'supabase',
    paymentSystems: ['yukassa', 'cryptocloud'],
    endpoints: {
      health: '/health',
      api: '/api/*'
    }
  });
});

// API endpoints
app.get('/api/users', async (req, res) => {
  try {
    console.log('üë• –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    const users = await getAllUsers();
    
    const usersWithSubscriptionStatus = await Promise.all(
      users.map(async (user) => {
        const hasActiveSubscription = await isSubscriptionActive(user.id);
        return {
          ...user,
          subscription_active: hasActiveSubscription
        };
      })
    );
    
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${usersWithSubscriptionStatus.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    res.json({ users: usersWithSubscriptionStatus });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/api/stats', async (req, res) => {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    const stats = await getStats();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', stats);
    res.json(stats);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/api/messages/:userId', async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    console.log(`üí¨ –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    const userMessages = await getMessages(userId);
    
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${userMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    res.json({ messages: userMessages });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
app.post('/api/send-message', upload.single('media'), async (req, res) => {
  try {
    let userId, message, inlineKeyboard, mediaCaption;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª (FormData) –∏–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π JSON
    if (req.file) {
      // –ó–∞–ø—Ä–æ—Å —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º
      userId = parseInt(req.body.userId);
      message = req.body.message;
      mediaCaption = req.body.mediaCaption;
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ inlineKeyboard –¥–ª—è FormData
      if (req.body.inlineKeyboard && typeof req.body.inlineKeyboard === 'string') {
        try {
          inlineKeyboard = JSON.parse(req.body.inlineKeyboard);
        } catch (parseError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ inlineKeyboard:', parseError);
          inlineKeyboard = null;
        }
      } else {
        inlineKeyboard = req.body.inlineKeyboard || null;
      }
      
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${req.file.originalname}`);
      console.log(`üìã –¢–∏–ø —Ñ–∞–π–ª–∞: ${req.file.mimetype}, —Ä–∞–∑–º–µ—Ä: ${req.file.size} –±–∞–π—Ç`);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
      const options = {
        caption: mediaCaption || message || ''
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
      if (inlineKeyboard && Array.isArray(inlineKeyboard) && inlineKeyboard.length > 0) {
        options.reply_markup = {
          inline_keyboard: inlineKeyboard
        };
        console.log('‚å®Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', inlineKeyboard);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Telegram API...');
      await sendMediaToTelegram(userId, req.file, options);
      console.log('‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      
    } else {
      // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const data = req.body;
      userId = data.userId;
      message = data.message;
      inlineKeyboard = data.inlineKeyboard;
      
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${message}`);
      
      if (!userId || !message) {
        return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω userId –∏–ª–∏ message' });
      }
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
      const options = {};
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
      if (inlineKeyboard && Array.isArray(inlineKeyboard) && inlineKeyboard.length > 0) {
        options.reply_markup = {
          inline_keyboard: inlineKeyboard
        };
        console.log('‚å®Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', inlineKeyboard);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.sendMessage(userId, message, options);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await addMessage(userId, message || mediaCaption || '–ú–µ–¥–∏–∞—Ñ–∞–π–ª', true, 'admin');
    
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î');
    res.json({ success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    
    if (error.code === 403) {
      await markUserAsBlocked(parseInt(userId));
      res.status(403).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞' });
    } else {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', details: error.message });
    }
  }
});

app.post('/api/broadcast', upload.single('media'), async (req, res) => {
  try {
    let userIds, message, inlineKeyboard, mediaCaption;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª (FormData) –∏–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π JSON
    if (req.file) {
      // –ó–∞–ø—Ä–æ—Å —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º
      try {
        userIds = JSON.parse(req.body.userIds);
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ userIds:', parseError);
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç userIds' });
      }
      
      message = req.body.message;
      mediaCaption = req.body.mediaCaption;
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ inlineKeyboard –¥–ª—è FormData
      if (req.body.inlineKeyboard && typeof req.body.inlineKeyboard === 'string') {
        try {
          inlineKeyboard = JSON.parse(req.body.inlineKeyboard);
        } catch (parseError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ inlineKeyboard:', parseError);
          inlineKeyboard = null;
        }
      } else {
        inlineKeyboard = req.body.inlineKeyboard || null;
      }
      
      console.log(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: ${req.file.originalname}`);
      console.log(`üìã –¢–∏–ø —Ñ–∞–π–ª–∞: ${req.file.mimetype}, —Ä–∞–∑–º–µ—Ä: ${req.file.size} –±–∞–π—Ç`);
      
    } else {
      // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const data = req.body;
      userIds = data.userIds;
      message = data.message;
      inlineKeyboard = data.inlineKeyboard;
      
      console.log(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
    }
    
    if (!userIds || !Array.isArray(userIds) || (!message && !req.file)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
    }
    
    let sent = 0;
    let errors = 0;
    
    for (const userId of userIds) {
      try {
        if (req.file) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
          const options = {
            caption: mediaCaption || message || ''
          };
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
          if (inlineKeyboard && Array.isArray(inlineKeyboard) && inlineKeyboard.length > 0) {
            options.reply_markup = {
              inline_keyboard: inlineKeyboard
            };
          }
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
          await sendMediaToTelegram(userId, req.file, options);
          await addMessage(userId, mediaCaption || message || '–ú–µ–¥–∏–∞—Ñ–∞–π–ª', true, 'admin');
        } else {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const options = {};
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
          if (inlineKeyboard && Array.isArray(inlineKeyboard) && inlineKeyboard.length > 0) {
            options.reply_markup = {
              inline_keyboard: inlineKeyboard
            };
          }
          
          await bot.sendMessage(userId, message, options);
          await addMessage(userId, message, true, 'admin');
        }
        
        sent++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
        errors++;
        
        if (error.code === 403) {
          await markUserAsBlocked(userId);
        }
      }
    }
    
    console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sent}, –æ—à–∏–±–æ–∫ ${errors}`);
    res.json({ 
      success: true, 
      sent, 
      errors, 
      total: userIds.length,
      message: `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}, –æ—à–∏–±–æ–∫: ${errors}` 
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ', details: error.message });
  }
});

app.get('/api/join-requests', async (req, res) => {
  try {
    console.log('üìã –ó–∞–ø—Ä–æ—Å –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ');
    const requests = await getJoinRequests();
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${requests.length} –∑–∞—è–≤–æ–∫`);
    res.json({ requests });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/approve-join-request', async (req, res) => {
  try {
    const { chatId, userId } = req.body;
    console.log(`‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏: chat ${chatId}, user ${userId}`);
    
    if (!chatId || !userId) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω chatId –∏–ª–∏ userId' });
    }
    
    await approveJoinRequest(chatId, userId);
    res.json({ success: true, message: '–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞' });
  }
});

app.post('/api/decline-join-request', async (req, res) => {
  try {
    const { chatId, userId } = req.body;
    console.log(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏: chat ${chatId}, user ${userId}`);
    
    if (!chatId || !userId) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω chatId –∏–ª–∏ userId' });
    }
    
    await declineJoinRequest(chatId, userId);
    res.json({ success: true, message: '–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞' });
  }
});

app.get('/api/subscriptions', async (req, res) => {
  try {
    console.log('üí≥ –ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–æ–∫');
    const subscriptions = await getAllSubscriptions();
    const users = await getAllUsers();
    
    const subscriptionsWithUsers = subscriptions.map(subscription => {
      const user = users.find(u => u.id === subscription.user_id);
      return {
        ...subscription,
        user: user ? {
          username: user.username,
          first_name: user.first_name,
          last_name: user.last_name
        } : null
      };
    });
    
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${subscriptionsWithUsers.length} –ø–æ–¥–ø–∏—Å–æ–∫`);
    res.json({ subscriptions: subscriptionsWithUsers });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/api/payments', async (req, res) => {
  try {
    console.log('üí∞ –ó–∞–ø—Ä–æ—Å –ø–ª–∞—Ç–µ–∂–µ–π');
    const payments = await getAllPayments();
    const users = await getAllUsers();
    
    const paymentsWithUsers = payments.map(payment => {
      const user = users.find(u => u.id === payment.user_id);
      return {
        ...payment,
        user: user ? {
          username: user.username,
          first_name: user.first_name,
          last_name: user.last_name
        } : null
      };
    });
    
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${paymentsWithUsers.length} –ø–ª–∞—Ç–µ–∂–µ–π`);
    res.json({ payments: paymentsWithUsers });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/update-subscription-status', async (req, res) => {
  try {
    const { subscriptionId, userId, status } = req.body;
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscriptionId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ ${status}`);
    
    if (!subscriptionId || !userId || !status) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
    }
    
    const success = await updateSubscriptionStatus(subscriptionId, userId, status);
    
    if (success) {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
      res.json({ success: true, message: '–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω' });
    } else {
      res.status(404).json({ error: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
app.post('/api/create-payment', async (req, res) => {
  try {
    const { userId, paymentSystem = 'yukassa' } = req.body;
    console.log(`üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —á–µ—Ä–µ–∑ ${paymentSystem}`);
    
    if (!userId) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω userId' });
    }
    
    const user = await getUser(userId);
    
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
    
    const payment = await createSubscriptionPayment(userId, user, paymentSystem);
    
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', payment);
    res.json({ 
      success: true, 
      payment: {
        paymentId: payment.paymentId,
        confirmationUrl: payment.confirmationUrl,
        amount: payment.amount,
        status: payment.status,
        paymentSystem: payment.paymentSystem,
        minAmount: payment.minAmount
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞',
      details: error.message 
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
app.get('/api/payment-systems', (req, res) => {
  try {
    const systems = getAvailablePaymentSystems();
    res.json({ paymentSystems: systems });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
app.get('/api/check-payment-status/:paymentId', async (req, res) => {
  try {
    const { paymentId } = req.params;
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: ${paymentId}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    const dbPayment = await getPaymentByPaymentId(paymentId);
    
    if (!dbPayment) {
      return res.status(404).json({ error: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    let payment;
    
    if (dbPayment.payment_system === 'cryptocloud') {
      payment = await getCryptoCloudInvoice(paymentId);
      res.json({
        paymentId: payment.uuid,
        status: payment.status,
        amount: payment.amount,
        paymentSystem: 'cryptocloud'
      });
    } else {
      // –ÆKassa –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ÆKassa)
      payment = await getYukassaPayment(paymentId);
      res.json({
        paymentId: payment.id,
        status: payment.status,
        amount: payment.amount.value,
        paymentSystem: 'yukassa'
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞' });
  }
});

// Webhook –¥–ª—è –ÆKassa
app.post('/api/yukassa-webhook', async (req, res) => {
  try {
    console.log('üîî –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –ÆKassa');
    
    const signature = req.headers['x-yookassa-signature'];
    const body = req.body.toString();
    
    const event = JSON.parse(body);
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ webhook –ÆKassa:', event);
    
    if (event.event === 'payment.succeeded') {
      const payment = event.object;
      console.log(`üí∞ –ü–ª–∞—Ç–µ–∂ –ÆKassa —É—Å–ø–µ—à–µ–Ω: ${payment.id}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await updatePaymentStatus(payment.id, 'succeeded');
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      const userId = parseInt(payment.metadata.userId);
      const amount = parseFloat(payment.amount.value);
      
      if (userId) {
        await addSubscription(userId, payment.id, amount, 30, 'yukassa');
        console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —á–µ—Ä–µ–∑ –ÆKassa`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await sendSubscriptionSuccessMessage(userId, amount, '–ÆKassa');
      }
    } else if (event.event === 'payment.canceled') {
      const payment = event.object;
      console.log(`‚ùå –ü–ª–∞—Ç–µ–∂ –ÆKassa –æ—Ç–º–µ–Ω–µ–Ω: ${payment.id}`);
      await updatePaymentStatus(payment.id, 'cancelled');
    }
    
    res.status(200).json({ success: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ÆKassa:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook' });
  }
});

// Webhook –¥–ª—è CryptoCloud
app.post('/api/cryptocloud-webhook', async (req, res) => {
  try {
    console.log('üîî –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç CryptoCloud');
    
    const signature = req.headers['x-cryptocloud-signature'];
    const body = req.body.toString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    // const isValidSignature = verifyCryptoCloudWebhook(body, signature);
    // if (!isValidSignature) {
    //   console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook CryptoCloud');
    //   return res.status(400).json({ error: 'Invalid signature' });
    // }
    
    const event = JSON.parse(body);
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ webhook CryptoCloud:', event);
    
    if (event.status === 'paid' || event.status === 'success') {
      console.log(`üí∞ –ü–ª–∞—Ç–µ–∂ CryptoCloud —É—Å–ø–µ—à–µ–Ω: ${event.uuid}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await updatePaymentStatus(event.uuid, 'paid');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
      let metadata = {};
      try {
        if (event.metadata) {
          metadata = JSON.parse(event.metadata);
        }
      } catch (e) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ CryptoCloud');
      }
      
      const userId = parseInt(metadata.userId || event.user_id);
      const amount = parseFloat(event.amount);
      
      if (userId) {
        await addSubscription(userId, event.uuid, amount, 30, 'cryptocloud');
        console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —á–µ—Ä–µ–∑ CryptoCloud`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await sendSubscriptionSuccessMessage(userId, amount, 'CryptoCloud');
      }
    } else if (event.status === 'cancelled' || event.status === 'failed') {
      console.log(`‚ùå –ü–ª–∞—Ç–µ–∂ CryptoCloud –æ—Ç–º–µ–Ω–µ–Ω/–Ω–µ—É—Å–ø–µ—à–µ–Ω: ${event.uuid}`);
      await updatePaymentStatus(event.uuid, 'cancelled');
    }
    
    res.status(200).json({ success: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook CryptoCloud:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook' });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
async function sendSubscriptionSuccessMessage(userId, amount, paymentSystem) {
  try {
    const endDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);
    const message = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

üí≥ –ü–ª–∞—Ç–µ–∂: ${amount}‚ÇΩ —á–µ—Ä–µ–∑ ${paymentSystem}
üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDate.toLocaleDateString('ru-RU')}
üîÑ –¢–∏–ø: –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞

‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–æ –ù–ï –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂! –ó–∞ –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª!`;

    const options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üöÄ –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/+SQUu4rWliGo5ZjRi' }
          ],
          [
            { text: 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subscription_status' }
          ]
        ]
      }
    };

    await bot.sendMessage(userId, message, options);
    await addMessage(userId, message, true, 'system');
  } catch (msgError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', msgError);
  }
}

// ==================== TELEGRAM BOT HANDLERS ====================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
bot.on('chat_join_request', async (joinRequest) => {
  console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:', joinRequest);
  
  try {
    await addOrUpdateUser(joinRequest.from);
    
    const hasActiveSubscription = await isSubscriptionActive(joinRequest.from.id);
    
    const requestData = {
      chatId: joinRequest.chat.id,
      chatTitle: joinRequest.chat.title,
      userId: joinRequest.from.id,
      status: hasActiveSubscription ? 'approved' : 'pending',
      date: new Date(joinRequest.date * 1000).toISOString(),
      processed_at: hasActiveSubscription ? new Date().toISOString() : null
    };
    
    await addJoinRequest(requestData);
    
    if (hasActiveSubscription) {
      try {
        await bot.approveChatJoinRequest(joinRequest.chat.id, joinRequest.from.id);
        console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π ${joinRequest.from.first_name} (ID: ${joinRequest.from.id})`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
      }
    } else {
      console.log(`‚è≥ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç ${joinRequest.from.first_name} (ID: ${joinRequest.from.id}) - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      const message = `‚ùå –î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç 10‚ÇΩ –≤ –º–µ—Å—è—Ü
‚è∞ –°—Ä–æ–∫: 30 –¥–Ω–µ–π
üîÑ –ë–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`;

      const paymentSystems = getAvailablePaymentSystems();
      const keyboard = paymentSystems.map(system => [
        { 
          text: `${system.icon} ${system.name} (–æ—Ç ${system.minAmount}‚ÇΩ)`, 
          callback_data: `get_subscription_${system.id}` 
        }
      ]);
      
      keyboard.push([
        { text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ', callback_data: 'about_channel' }
      ]);

      const options = {
        reply_markup: {
          inline_keyboard: keyboard
        }
      };

      try {
        await bot.sendMessage(joinRequest.from.id, message, options);
        await addMessage(joinRequest.from.id, message, true, 'system');
      } catch (msgError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:', msgError);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const user = msg.from;
  
  try {
    await addOrUpdateUser(user);
    await addMessage(chatId, '/start', false, 'command');
    
    const subscriptionInfo = await getSubscriptionInfo(user.id);
    
    let subscriptionText = '';
    let mainButtons = [];
    
    if (subscriptionInfo.isActive && subscriptionInfo.subscription) {
      const endDate = new Date(subscriptionInfo.subscription.end_date);
      const daysLeft = Math.ceil((endDate - new Date()) / (1000 * 60 * 60 * 24));
      const paymentSystem = subscriptionInfo.subscription.payment_system || '–ÆKassa';
      
      subscriptionText = `\n\n‚úÖ *–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞*
üí≥ –û–ø–ª–∞—á–µ–Ω–æ —á–µ—Ä–µ–∑: ${paymentSystem}
üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDate.toLocaleDateString('ru-RU')}
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}
üîÑ –ë–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è`;
      
      mainButtons = [
        [{ text: 'üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π', callback_data: 'subscription_management' }],
        [{ text: 'üöÄ –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/+SQUu4rWliGo5ZjRi' }]
      ];
    } else {
      const paymentSystems = getAvailablePaymentSystems();
      mainButtons = paymentSystems.map(system => [
        { 
          text: `${system.icon} ${system.name} (–æ—Ç ${system.minAmount}‚ÇΩ)`, 
          callback_data: `get_subscription_${system.id}` 
        }
      ]);
    }
    
    const welcomeMessage = `üé≠ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"!*

–ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:
‚ú® –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π —é–º–æ—Ä
‚ú® –°—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ  
‚ú® –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

üí∞ *–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –æ—Ç 10 —Ä—É–±–ª–µ–π –Ω–∞ 30 –¥–Ω–µ–π*
üîÑ *–ë–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è - –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å*${subscriptionText}

üëá *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ* üëá`;

    const additionalButtons = [
      [{ text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ', callback_data: 'about_channel' }],
      [{ text: 'üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data: 'feedback' }],
      [{ text: '‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', url: 'https://teletype.in/@tellmonster/JSyG1E5bs-b' }]
    ];

    const options = {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [...mainButtons, ...additionalButtons]
      }
    };

    await bot.sendMessage(chatId, welcomeMessage, options);
    await addMessage(chatId, welcomeMessage, true, 'text');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
bot.onText(/\/status/, async (msg) => {
  const chatId = msg.chat.id;
  const user = msg.from;
  
  try {
    await addOrUpdateUser(user);
    await addMessage(chatId, '/status', false, 'command');
    
    const subscriptionInfo = await getSubscriptionInfo(user.id);
    
    let statusMessage = '';
    let buttons = [];
    
    if (subscriptionInfo.isActive && subscriptionInfo.subscription) {
      const endDate = new Date(subscriptionInfo.subscription.end_date);
      const startDate = new Date(subscriptionInfo.subscription.start_date);
      const daysLeft = Math.ceil((endDate - new Date()) / (1000 * 60 * 60 * 24));
      const paymentSystem = subscriptionInfo.subscription.payment_system || '–ÆKassa';
      
      statusMessage = `üìä *–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏*

‚úÖ *–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–Ω–∞
üí≥ *–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:* ${paymentSystem}
üí∞ *–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:* ${subscriptionInfo.subscription.amount}‚ÇΩ
üìÖ *–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã:* ${startDate.toLocaleDateString('ru-RU')}
‚è∞ *–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* ${endDate.toLocaleDateString('ru-RU')}
üóì *–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:* ${daysLeft}

üîÑ *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è (–±–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è)
‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ó–∞ –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º—ã –Ω–∞–ø–æ–º–Ω–∏–º –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏

üöÄ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª!`;

      buttons = [
        [{ text: 'üöÄ –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/+SQUu4rWliGo5ZjRi' }],
        [{ text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'cancel_subscription' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ];
    } else {
      statusMessage = `üìä *–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏*

‚ùå *–°—Ç–∞—Ç—É—Å:* –ù–µ–∞–∫—Ç–∏–≤–Ω–∞
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* –æ—Ç 10‚ÇΩ –Ω–∞ 30 –¥–Ω–µ–π
üîÑ *–¢–∏–ø:* –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è (–±–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è)

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.`;

      const paymentSystems = getAvailablePaymentSystems();
      buttons = paymentSystems.map(system => [
        { 
          text: `${system.icon} ${system.name} (–æ—Ç ${system.minAmount}‚ÇΩ)`, 
          callback_data: `get_subscription_${system.id}` 
        }
      ]);
      
      buttons.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);
    }
    
    const options = {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: buttons
      }
    };
    
    await bot.sendMessage(chatId, statusMessage, options);
    await addMessage(chatId, statusMessage, true, 'text');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /status:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  if (msg.text && !msg.text.startsWith('/')) {
    const chatId = msg.chat.id;
    const user = msg.from;
    
    try {
      await addOrUpdateUser(user);
      await addMessage(chatId, msg.text, false, 'text');
      
      const responses = [
        'üëç –ü–æ–Ω—è–ª —Ç–µ–±—è!',
        'ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ...',
        'üí¨ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!',
        '‚ú® –û—Ç–ª–∏—á–Ω–æ!',
        'üìù –ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.',
        'üöÄ –ü–æ–ª—É—á–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!'
      ];
      
      const randomResponse = responses[Math.floor(Math.random() * responses.length)];
      
      const options = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      };
      
      await bot.sendMessage(chatId, randomResponse, options);
      await addMessage(chatId, randomResponse, true, 'text');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;
  const user = query.from;
  
  try {
    await addOrUpdateUser(user);
    await addMessage(chatId, `–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${data}`, false, 'button');
    
    let responseText = '';
    let options = {};
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    if (data.startsWith('get_subscription_')) {
      const paymentSystem = data.replace('get_subscription_', '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
      const subscriptionInfo = await getSubscriptionInfo(user.id);
      
      if (subscriptionInfo.isActive) {
        responseText = `‚úÖ *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!*

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: *${new Date(subscriptionInfo.subscription.end_date).toLocaleDateString('ru-RU')}*

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª.`;
        
        options = {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üöÄ –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/+SQUu4rWliGo5ZjRi' }],
              [{ text: 'üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π', callback_data: 'subscription_management' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
            ]
          }
        };
      } else {
        try {
          console.log(`üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ ${paymentSystem}:`, user);
          const payment = await createSubscriptionPayment(user.id, user, paymentSystem);
          
          const paymentSystemInfo = getAvailablePaymentSystems().find(ps => ps.id === paymentSystem);
          
          responseText = `üí≥ *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏*

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: *${payment.amount} —Ä—É–±–ª–µ–π*
üí≥ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: *${paymentSystemInfo?.name || paymentSystem}*
‚è∞ –°—Ä–æ–∫: *30 –¥–Ω–µ–π*
üîÑ *–ë–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è* - –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å

${paymentSystemInfo?.description || ''}

–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`;
          
          options = {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: `${paymentSystemInfo?.icon || 'üí≥'} –û–ø–ª–∞—Ç–∏—Ç—å ${payment.amount}‚ÇΩ`, url: payment.confirmationUrl }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
              ]
            }
          };
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–æ—Ç–µ:', error);
          responseText = `‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É.

*–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:* ${error.message}`;
          
          const paymentSystems = getAvailablePaymentSystems();
          const keyboard = paymentSystems.map(system => [
            { 
              text: `${system.icon} ${system.name} (–æ—Ç ${system.minAmount}‚ÇΩ)`, 
              callback_data: `get_subscription_${system.id}` 
            }
          ]);
          
          keyboard.push([{ text: 'üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', url: 'https://t.me/johnyestet' }]);
          keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);
          
          options = {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboard
            }
          };
        }
      }
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    switch (data) {
      case 'subscription_management':
      case 'subscription_status': {
        const subscription = await getUserSubscription(user.id);
        const isActive = await isSubscriptionActive(user.id);
        
        if (isActive && subscription) {
          const endDate = new Date(subscription.end_date);
          const daysLeft = Math.ceil((endDate - new Date()) / (1000 * 60 * 60 * 24));
          const paymentSystem = subscription.payment_system || '–ÆKassa';
          
          responseText = `üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π*

‚úÖ *–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–Ω–∞
üí≥ *–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:* ${paymentSystem}
üìÖ *–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* ${endDate.toLocaleDateString('ru-RU')}
‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:* ${daysLeft}
üí∞ *–°—É–º–º–∞:* ${subscription.amount}‚ÇΩ

üîÑ *–¢–∏–ø:* –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ó–∞ –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º—ã –Ω–∞–ø–æ–º–Ω–∏–º –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏

–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.`;
          
          options = {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üöÄ –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/+SQUu4rWliGo5ZjRi' }],
                [{ text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'cancel_subscription' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
              ]
            }
          };
        } else {
          responseText = `‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞*

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª.`;
          
          const paymentSystems = getAvailablePaymentSystems();
          const keyboard = paymentSystems.map(system => [
            { 
              text: `${system.icon} ${system.name} (–æ—Ç ${system.minAmount}‚ÇΩ)`, 
              callback_data: `get_subscription_${system.id}` 
            }
          ]);
          
          keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);
          
          options = {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboard
            }
          };
        }
        break;
      }

      case 'cancel_subscription': {
        const isActive = await isSubscriptionActive(user.id);
        
        if (isActive) {
          responseText = `üö´ *–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏*

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?

‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:*
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–Ω–æ–≤–æ

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏:`;
          
          options = {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'confirm_cancel_subscription' }],
                [{ text: '‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'subscription_management' }]
              ]
            }
          };
        } else {
          responseText = `‚ùå *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏*

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.`;
          
          const paymentSystems = getAvailablePaymentSystems();
          const keyboard = paymentSystems.map(system => [
            { 
              text: `${system.icon} ${system.name} (–æ—Ç ${system.minAmount}‚ÇΩ)`, 
              callback_data: `get_subscription_${system.id}` 
            }
          ]);
          
          keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);
          
          options = {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboard
            }
          };
        }
        break;
      }

      case 'confirm_cancel_subscription': {
        const cancelled = await cancelUserSubscription(user.id);
        
        if (cancelled) {
          responseText = `‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.

‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏!`;
          
          const paymentSystems = getAvailablePaymentSystems();
          const keyboard = paymentSystems.map(system => [
            { 
              text: `${system.icon} ${system.name} (–æ—Ç ${system.minAmount}‚ÇΩ)`, 
              callback_data: `get_subscription_${system.id}` 
            }
          ]);
          
          keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);
          
          options = {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboard
            }
          };
        } else {
          responseText = `‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã*

–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
          
          options = {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', url: 'https://t.me/johnyestet' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'subscription_management' }]
              ]
            }
          };
        }
        break;
      }

      case 'about_channel':
        responseText = `üìã *–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ*

*–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á* - —ç—Ç–æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∫–ª—É–± –ø–æ —é–º–æ—Ä—É. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–æ —à—É—Ç–∏—Ç—å –∏ –ª–µ–≥–∫–æ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ–ª–æ–≤–∫–∏–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏ - —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É.

üéØ *–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –Ω–µ–¥–µ–ª—å —Ç—ã:*
‚Ä¢ –õ–µ–≥–∫–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—à—å –ª—é–±—ã–µ –Ω–µ–ª–æ–≤–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ —à—É—Ç–∫—É
‚Ä¢ –ë–æ–ª—å—à–µ –Ω–µ –¥—É–º–∞–µ—à—å: ¬´–ê —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ–±—ã –±—ã–ª–æ —Å–º–µ—à–Ω–æ?¬ª
‚Ä¢ –ù–∞—á–∞–ª –¥—É–º–∞—Ç—å –ø–æ-–Ω–æ–≤–æ–º—É!

üìö *–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ —é–º–æ—Ä—É, –ø–æ–¥–∞—á–µ, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
‚Ä¢ –ü—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã —Å–æ –°—Ç–∞—Å–æ–º –ï—Ä–Ω–∏–∫–æ–º
‚Ä¢ –° –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞–º –ø–æ —é–º–æ—Ä—É, –ø–æ–¥–±–æ—Ä–∫–∞–º –ø–∞–Ω—á–µ–π –∏ –≤–µ–±–∏–Ω–∞—Ä–∞–º

üë• –ò –≤—Å—ë —ç—Ç–æ —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ: —Å–º–µ—é—Ç—Å—è –Ω–∞–¥ —Ç–≤–æ–∏–º–∏ —à—É—Ç–∫–∞–º–∏ –∏ –ø–æ–º–æ–≥–∞—é—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ. –ó–¥–µ—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ —É—á–∏—Ç—å—Å—è, –ø—Ä–æ–±–æ–≤–∞—Ç—å, –æ—à–∏–±–∞—Ç—å—Å—è –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Å–º–µ—à–Ω–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

üèÜ *–ê —Ç–∞–∫–∂–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å —à—É—Ç–æ–∫!* –õ—É—á—à–∞—è –∑–∞–±–∏—Ä–∞–µ—Ç 1000 —Ä—É–±–ª–µ–π. –ü—Ä–æ—Å—Ç–æ –∑–∞ —Ö–æ—Ä–æ—à–∏–π –ø–∞–Ω—á. –í –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ —Å—É–ø–µ—Ä –ø—Ä–∏–∑. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 100 000 —Ä—É–±–ª–µ–π!

üí∞ *–í—Å—ë —ç—Ç–æ - –æ—Ç 10 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü.*
üîÑ *–ë–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è - –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π*

üöÄ *–ü–æ–ø–∞–¥–∞—è –≤ –ü–µ—Ä–≤—ã–π –ü–∞–Ω—á —Ç—ã:*
‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—à—å –ø–æ–Ω–∏–º–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É —é–º–æ—Ä–∞
‚Ä¢ –°—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ
‚Ä¢ –¢–µ–±—è –±–æ–ª—å—à–µ —Å–ª—É—à–∞—é—Ç
‚Ä¢ –õ–µ–≥—á–µ –∑–∞–≤–æ–¥–∏—à—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞

–≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –∏ –≤ —Ä–∞–±–æ—Ç–µ, –∏ –≤ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ, –∏ –ø—Ä–æ—Å—Ç–æ –≤ –∂–∏–∑–Ω–∏.

üëá *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*`;
        
        const paymentSystems = getAvailablePaymentSystems();
        const keyboard = paymentSystems.map(system => [
          { 
            text: `${system.icon} ${system.name} (–æ—Ç ${system.minAmount}‚ÇΩ)`, 
            callback_data: `get_subscription_${system.id}` 
          }
        ]);
        
        keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);
        
        options = {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: keyboard
          }
        };
        break;
        
      case 'feedback':
        responseText = `üí¨ *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*

–ü—Ä–æ–≤–µ—Ä—å ¬´–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã¬ª ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—à–µ–Ω–∏–µ —É–∂–µ —Ç–∞–º.

*–ù–µ –Ω–∞—à—ë–ª?*

–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`;
        options = {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üÜò –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', url: 'https://t.me/johnyestet' }],
              [{ text: '‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', url: 'https://teletype.in/@tellmonster/JSyG1E5bs-b' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
            ]
          }
        };
        break;
        
      case 'main_menu': {
        const subscriptionInfo = await getSubscriptionInfo(user.id);
        
        let subscriptionText = '';
        let mainButtons = [];
        
        if (subscriptionInfo.isActive && subscriptionInfo.subscription) {
          const endDate = new Date(subscriptionInfo.subscription.end_date);
          const daysLeft = Math.ceil((endDate - new Date()) / (1000 * 60 * 60 * 24));
          const paymentSystem = subscriptionInfo.subscription.payment_system || '–ÆKassa';
          
          subscriptionText = `\n\n‚úÖ *–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞*
üí≥ –û–ø–ª–∞—á–µ–Ω–æ —á–µ—Ä–µ–∑: ${paymentSystem}
üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDate.toLocaleDateString('ru-RU')}
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}
üîÑ –ë–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è`;
          
          mainButtons = [
            [{ text: 'üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π', callback_data: 'subscription_management' }],
            [{ text: 'üöÄ –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª', url: 'https://t.me/+SQUu4rWliGo5ZjRi' }]
          ];
        } else {
          const paymentSystems = getAvailablePaymentSystems();
          mainButtons = paymentSystems.map(system => [
            { 
              text: `${system.icon} ${system.name} (–æ—Ç ${system.minAmount}‚ÇΩ)`, 
              callback_data: `get_subscription_${system.id}` 
            }
          ]);
        }
        
        responseText = `üé≠ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"!*

–ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:
‚ú® –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π —é–º–æ—Ä
‚ú® –°—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ  
‚ú® –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

üí∞ *–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –æ—Ç 10 —Ä—É–±–ª–µ–π –Ω–∞ 30 –¥–Ω–µ–π*
üîÑ *–ë–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è - –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å*${subscriptionText}

üëá *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ* üëá`;

        const additionalButtons = [
          [{ text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ', callback_data: 'about_channel' }],
          [{ text: 'üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data: 'feedback' }],
          [{ text: '‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã', url: 'https://teletype.in/@tellmonster/JSyG1E5bs-b' }]
        ];

        options = {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [...mainButtons, ...additionalButtons]
          }
        };
        break;
      }
    }
    
    if (responseText) {
      await bot.editMessageText(responseText, {
        chat_id: chatId,
        message_id: messageId,
        ...options
      });
      
      await addMessage(chatId, responseText, true, 'text');
    }
    
    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:', error);
    await bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
  if (error.code === 'ETELEGRAM' && error.response && error.response.body) {
    let body;
    if (typeof error.response.body === 'string') {
      try {
        body = JSON.parse(error.response.body);
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON:', parseError);
        return;
      }
    } else {
      body = error.response.body;
    }
    
    if (body.description && body.description.includes('blocked')) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 - –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ü–û–°–õ–ï–î–ù–ï–ô!
app.use('*', (req, res) => {
  console.log(`‚ùì 404 –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.originalUrl}`);
  res.status(404).json({ 
    error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
    method: req.method,
    url: req.originalUrl,
    timestamp: new Date().toISOString()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
  console.log('üöÄ =================================');
  console.log(`üåê API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`ü§ñ –ë–æ—Ç "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" —Ä–∞–±–æ—Ç–∞–µ—Ç`);
  console.log(`üìä API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: /api`);
  console.log(`üè• Health check: /health`);
  console.log(`üí≥ –ÆKassa webhook: /api/yukassa-webhook`);
  console.log(`‚Çø CryptoCloud webhook: /api/cryptocloud-webhook`);
  console.log(`üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: Supabase PostgreSQL`);
  console.log(`üí∞ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: –ÆKassa, CryptoCloud`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || 'production'}`);
  console.log(`üîó URL: https://telegram-bot-first-punch.onrender.com`);
  console.log('üöÄ =================================');
});
