import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { TelegramBotService } from './src/bot/telegramBot.js';
import { Database } from './src/database/database.js';
import { YookassaService } from './src/services/yookassaService.js';
import { CryptoCloudService } from './src/services/cryptoCloudService.js';
import { PaymentScheduler } from './src/services/paymentScheduler.js';
import { webhookRoutes } from './src/routes/webhookRoutes.js';
import { apiRoutes } from './src/routes/apiRoutes.js';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
const requiredEnvVars = [
  'BOT_TOKEN',
  'WEBHOOK_URL',
  'SUPABASE_URL',
  'SUPABASE_SERVICE_ROLE_KEY',
  'YUKASSA_SHOP_ID',
  'YUKASSA_SECRET_KEY',
  'CRYPTOCLOUD_API_KEY',
  'CRYPTOCLOUD_SHOP_ID',
  'CRYPTOCLOUD_SECRET'
];

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã:');
for (const envVar of requiredEnvVars) {
  const value = process.env[envVar];
  if (!value) {
    console.error(`‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ä–µ–¥—ã ${envVar} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    if (['BOT_TOKEN', 'SUPABASE_URL', 'SUPABASE_SERVICE_ROLE_KEY'].includes(envVar)) {
      process.exit(1); // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    } else {
      console.warn(`‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${envVar} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    }
  } else {
    console.log(`‚úÖ ${envVar}: ${envVar.includes('TOKEN') || envVar.includes('KEY') ? value.substring(0, 10) + '...' : value}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
console.log('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞:');
console.log(`üìã PRIVATE_CHANNEL_ID: ${process.env.PRIVATE_CHANNEL_ID || '–ù–ï –ù–ê–°–¢–†–û–ï–ù (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}`);
console.log(`üëë CHANNEL_ADMINS: ${process.env.CHANNEL_ADMINS || '–ù–ï –ù–ê–°–¢–†–û–ï–ù–´'}`);

// Middleware
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
let database, yookassaService, cryptoCloudService, paymentScheduler, telegramBot;

try {
  database = new Database();
  yookassaService = new YookassaService();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CryptoCloud —Å–µ—Ä–≤–∏—Å
  try {
    cryptoCloudService = new CryptoCloudService();
    console.log('‚úÖ CryptoCloud —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.warn('‚ö†Ô∏è CryptoCloud —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    cryptoCloudService = null;
  }
  
  telegramBot = new TelegramBotService(database, yookassaService, null, cryptoCloudService); // paymentScheduler –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–∑–∂–µ
  paymentScheduler = new PaymentScheduler(database, yookassaService, telegramBot); // –ü–µ—Ä–µ–¥–∞–µ–º telegramBot
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ paymentScheduler –≤ telegramBot
  telegramBot.paymentScheduler = paymentScheduler;
  
  console.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
  process.exit(1);
}

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.use('/webhook', webhookRoutes(telegramBot, yookassaService, cryptoCloudService));
app.use('/api', apiRoutes(database, telegramBot)); // –ü–µ—Ä–µ–¥–∞–µ–º telegramBot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    status: 'ok',
    message: 'Telegram Bot Server —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–æ–º –∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString(),
    bot_token_present: !!process.env.BOT_TOKEN,
    webhook_url: process.env.WEBHOOK_URL,
    payment_systems: {
      yookassa: !!yookassaService,
      cryptocloud: !!cryptoCloudService
    },
    channel_management: {
      private_channel_id: process.env.PRIVATE_CHANNEL_ID || 'default',
      admins_configured: !!(process.env.CHANNEL_ADMINS && process.env.CHANNEL_ADMINS.length > 0)
    }
  });
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    services: {
      database: !!database,
      yookassa: !!yookassaService,
      cryptocloud: !!cryptoCloudService,
      telegram: !!telegramBot,
      scheduler: !!paymentScheduler,
      channel_management: true
    }
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await database.init();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await telegramBot.start();
    console.log('‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    
    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –∞—É–¥–∏—Ç–∞ –∫–∞–Ω–∞–ª–∞
    paymentScheduler.start();
    console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –∞—É–¥–∏—Ç–∞ –∫–∞–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CryptoCloud API
    if (cryptoCloudService) {
      try {
        const cryptoStatus = await cryptoCloudService.checkApiStatus();
        if (cryptoStatus) {
          console.log('‚úÖ CryptoCloud API –¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
          console.warn('‚ö†Ô∏è CryptoCloud API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å CryptoCloud API:', error.message);
      }
    }
    
    console.log('üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–º –∫–∞–Ω–∞–ª–æ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
    console.log('üí∞ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:', {
      yookassa: '‚úÖ –Æ–ö–∞—Å—Å–∞',
      cryptocloud: cryptoCloudService ? '‚úÖ CryptoCloud' : '‚ùå CryptoCloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
    process.exit(1);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  console.log('‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  try {
    if (telegramBot) await telegramBot.stop();
    if (paymentScheduler) paymentScheduler.stop();
    console.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
  }
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});