import { 
  addPayment, 
  updatePaymentStatus, 
  addSubscription, 
  getUser, 
  updateSubscriptionStatus,
  getAllUsers,
  isSubscriptionActive
} from './supabase.js';
import { createAutoPayment, cancelPaymentMethod } from '../yukassa-recurring.js';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
const activeAutoPayments = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function startAutoPayments(userId, paymentMethodId, amount = 10) {
  try {
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å –º–µ—Ç–æ–¥–æ–º ${paymentMethodId}`);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    await stopAutoPayments(userId);
    
    const user = await getUser(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –º–µ—Å—è—Ü: 30 * 24 * 60 * 60 * 1000
    const intervalId = setInterval(async () => {
      try {
        console.log(`üí≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        const currentUser = await getUser(userId);
        if (!currentUser || currentUser.is_blocked) {
          console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏`);
          await stopAutoPayments(userId);
          return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
        const payment = await createAutoPayment(
          paymentMethodId,
          amount,
          `–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á" - –º–µ—Å—è—Ü ${new Date().toLocaleDateString('ru-RU')}`,
          {
            userId: userId.toString(),
            username: user.username || '',
            first_name: user.first_name || '',
            last_name: user.last_name || '',
            type: 'auto_subscription',
            paymentSystem: 'yukassa'
          }
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É
        await addPayment(
          userId,
          payment.paymentId,
          payment.amount,
          payment.status,
          null, // –Ω–µ—Ç confirmation_url –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
          'yukassa'
        );
        
        // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if (payment.status === 'succeeded') {
          console.log(`‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü –∫ –ø–æ–¥–ø–∏—Å–∫–µ
          await addSubscription(userId, payment.paymentId, payment.amount, 30, 'yukassa');
          
          console.log(`üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ 30 –¥–Ω–µ–π`);
        } else {
          console.log(`‚ö†Ô∏è –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –Ω–µ —É—Å–ø–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Å—Ç–∞—Ç—É—Å: ${payment.status}`);
          
          // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
          // –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏
        if (error.message.includes('payment_method_not_found') || 
            error.message.includes('card_expired') ||
            error.message.includes('insufficient_funds')) {
          console.log(`üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏`);
          await stopAutoPayments(userId);
        }
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ
    activeAutoPayments.set(userId, {
      intervalId,
      paymentMethodId,
      amount,
      startedAt: new Date(),
      lastPayment: null
    });
    
    console.log(`‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –∑–∞–ø—É—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    return true;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function stopAutoPayments(userId, cancelPaymentMethodToo = false) {
  try {
    console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    const autoPayment = activeAutoPayments.get(userId);
    if (autoPayment) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
      clearInterval(autoPayment.intervalId);
      
      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –æ—Ç–º–µ–Ω—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤ –ÆKassa
      if (cancelPaymentMethodToo && autoPayment.paymentMethodId) {
        try {
          await cancelPaymentMethod(autoPayment.paymentMethodId);
          console.log(`‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω –≤ –ÆKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        } catch (error) {
          console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –≤ –ÆKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
        }
      }
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
      activeAutoPayments.delete(userId);
      
      console.log(`‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      return true;
    } else {
      console.log(`‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      return false;
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function getAutoPaymentStatus(userId) {
  const autoPayment = activeAutoPayments.get(userId);
  if (autoPayment) {
    return {
      active: true,
      paymentMethodId: autoPayment.paymentMethodId,
      amount: autoPayment.amount,
      startedAt: autoPayment.startedAt,
      lastPayment: autoPayment.lastPayment
    };
  }
  return {
    active: false
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
export function getAllActiveAutoPayments() {
  const result = [];
  for (const [userId, autoPayment] of activeAutoPayments.entries()) {
    result.push({
      userId,
      ...autoPayment
    });
  }
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
export async function restoreAutoPayments() {
  try {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    
    console.log('‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
export async function updateSubscriptionStatusByPayments(userId) {
  try {
    console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞—Ç–µ–∂–µ–π`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: payments } = await supabase
      .from('payments')
      .select('*')
      .eq('user_id', userId)
      .eq('status', 'succeeded')
      .order('created_at', { ascending: true });
    
    if (!payments || payments.length === 0) {
      console.log(`‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`);
      return;
    }
    
    const successfulPayments = payments.length;
    console.log(`üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏–º–µ–µ—Ç ${successfulPayments} —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`);
    
    // –ö–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂ = 1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptionMonths = successfulPayments;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await supabase
      .from('users')
      .update({
        subscription_status: 'active',
        updated_at: new Date().toISOString()
      })
      .eq('id', userId);
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${subscriptionMonths} –º–µ—Å—è—Ü–µ–≤`);
    
    return subscriptionMonths;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
    throw error;
  }
}