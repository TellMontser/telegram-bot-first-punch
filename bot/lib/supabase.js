import { createClient } from '@supabase/supabase-js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://vtmdyvkmoysoreqxcnwm.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ0bWR5dmttb3lzb3JlcXhjbndtIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDQ3ODg0NCwiZXhwIjoyMDY2MDU0ODQ0fQ.5YjJRSsix3Ct0NAGb5wtMaQu5C_Qev783NCcu7-7Iyc';

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –∫–ª—é—á–æ–º –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
export const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================

export async function addOrUpdateUser(userInfo) {
  try {
    console.log(`üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userInfo.id}`);
    
    const { data: existingUser, error: fetchError } = await supabase
      .from('users')
      .select('*')
      .eq('id', userInfo.id)
      .single();

    if (fetchError && fetchError.code !== 'PGRST116') {
      throw fetchError;
    }

    const userData = {
      id: userInfo.id,
      username: userInfo.username || null,
      first_name: userInfo.first_name || null,
      last_name: userInfo.last_name || null,
      last_activity: new Date().toISOString(),
      is_blocked: false,
      updated_at: new Date().toISOString()
    };

    if (existingUser) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userData.message_count = (existingUser.message_count || 0) + 1;
      
      const { error } = await supabase
        .from('users')
        .update(userData)
        .eq('id', userInfo.id);

      if (error) throw error;
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${userInfo.id}`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userData.first_seen = new Date().toISOString();
      userData.message_count = 1;
      userData.subscription_status = 'inactive';
      userData.created_at = new Date().toISOString();

      const { error } = await supabase
        .from('users')
        .insert(userData);

      if (error) throw error;
      console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${userInfo.id}`);
    }

    return userData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
}

export async function markUserAsBlocked(userId) {
  try {
    console.log(`üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    const { error } = await supabase
      .from('users')
      .update({ 
        is_blocked: true,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId);

    if (error) throw error;
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${userId}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
}

export async function getUser(userId) {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();

    if (error && error.code !== 'PGRST116') throw error;
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

export async function getAllUsers() {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    return [];
  }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò ====================

export async function addMessage(userId, text, isFromBot = false, messageType = 'text') {
  try {
    console.log(`üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${text.substring(0, 50)}...`);
    
    const { error } = await supabase
      .from('messages')
      .insert({
        user_id: userId,
        text: text,
        is_from_bot: isFromBot,
        message_type: messageType,
        created_at: new Date().toISOString()
      });

    if (error) throw error;
    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    throw error;
  }
}

export async function getMessages(userId) {
  try {
    const { data, error } = await supabase
      .from('messages')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: true });

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    return [];
  }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ó–ê–Ø–í–ö–ê–ú–ò –ù–ê –í–°–¢–£–ü–õ–ï–ù–ò–ï ====================

export async function addJoinRequest(requestData) {
  try {
    console.log(`üì• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${requestData.userId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ pending –∑–∞—è–≤–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: existingRequest } = await supabase
      .from('join_requests')
      .select('*')
      .eq('chat_id', requestData.chatId)
      .eq('user_id', requestData.userId)
      .eq('status', 'pending')
      .single();

    if (existingRequest) {
      console.log(`‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${requestData.userId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      return existingRequest;
    }

    const { data, error } = await supabase
      .from('join_requests')
      .insert({
        chat_id: requestData.chatId,
        chat_title: requestData.chatTitle,
        user_id: requestData.userId,
        status: requestData.status || 'pending',
        request_date: requestData.date,
        processed_at: requestData.processed_at || null,
        created_at: new Date().toISOString()
      })
      .select()
      .single();

    if (error) throw error;
    console.log(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${requestData.userId}`);
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:', error);
    throw error;
  }
}

export async function updateJoinRequestStatus(chatId, userId, status) {
  try {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏: ${userId} -> ${status}`);
    
    const { error } = await supabase
      .from('join_requests')
      .update({ 
        status: status,
        processed_at: new Date().toISOString()
      })
      .eq('chat_id', chatId)
      .eq('user_id', userId)
      .eq('status', 'pending');

    if (error) throw error;
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${userId} -> ${status}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', error);
    throw error;
  }
}

export async function getJoinRequests() {
  try {
    const { data, error } = await supabase
      .from('join_requests')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:', error);
    return [];
  }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–î–ü–ò–°–ö–ê–ú–ò ====================

export async function addSubscription(userId, paymentId, amount, duration = 30, paymentSystem = 'yukassa') {
  try {
    console.log(`üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId} —á–µ—Ä–µ–∑ ${paymentSystem}`);
    
    const startDate = new Date();
    const endDate = new Date(startDate.getTime() + duration * 24 * 60 * 60 * 1000);

    const { data, error } = await supabase
      .from('subscriptions')
      .insert({
        user_id: userId,
        payment_id: paymentId,
        amount: amount,
        duration: duration,
        start_date: startDate.toISOString(),
        end_date: endDate.toISOString(),
        status: 'active',
        payment_system: paymentSystem,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (error) throw error;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await supabase
      .from('users')
      .update({ 
        subscription_status: 'active',
        updated_at: new Date().toISOString()
      })
      .eq('id', userId);

    console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId} —á–µ—Ä–µ–∑ ${paymentSystem}`);
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    throw error;
  }
}

export async function isSubscriptionActive(userId) {
  try {
    const { data, error } = await supabase
      .from('subscriptions')
      .select('*')
      .eq('user_id', userId)
      .eq('status', 'active')
      .order('created_at', { ascending: false });

    if (error) throw error;

    if (!data || data.length === 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabase
        .from('users')
        .update({ 
          subscription_status: 'inactive',
          updated_at: new Date().toISOString()
        })
        .eq('id', userId);
      return false;
    }

    const now = new Date();
    const activeSubscription = data.find(sub => {
      const endDate = new Date(sub.end_date);
      return endDate > now;
    });

    if (!activeSubscription) {
      // –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
      const expiredIds = data
        .filter(sub => new Date(sub.end_date) <= now)
        .map(sub => sub.id);

      if (expiredIds.length > 0) {
        await supabase
          .from('subscriptions')
          .update({ 
            status: 'expired',
            updated_at: new Date().toISOString()
          })
          .in('id', expiredIds);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabase
        .from('users')
        .update({ 
          subscription_status: 'inactive',
          updated_at: new Date().toISOString()
        })
        .eq('id', userId);

      return false;
    }

    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    return false;
  }
}

export async function getUserSubscription(userId) {
  try {
    const { data, error } = await supabase
      .from('subscriptions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (error && error.code !== 'PGRST116') throw error;
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

export async function getAllSubscriptions() {
  try {
    const { data, error } = await supabase
      .from('subscriptions')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    return [];
  }
}

export async function updateSubscriptionStatus(subscriptionId, userId, newStatus) {
  try {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${subscriptionId} -> ${newStatus}`);
    
    const { error } = await supabase
      .from('subscriptions')
      .update({ 
        status: newStatus,
        updated_at: new Date().toISOString()
      })
      .eq('id', subscriptionId);

    if (error) throw error;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStatus = newStatus === 'active' ? 'active' : 'inactive';
    await supabase
      .from('users')
      .update({ 
        subscription_status: userStatus,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId);

    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${subscriptionId} -> ${newStatus}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    return false;
  }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ê–¢–ï–ñ–ê–ú–ò ====================

export async function addPayment(userId, paymentId, amount, status = 'pending', confirmationUrl = null, paymentSystem = 'yukassa') {
  try {
    console.log(`üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: ${paymentId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —á–µ—Ä–µ–∑ ${paymentSystem}`);
    
    const { data, error } = await supabase
      .from('payments')
      .insert({
        user_id: userId,
        payment_id: paymentId,
        amount: amount,
        status: status,
        confirmation_url: confirmationUrl,
        payment_system: paymentSystem,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (error) throw error;
    console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω: ${paymentId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —á–µ—Ä–µ–∑ ${paymentSystem}`);
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
    throw error;
  }
}

export async function updatePaymentStatus(paymentId, status) {
  try {
    console.log(`üí≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: ${paymentId} -> ${status}`);
    
    const { data, error } = await supabase
      .from('payments')
      .update({ 
        status: status,
        updated_at: new Date().toISOString()
      })
      .eq('payment_id', paymentId)
      .select()
      .single();

    if (error) throw error;
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${paymentId} -> ${status}`);
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
    return null;
  }
}

export async function getPaymentByPaymentId(paymentId) {
  try {
    const { data, error } = await supabase
      .from('payments')
      .select('*')
      .eq('payment_id', paymentId)
      .single();

    if (error && error.code !== 'PGRST116') throw error;
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', error);
    return null;
  }
}

export async function getAllPayments() {
  try {
    const { data, error } = await supabase
      .from('payments')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    return [];
  }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ====================

export async function getStats() {
  try {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    
    const [usersResult, messagesResult, joinRequestsResult, subscriptionsResult, paymentsResult] = await Promise.all([
      supabase.from('users').select('*'),
      supabase.from('messages').select('*'),
      supabase.from('join_requests').select('*'),
      supabase.from('subscriptions').select('*'),
      supabase.from('payments').select('*')
    ]);

    const users = usersResult.data || [];
    const messages = messagesResult.data || [];
    const joinRequests = joinRequestsResult.data || [];
    const subscriptions = subscriptionsResult.data || [];
    const payments = paymentsResult.data || [];

    const totalUsers = users.length;
    const activeUsers = users.filter(user => !user.is_blocked).length;
    const blockedUsers = users.filter(user => user.is_blocked).length;
    const totalMessages = messages.length;
    
    const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const recentUsers = users.filter(user => 
      new Date(user.last_activity) > dayAgo
    ).length;
    
    const totalJoinRequests = joinRequests.length;
    const pendingJoinRequests = joinRequests.filter(req => req.status === 'pending').length;
    const approvedJoinRequests = joinRequests.filter(req => req.status === 'approved').length;
    const declinedJoinRequests = joinRequests.filter(req => req.status === 'declined').length;
    
    const now = new Date();
    const activeSubscriptions = subscriptions.filter(sub => {
      const endDate = new Date(sub.end_date);
      return sub.status === 'active' && endDate > now;
    }).length;
    
    const expiredSubscriptions = subscriptions.filter(sub => {
      const endDate = new Date(sub.end_date);
      return sub.status === 'active' && endDate <= now;
    }).length;
    
    const totalSubscriptions = subscriptions.length;
    const totalPayments = payments.length;
    const successfulPayments = payments.filter(p => p.status === 'succeeded' || p.status === 'paid').length;
    const pendingPayments = payments.filter(p => p.status === 'pending' || p.status === 'created').length;
    const totalRevenue = payments
      .filter(p => p.status === 'succeeded' || p.status === 'paid')
      .reduce((sum, p) => sum + Number(p.amount), 0);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º
    const yukassaPayments = payments.filter(p => p.payment_system === 'yukassa' || !p.payment_system).length;
    const cryptocloudPayments = payments.filter(p => p.payment_system === 'cryptocloud').length;

    const stats = {
      totalUsers,
      activeUsers,
      blockedUsers,
      totalMessages,
      recentUsers,
      totalJoinRequests,
      pendingJoinRequests,
      approvedJoinRequests,
      declinedJoinRequests,
      paidUsers: activeSubscriptions,
      unpaidUsers: totalUsers - activeSubscriptions,
      totalSubscriptions,
      activeSubscriptions,
      expiredSubscriptions,
      totalPayments,
      successfulPayments,
      pendingPayments,
      totalRevenue,
      yukassaPayments,
      cryptocloudPayments
    };

    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', stats);
    return stats;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    throw error;
  }
}