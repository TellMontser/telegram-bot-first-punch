import TelegramBot from 'node-telegram-bot-api';
import { 
  addOrUpdateUser, 
  addMessage, 
  isSubscriptionActive,
  getUserPaymentMethods,
  updatePaymentMethodStatus
} from './lib/supabase.js';
import { createAutoPayment, cancelAutoPayments } from './auto-payments.js';
import { createSubscriptionPayment } from './payments.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
export function createMainMenu() {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üí≥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'subscribe' },
          { text: 'üìã –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about_channel' }
        ],
        [
          { text: '‚öôÔ∏è –ú–æ–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏', callback_data: 'auto_payments' },
          { text: 'üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å', callback_data: 'my_status' }
        ],
        [
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
export function createSubscriptionMenu() {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üí≥ –†–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ (10‚ÇΩ)', callback_data: 'pay_once' }
        ],
        [
          { text: 'üîÑ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ (10‚ÇΩ/–º–µ—Å)', callback_data: 'pay_auto' }
        ],
        [
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
export function createAutoPaymentsMenu(hasAutoPayments = false) {
  const keyboard = [];
  
  if (hasAutoPayments) {
    keyboard.push([
      { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏', callback_data: 'cancel_auto_payments' }
    ]);
    keyboard.push([
      { text: 'üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞—Ö', callback_data: 'auto_payments_info' }
    ]);
  } else {
    keyboard.push([
      { text: 'üîÑ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏', callback_data: 'pay_auto' }
    ]);
  }
  
  keyboard.push([
    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
  ]);

  return {
    reply_markup: {
      inline_keyboard: keyboard
    }
  };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
export async function handleStartCommand(bot, msg) {
  try {
    const chatId = msg.chat.id;
    const user = msg.from;

    console.log(`üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id} (@${user.username})`);

    // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await addOrUpdateUser(user);
    await addMessage(user.id, '/start', false, 'command');

    const welcomeText = `üé≠ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"!*

–ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:
‚ú® –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π —é–º–æ—Ä
‚ú® –°—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ  
‚ú® –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 10 —Ä—É–±–ª–µ–π –Ω–∞ 30 –¥–Ω–µ–π*

üîÑ *–ù–æ–≤–∏–Ω–∫–∞: –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏!*
–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∑–∞–±—É–¥—å—Ç–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.

üëá *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ* üëá`;

    await bot.sendMessage(chatId, welcomeText, {
      parse_mode: 'Markdown',
      ...createMainMenu()
    });

    await addMessage(user.id, welcomeText, true, 'text');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleStartCommand:', error);
    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
export async function handleCallbackQuery(bot, callbackQuery) {
  try {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const user = callbackQuery.from;
    const data = callbackQuery.data;

    console.log(`üîò Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${data}`);

    // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await addOrUpdateUser(user);
    await addMessage(user.id, `–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${data}`, false, 'button');

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    await bot.answerCallbackQuery(callbackQuery.id);

    switch (data) {
      case 'main_menu':
        await handleMainMenu(bot, chatId, messageId, user);
        break;
      
      case 'subscribe':
        await handleSubscribeMenu(bot, chatId, messageId, user);
        break;
      
      case 'pay_once':
        await handlePayOnce(bot, chatId, user);
        break;
      
      case 'pay_auto':
        await handlePayAuto(bot, chatId, user);
        break;
      
      case 'auto_payments':
        await handleAutoPaymentsMenu(bot, chatId, messageId, user);
        break;
      
      case 'cancel_auto_payments':
        await handleCancelAutoPayments(bot, chatId, user);
        break;
      
      case 'auto_payments_info':
        await handleAutoPaymentsInfo(bot, chatId, user);
        break;
      
      case 'about_channel':
        await handleAboutChannel(bot, chatId, messageId, user);
        break;
      
      case 'my_status':
        await handleMyStatus(bot, chatId, user);
        break;
      
      default:
        console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: ${data}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleCallbackQuery:', error);
    await bot.sendMessage(callbackQuery.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function handleMainMenu(bot, chatId, messageId, user) {
  const welcomeText = `üé≠ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á"!*

–ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:
‚ú® –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π —é–º–æ—Ä
‚ú® –°—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ  
‚ú® –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 10 —Ä—É–±–ª–µ–π –Ω–∞ 30 –¥–Ω–µ–π*

üëá *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ* üëá`;

  await bot.editMessageText(welcomeText, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'Markdown',
    ...createMainMenu()
  });

  await addMessage(user.id, welcomeText, true, 'text');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
async function handleSubscribeMenu(bot, chatId, messageId, user) {
  const subscribeText = `üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏*

üî∏ *–†–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂* - –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ 30 –¥–Ω–µ–π
üî∏ *–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂* - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü

üí° *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:*
‚úÖ –ù–µ –Ω—É–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
‚úÖ –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å: 10 —Ä—É–±–ª–µ–π –∑–∞ 30 –¥–Ω–µ–π*`;

  await bot.editMessageText(subscribeText, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'Markdown',
    ...createSubscriptionMenu()
  });

  await addMessage(user.id, subscribeText, true, 'text');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
async function handlePayOnce(bot, chatId, user) {
  try {
    const payment = await createSubscriptionPayment(user.id, user, 'yukassa');
    
    const paymentText = `üí≥ *–†–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!*

üí∞ –°—É–º–º–∞: ${payment.amount}‚ÇΩ
üïê –°—Ä–æ–∫: 30 –¥–Ω–µ–π

üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:`;

    await bot.sendMessage(chatId, paymentText, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: payment.confirmationUrl }
          ],
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      }
    });

    await addMessage(user.id, paymentText, true, 'text');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
async function handlePayAuto(bot, chatId, user) {
  try {
    const payment = await createAutoPayment(user.id, user);
    
    const paymentText = `üîÑ *–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!*

üí∞ –°—É–º–º–∞: ${payment.amount}‚ÇΩ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ: –í–ö–õ
‚ùå –û—Ç–º–µ–Ω–∞: –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞

‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø–∏—Å–∞–Ω–∏–π. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.

üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã:`;

    await bot.sendMessage(chatId, paymentText, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂', url: payment.confirmationUrl }
          ],
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      }
    });

    await addMessage(user.id, paymentText, true, 'text');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error);
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: ${error.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
async function handleAutoPaymentsMenu(bot, chatId, messageId, user) {
  try {
    const paymentMethods = await getUserPaymentMethods(user.id);
    const hasAutoPayments = paymentMethods.length > 0;
    
    let menuText;
    
    if (hasAutoPayments) {
      menuText = `‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞–º–∏*

‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
üí≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: ${paymentMethods.length}
üí∞ –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è: 10‚ÇΩ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π

üîÑ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.`;
    } else {
      menuText = `‚öôÔ∏è *–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏*

‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã

üí° *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π:*
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
‚úÖ –ù–µ –Ω—É–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
‚úÖ –û—Ç–º–µ–Ω–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç`;
    }

    await bot.editMessageText(menuText, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      ...createAutoPaymentsMenu(hasAutoPayments)
    });

    await addMessage(user.id, menuText, true, 'text');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleAutoPaymentsMenu:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞—Ö.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
async function handleCancelAutoPayments(bot, chatId, user) {
  try {
    await cancelAutoPayments(user.id);
    
    const cancelText = `‚ùå *–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã*

‚úÖ –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
‚úÖ –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞

üí° –í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –∏–ª–∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é.`;

    await bot.sendMessage(chatId, cancelText, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      }
    });

    await addMessage(user.id, cancelText, true, 'text');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π:', error);
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π: ${error.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞—Ö
async function handleAutoPaymentsInfo(bot, chatId, user) {
  try {
    const paymentMethods = await getUserPaymentMethods(user.id);
    
    let infoText = `üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞—Ö*

üí≥ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã:* ${paymentMethods.length}
üí∞ *–°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è:* 10‚ÇΩ
‚è∞ *–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:* –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π
üîÑ *–°—Ç–∞—Ç—É—Å:* ${paymentMethods.length > 0 ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

`;

    if (paymentMethods.length > 0) {
      infoText += `üìã *–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:*\n`;
      paymentMethods.forEach((method, index) => {
        infoText += `${index + 1}. ${method.card_mask || '–ö–∞—Ä—Ç–∞'} (${method.type})\n`;
      });
      
      infoText += `\n‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –°–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.`;
    } else {
      infoText += `‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∏—Ö –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞!`;
    }

    await bot.sendMessage(chatId, infoText, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      }
    });

    await addMessage(user.id, infoText, true, 'text');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞—Ö:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
async function handleAboutChannel(bot, chatId, messageId, user) {
  const aboutText = `üìã *–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ*

*–ü–µ—Ä–≤—ã–π –ü–∞–Ω—á* - —ç—Ç–æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∫–ª—É–± –ø–æ —é–º–æ—Ä—É. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–æ —à—É—Ç–∏—Ç—å –∏ –ª–µ–≥–∫–æ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ–ª–æ–≤–∫–∏–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏ - —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É.

üéØ *–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –Ω–µ–¥–µ–ª—å —Ç—ã:*
‚Ä¢ –õ–µ–≥–∫–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—à—å –ª—é–±—ã–µ –Ω–µ–ª–æ–≤–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ —à—É—Ç–∫—É
‚Ä¢ –ë–æ–ª—å—à–µ –Ω–µ –¥—É–º–∞–µ—à—å: ¬´–ê —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ–±—ã –±—ã–ª–æ —Å–º–µ—à–Ω–æ?¬ª
‚Ä¢ –ù–∞—á–∞–ª –¥—É–º–∞—Ç—å –ø–æ-–Ω–æ–≤–æ–º—É!

üìö *–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ —é–º–æ—Ä—É, –ø–æ–¥–∞—á–µ, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
‚Ä¢ –ü—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã —Å–æ –°—Ç–∞—Å–æ–º –ï—Ä–Ω–∏–∫–æ–º
‚Ä¢ –° –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞–º –ø–æ —é–º–æ—Ä—É, –ø–æ–¥–±–æ—Ä–∫–∞–º –ø–∞–Ω—á–µ–π –∏ –≤–µ–±–∏–Ω–∞—Ä–∞–º

üë• –ò –≤—Å—ë —ç—Ç–æ —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ: —Å–º–µ—é—Ç—Å—è –Ω–∞–¥ —Ç–≤–æ–∏–º–∏ —à—É—Ç–∫–∞–º–∏ –∏ –ø–æ–º–æ–≥–∞—é—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ. –ó–¥–µ—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ —É—á–∏—Ç—å—Å—è, –ø—Ä–æ–±–æ–≤–∞—Ç—å, –æ—à–∏–±–∞—Ç—å—Å—è –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Å–º–µ—à–Ω–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

üèÜ *–ê —Ç–∞–∫–∂–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å —à—É—Ç–æ–∫!* –õ—É—á—à–∞—è –∑–∞–±–∏—Ä–∞–µ—Ç 1000 —Ä—É–±–ª–µ–π. –ü—Ä–æ—Å—Ç–æ –∑–∞ —Ö–æ—Ä–æ—à–∏–π –ø–∞–Ω—á. –í –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ —Å—É–ø–µ—Ä –ø—Ä–∏–∑. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 100 000 —Ä—É–±–ª–µ–π!

üí∞ *–í—Å—ë —ç—Ç–æ - –≤—Å–µ–≥–æ –∑–∞ 10 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü.*

üöÄ *–ü–æ–ø–∞–¥–∞—è –≤ –ü–µ—Ä–≤—ã–π –ü–∞–Ω—á —Ç—ã:*
‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—à—å –ø–æ–Ω–∏–º–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É —é–º–æ—Ä–∞
‚Ä¢ –°—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ
‚Ä¢ –¢–µ–±—è –±–æ–ª—å—à–µ —Å–ª—É—à–∞—é—Ç
‚Ä¢ –õ–µ–≥—á–µ –∑–∞–≤–æ–¥–∏—à—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞

–≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –∏ –≤ —Ä–∞–±–æ—Ç–µ, –∏ –≤ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ, –∏ –ø—Ä–æ—Å—Ç–æ –≤ –∂–∏–∑–Ω–∏.

üëá *–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –Ω–∏–∂–µ*`;

  await bot.editMessageText(aboutText, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üí≥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'subscribe' }
        ],
        [
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    }
  });

  await addMessage(user.id, aboutText, true, 'text');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleMyStatus(bot, chatId, user) {
  try {
    const isActive = await isSubscriptionActive(user.id);
    const paymentMethods = await getUserPaymentMethods(user.id);
    
    let statusText = `üìä *–í–∞—à —Å—Ç–∞—Ç—É—Å*

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${user.first_name} ${user.last_name || ''}
üÜî *ID:* ${user.id}
üì± *Username:* @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

`;

    if (isActive) {
      statusText += `‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞:* –ê–∫—Ç–∏–≤–Ω–∞
üîÑ *–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏:* ${paymentMethods.length > 0 ? '–ü–æ–¥–∫–ª—é—á–µ–Ω—ã' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã'}
üí≥ *–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç:* ${paymentMethods.length}

üéâ –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫–∞–Ω–∞–ª–∞!`;
    } else {
      statusText += `‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞:* –ù–µ–∞–∫—Ç–∏–≤–Ω–∞
üîÑ *–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏:* ${paymentMethods.length > 0 ? '–ü–æ–¥–∫–ª—é—á–µ–Ω—ã (–æ–∂–∏–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã'}

üí° –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É.`;
    }

    await bot.sendMessage(chatId, statusText, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: isActive ? '‚öôÔ∏è –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏' : 'üí≥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', 
              callback_data: isActive ? 'auto_payments' : 'subscribe' }
          ],
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      }
    });

    await addMessage(user.id, statusText, true, 'text');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–∞.');
  }
}